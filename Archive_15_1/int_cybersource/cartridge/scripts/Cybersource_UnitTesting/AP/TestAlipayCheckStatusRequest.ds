/**
*	AlipayCheckPaymentStatusRequest.ds
*
*	This script call service to check payment status for alipay on basis of request id generated by Initiate payment service  
* 	and set the response in response object.
*	To test this test service user need to pass request id generated by Alipay Initiate service in URL Input parameter
*	as mentioned below:
*	https://"Development Box Name"/on/demandware.store/Sites-SiteGenesis-Site/default/CybersourceUnitTesting-
*	TestAlipayCheckStatusService?requestID="Request ID generated by Alipay Initiate Service"
*
* 	@input  RequestID : String
*
* 	@output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* 	@output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* 	@output ReconciliationID : String
* 	@output PaymentStatus : String
* 	@output ProcessorTransactionID : String
* 	@output checkStatusRequestID : String
* 	@output RequestToken : String the token generated by Cybersource
*/
importPackage( dw.system );
importScript('cybersource/libCybersource.ds');
function execute( pdict : PipelineDictionary ) : Number
{
   	//create service stubs
   	var CybersourceHelper = getCybersourceHelper();	
   	var csReference : WebReference = webreferences.CyberSourceTransaction;
   	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
   	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
   	CybersourceHelper.setEndpoint(service);

	if(!CybersourceHelper.createHeader(service))
	{
		return PIPELET_ERROR;
	}
	//set alipay payment type to pass it as input in request
	var alipayPaymentType : String = Site.getCurrent().getCustomPreferenceValue('apPaymentType');
	var request = new csReference.RequestMessage();
	//call alipay check status service by passing required input parameters
	CybersourceHelper.apCheckStatusService(request,"test",pdict.RequestID,alipayPaymentType.value);
	var response = null;
	//get the response in response object
	try
	{
		response = service.runTransaction(request);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[AlipayCheckPaymentStatusRequest.ds] Error in Execute request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            pdict.ReasonCode = 999; //set timeout error code 999
            return PIPELET_NEXT;
		}       
		
		return PIPELET_ERROR;
	}
	
	//log the response in debug log
	Logger.debug(response);
	
	//log the response in case of error scenario
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error : null response");
		return PIPELET_ERROR;
	}
	
	//set response values in pipeline dictionary
	pdict.checkStatusRequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(!empty(response.apCheckStatusReply)) {
		pdict.ReconciliationID = response.apCheckStatusReply.reconciliationID;
		pdict.PaymentStatus = response.apCheckStatusReply.paymentStatus;
		pdict.ProcessorTransactionID = response.apCheckStatusReply.processorTransactionID;
	}
   return PIPELET_NEXT;
}
