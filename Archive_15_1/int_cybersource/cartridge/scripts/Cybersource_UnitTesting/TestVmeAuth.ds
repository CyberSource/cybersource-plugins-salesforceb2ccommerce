/**
* TestVmeAuth.ds
* Performs the authorization of the Visa VMe.
*
* @input  apObject : Object
* @input  purchaseTotals : Object
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output dateTime : String
* @output providerResponse : String
* @output apReasonCode : Number the Checkout Reply ReasonCode
* @output apStatus : String the status of order
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AVSCodeRaw : String
* @output transactionID : String transactio id
* @output cardExpirationMonth : String exp month of card
* @output cardExpirationYear : String exp year of card
* @output cardGroup : String credit card
* @output cardType : String card type Credit, master, visa 
* @output cardNumberSuffix : String card number suffix 4 digit
* @output purchaseTotalCurrency : String Currency
* @output riskIndicator : String
*
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_AP_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	var CybersourceHelper = getCybersourceHelper();
	var apObject : AP_Object = pdict.apObject;
	var purchaseObject : PurchaseTotals_Object = pdict.purchaseTotals;	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addAPAuthRequestInfo(request, purchaseObject, apObject, "test");
	
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in Vme request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	pdict.riskIndicator = "UNAVAILABLE";
	if(null != response.purchaseTotals)
		pdict.purchaseTotalCurrency = response.purchaseTotals.currency;
	
	if(null != response.apAuthReply) {
		pdict.AuthorizationAmount = response.apAuthReply.amount;
		pdict.dateTime = response.apAuthReply.dateTime;
		pdict.providerResponse = response.apAuthReply.providerResponse;
		pdict.apReasonCode = response.apAuthReply.reasonCode.get();
		pdict.apStatus = response.apAuthReply.status;
		pdict.transactionID = response.apAuthReply.transactionID;
	}
	
	if(null != response.apReply){				
		pdict.cardExpirationMonth = response.apReply.cardExpirationMonth;
		pdict.cardExpirationYear = response.apReply.cardExpirationYear;
		pdict.cardGroup = response.apReply.cardGroup;
		pdict.cardNumberSuffix = response.apReply.cardNumberSuffix;
		pdict.cardType = response.apReply.cardType;		
		pdict.AVSCodeRaw = response.apReply.avsCodeRaw;
		if(!empty(response.apReply.riskIndicator)){
			pdict.riskIndicator = response.apReply.riskIndicator;
		}			
	}
	


    return PIPELET_NEXT;
}

