/**
* Performs the tax calculation on each items exist in Basket. If basket is null it returns
* with PIPELET_ERROR if not null, Cybersource request will be processed.  
*
* @input  billTo : Object
* @input  shipTo : Object
* @input  card : Object
* @input  purchaseTotals : Object
* @input  shipFrom : Object
* @input  taxService : Object
* @input  itemArray : Array
* @input  itemMap : dw.util.ArrayList
* @input  Basket : dw.order.LineItemCtnr
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output totalTaxAmount : String;
* @output TaxReply : Object;
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/libCybersource.ds');

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_ShipFrom_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_TaxRequest_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	
    var amount : Money = new Money(2057.00,"USD");
	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var basket : LineItemCtnr = pdict.Basket;
	var itemArray : Array = pdict.itemArray;
	var itemMap : HashMap = pdict.itemMap;
	//var itemMap : HashMap = new HashMap();
	var shipFrom : ShipFrom_Object = pdict.shipFrom;
	var taxService : TaxService_Object = pdict.taxService;
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var taxationService : Stub = csReference.getService("TransactionProcessor", "portXML");
	var CybersourceHelper = getCybersourceHelper();
	
	CybersourceHelper.setEndpoint(taxationService);
	
	if(!CybersourceHelper.createHeader(taxationService)){
		return PIPELET_ERROR;
	}
	
	// create request body
	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addTaxRequest(request,billToObject,shipToObject,purchaseObject,cardObject,shipFrom,taxService,itemArray,"TEST123");
	//CybersourceHelper.addTaxRequest2(itemMap,basket,request,billToObject,shipToObject,purchaseObject,cardObject,shipFrom,taxService,itemArray);
	var taxationResponse = null;
	// send request
	try{
		taxationResponse = taxationService.runTransaction(request);
	} catch(e) {
		Logger.error("[libCybersource.ds] Error in taxation request ( {0} )",e.message);
		pdict.Decision="ERROR";
		
		return PIPELET_ERROR;
	}
	
	if(taxationResponse == null){
		pdict.Decision="ERROR";
	
		return PIPELET_ERROR;
	}
	pdict.Decision = taxationResponse.decision;
	pdict.RequestID = taxationResponse.requestID;
	pdict.RequestToken = taxationResponse.requestToken;
	if( !empty(taxationResponse.davReply) ) {
		pdict.DAVReasonCode = taxationResponse.davReply;
	}
	// in case of success update basket
	if( taxationResponse.decision=="ACCEPT" ) {
		var resItem;
		pdict.TaxReply = __copyTaxAmounts(taxationResponse.taxReply);
		for each(resItem in taxationResponse.taxReply.item){
			var lineItem : ProductLineItem = itemMap.get(resItem.id);
			var itemTax : dw.value.Money = new dw.value.Money(new Number((lineItem['class']=="dw.order.PriceAdjustment"?"-":"")+resItem.totalTaxAmount),"USD");
			lineItem.setTax(itemTax);
			//lineItem.setGrossPrice(lineItem.netPrice.add(itemTax));
			lineItem.setGrossPrice(lineItem.netPrice+=itemTax);
		   
		}
		pdict.totalTaxAmount = taxationResponse.taxReply.totalTaxAmount;
		//basket.updateTotals();
		
		reasonCode = taxationResponse.reasonCode;
	} else if( taxationResponse.decision=="REJECT" ) {
		var missingFields = "";
		var invalidFields = "";
		if( null!=taxationResponse.missingField ) {
			for(var i : Number = 0; i < taxationResponse.missingField.length; i++){
				missingFields += taxationResponse.missingField[i];
			}
		}
		if( null!=taxationResponse.invalidField ) {
			for(var i : Number = 0; i < taxationResponse.invalidField.length; i++){
				invalidFields += taxationResponse.invalidField[i];
			}
		}
		Logger.error("[libCybersource.ds] Taxation request REJECTED (ReasonCode {0} ). \nRequestToken: {1} \nMissing Fields: {2} \nInvalid Fields: {3}",taxationResponse.reasonCode,taxationResponse.requestToken,missingFields,invalidFields);
		reasonCode = taxationResponse.reasonCode;
	} else if( taxationResponse.decision == "ERROR" ) {
		Logger.error("[libCybersource.ds] Taxation request ERROR (ReasonCode {0} ). \nRequestToken: {1}",taxationResponse.reasonCode,taxationResponse.requestToken);
		reasonCode = taxationResponse.reasonCode;
	}

	if( reasonCode==100 ) {
		return PIPELET_NEXT;
	} else {
		return PIPELET_ERROR;
	}
	
    return PIPELET_NEXT;
}
