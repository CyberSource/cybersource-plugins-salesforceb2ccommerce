/**
* Performs the authorization of POS transaction.
*
* @input location		: String
* @input orderNo 		: String
* @input card 			: Object
* @input purchaseTotal	: Object
* @input pos 			: Object
*
* @output MerchantReferenceCode 				: String
* @output RequestID 							: String The request id generated by Cybersource
* @output Decision 								: String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode 							: Number The global reason code returned by Cybersource (100 = Success)
* @output PurchaseTotalsCurrency 				: String

* @output AuthorizationReasonCode 				: Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount 					: String the amount authorized by Cybersource
* @output AuthorizationCode 					: String the authorizationCode by Cybersource
* @output AVSCode 								: String
* @output AVSCodeRaw 							: String
* @output AuthReplyCardGroup 					: String
* @output AuthReplyCardCategory 				: String
* @output AuthReplyPaymentNetworkTransactionID	: String
* @output AuthReplyReconciliationID 			: String
* @output AuthReplyProcessorResponse 			: String

* @output CaptureReplyReconciliationID 			: String
* @output CaptureReplyAmount 					: String
* @output CaptureReplyReasonCode 				: String
* @output ReceiptNumber			 				: String

* @output InvalidField 							: Array
* @output MissingField 							: Array
* @output Status								: dw.system.Status
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage (dw.value);

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_POS_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

	//**************************************************************************//
	// read pipeline dictionary input parameter	
	//**************************************************************************//    
    var location: String = pdict.location;
    var orderNo: String = pdict.orderNo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotal;
	var posObject: Pos_Object = pdict.pos;


	//**************************************************************************//
	// Set WebReference & Stub
	//**************************************************************************//	
	var CybersourceHelper = getCybersourceHelper();	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	CybersourceHelper.setEndpoint(service);

	if(!CybersourceHelper.createPosHeader(service, location))
	{
		return PIPELET_ERROR;
	}
	

	//**************************************************************************//
	// the request object holds the input parameter for the AUTH request
	//**************************************************************************//	
	var request = new csReference.RequestMessage();
	CybersourceHelper.addPOSAuthRequestInfo(request, location, purchaseObject, cardObject, orderNo, CybersourceHelper.getDigitalFingerprintEnabled(), posObject);		


	//**************************************************************************//
	// Execute Request
	//**************************************************************************//	
	var response = null;
	try
	{
		response = service.runTransaction(request);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in POS CCAuthRequestInfo request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            pdict.ReasonCode = 999; //set timeout error code 999
            return PIPELET_NEXT;
		}       
		
		return PIPELET_ERROR;
	}

	
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in POS CCAuthRequestInfo: null response");
		return PIPELET_ERROR;
	}
		
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	
	pdict.RequestID 								= response.requestID;
	pdict.MerchantReferenceCode						= response.merchantReferenceCode;
	pdict.Decision									= response.decision;
	pdict.ReasonCode								= response.reasonCode.get();

	if(!empty(response.purchaseTotals))
		pdict.PurchaseTotalsCurrency				= response.purchaseTotals.currency;
	
	if(!empty(response.ccAuthReply)){
		pdict.AuthorizationReasonCode				= response.ccAuthReply.reasonCode.get();
		pdict.AuthorizationAmount					= response.ccAuthReply.amount;
		pdict.AuthorizationCode 					= response.ccAuthReply.authorizationCode;
		pdict.AVSCode								= response.ccAuthReply.avsCode;
		pdict.AVSCodeRaw 							= response.ccAuthReply.avsCodeRaw;
		pdict.AuthReplyProcessorResponse			= response.ccAuthReply.processorResponse;
		pdict.AuthReplyReconciliationID 			= response.ccAuthReply.reconciliationID;
		pdict.AuthReplyPaymentNetworkTransactionID	= response.ccAuthReply.paymentNetworkTransactionID;
		pdict.AuthReplyCardCategory					= response.ccAuthReply.cardCategory;
		pdict.AuthReplyCardGroup					= response.ccAuthReply.cardGroup;
	}
	
	if(!empty(response.ccCaptureReply)){
		pdict.CaptureReplyReasonCode				= response.ccCaptureReply.reasonCode;
		pdict.CaptureReplyAmount					= response.ccCaptureReply.amount;
		pdict.CaptureReplyReconciliationID			= response.ccCaptureReply.reconciliationID;
	}
	
	if(!empty(response.receiptNumber)){
		pdict.ReceiptNumber							= response.receiptNumber;
	}
	
	if(!empty(response.invalidField)){
		pdict.InvalidField							= response.invalidField;
	}

	if(!empty(response.missingField)){
		pdict.MissingField							= response.missingField;
	}
	
	//**************************************************************************//
	//Log response code specific data for further processing
	//**************************************************************************//
	var logTransactionData : String = " Order No = " +orderNo;
	logTransactionData += ", Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;
	
	// below response codes will be updated after getting suitable response reason codes
	// for POS transaction
	switch ( response.reasonCode.get() )
	{
		case 100:	
			Logger.info("[PosAuthRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction.");
			pdict.Status = new Status(Status.OK);
			return PIPELET_NEXT;
			break;	
		case 101:	
			Logger.getRootLogger().fatal("[PosAuthRequest] [Cybersource Reson Code: 101] [FATAL] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_USERDENIED");
			break;	
		case 102:								
			Logger.getRootLogger().fatal("[PosAuthRequest] [Cybersource Reson Code: 102] [FATAL] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data. The could be due to coding error since all required fields should be first validated by the COSubmit pipeline.");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_USERDENIED");
			break;
		case 150:
			Logger.getRootLogger().fatal("[PosAuthRequest] [Cybersource Reson Code: 150] [FATAL] " + logTransactionData + " Error Message = Error: General system failure.");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;				
		case 151:
			Logger.getRootLogger().fatal("[PosAuthRequest] [Cybersource Reson Code: 151] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;				
		case 152:
			Logger.getRootLogger().fatal("[PosAuthRequest] [Cybersource Reson Code: 152] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;	
		case 234:
			Logger.getRootLogger().fatal("[PosAuthRequest] [Cybersource Reson Code: 234] [FATAL] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;
		case 400:
			Logger.warn("[PosAuthRequest] [Cybersource Reson Code: 400] [WARN] " + logTransactionData + " Error Message = The fraud score exceeds your threshold. - Customer support to handle the order. ");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;
		case 480:
			Logger.warn("[PosAuthRequest] [Cybersource Reson Code: 480] [WARN] " + logTransactionData + " Error Message = The order is marked for review by Decision Manager. - ");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_UNCONFIRMED");
			return PIPELET_NEXT;
			break;						
		case 481:
			Logger.warn("[PosAuthRequest] [Cybersource Reson Code: 481] [WARN] " + logTransactionData + " Error Message = The order is rejected by Decision Manager. - Customer support to handle the order. ");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;			
		default:
			Logger.warn("[PosAuthRequest] [Cybersource Reson Code:" + response.reasonCode.get() +"] [WARN] " + logTransactionData + ", Error Message = Authorization Denied - ");
			pdict.Status = new Status(Status.ERROR, "CREDITCARD_INVALID_AUTH");
			break;
	}
	
    return PIPELET_ERROR;
}
