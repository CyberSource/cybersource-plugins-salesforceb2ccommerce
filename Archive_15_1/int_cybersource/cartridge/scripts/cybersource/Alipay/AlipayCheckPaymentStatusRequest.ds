/**
*	AlipayCheckPaymentStatusRequest.ds
*
*	This script call service to check payment status for alipay on basis of request id generated by Initiate payment service  
* 	and set the response in response object and also handles the logging of different error scenarios 
*	while making service call.
*
* 	@input 	OrderNo : String The order no
* 	@input  RequestID : String
*
* 	@output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* 	@output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* 	@output ReconciliationID : String
* 	@output PaymentStatus : String
* 	@output ProcessorTransactionID : String
* 	@output RequestID : String The request id generated by Cybersource
* 	@output RequestToken : String the token generated by Cybersource
*/
importPackage( dw.system );
importScript('cybersource/libCybersource.ds');
function execute( pdict : PipelineDictionary ) : Number
{
	//set the order object from pipeline dictionary
   	var orderNo : String = pdict.OrderNo;
   	//create service stubs
   	var CybersourceHelper = getCybersourceHelper();	
   	var csReference : WebReference = webreferences.CyberSourceTransaction;
   	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
   	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
   	CybersourceHelper.setEndpoint(service);

	if(!CybersourceHelper.createHeader(service))
	{
		return PIPELET_ERROR;
	}
	//set alipay payment type to pass it as input in request
	var alipayPaymentType : String = CybersourceHelper.getAlipayPaymentType();
	var request = new csReference.RequestMessage();
	//call alipay check status service by passing required input parameters
	CybersourceHelper.apCheckStatusService(request,orderNo,pdict.RequestID,alipayPaymentType.value);
	var response = null;
	//get the response in response object
	try
	{
		response = service.runTransaction(request);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[AlipayCheckPaymentStatusRequest.ds] Error in Execute request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            pdict.ReasonCode = 999; //set timeout error code 999
            return PIPELET_NEXT;
		}       
		
		return PIPELET_ERROR;
	}
	
	//log the response in debug log
	Logger.debug(response);
	
	//log the response in case of error scenario
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error : null response");
		return PIPELET_ERROR;
	}
	
	//set response values in pipeline dictionary
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(!empty(response.apCheckStatusReply)) {
		pdict.ReconciliationID = response.apCheckStatusReply.reconciliationID;
		pdict.PaymentStatus = response.apCheckStatusReply.paymentStatus;
		pdict.ProcessorTransactionID = response.apCheckStatusReply.processorTransactionID;
	}
	//set the response values in a variable
	var logTransactionData : String = " Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;
	logTransactionData += ", Cybersource Check Status Service Reconciliation ID = " +response.apCheckStatusReply.reconciliationID;
	logTransactionData += ", Cybersource Check Status Service Payment Status = " +response.apCheckStatusReply.paymentStatus;
  
  	//log the response as per reason code generated by the request
   	switch(response.reasonCode.get()){
    	case 100:
    		Logger.info("[APInitiateServiceRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction."); 
    		break;
    	case 101:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 101] [ERROR] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
    		break;
    	case 102: 
    	    Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 102] [ERROR] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data.");
    	    break;
    	case 150:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 150] [ERROR] " + logTransactionData + " Error Message = Error: General system failure.");
    		break;
    	case 233:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 233] [ERROR] " + logTransactionData + " Error Message = Error from Alipay. Alipay rejected this request because of invalid order request.");
    		break;
    }
   return PIPELET_NEXT;
}
