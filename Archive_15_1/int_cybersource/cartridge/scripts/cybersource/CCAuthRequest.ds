/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
*
* @input Basket : dw.order.LineItemCtnr The basket used for Authorization
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input CreditCardData : Object
* @input IPAddress : String The client's IP address

* @input  billTo : Object 
* @input  shipTo : Object
* @input  item : Array
* @input  card : Object
* @input  purchaseTotals : Object
* @input ParesStatus : String paresStatus as returned by Cybersource
*
* optional payer auth input data 
* if XID is provided (not null) the PA data is added to the request
*
* @input CAVV : String The cybersource PAValidate reply field - is a unique identifier generated by the customer's issuing bank for Verified by VISA transaction
* @input UCAFAuthenticationData : String The cybersource PAValidate reply field - AAV is a unique identifier generated by the customer's issuing bank for MasterCard SecureCode transaction.
* @input UCAFCollectionIndicator : String The cybersource PAValidate reply field
* @input CommerceIndicator : String The cybersource PAValidate reply field
* @input XID : String The cybersource PAValidate reply field - A unique transaction ID generated for each payment authentication request (PAReq) message. The PARes returned by issuing bank contains the XID of the PAReq.
* @input ECIRaw : String The cybersource PAValidate reply field - Electronic commerce indicator (ECI) value that may be returned for Visa, MasterCard, and JCB
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
*
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output MissingFieldsArray : Array Contains any missing (and required) fields to complete DAV processing
* @output InvalidFieldsArray : Array Contains any invalid (and required) fields to complete DAV processing
* @output StandardizedAddress : Object Contains any 'corrections' made to the address from standards point of view
* @output SubscriptionIDToken :String Token
*
* @output Temp : Object;
* Author: Danny Gehl
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage (dw.value);
importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

	//**************************************************************************//
	// read pipeline dictionary input parameter	
	//**************************************************************************//    
	var ccdata : CreditCardInfoHelper = pdict.CreditCardData;
    var basket : LineItemCtnr = pdict.Basket;
    var orderNo : String = pdict.OrderNo;
   	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;


	//**************************************************************************//
	// Check if Basket exists
	//**************************************************************************//
	if(basket == null){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}

	//**************************************************************************//
	// Set WebReference & Stub
	//**************************************************************************//	
	var CybersourceHelper = getCybersourceHelper();	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	CybersourceHelper.setEndpoint(service);

	if(!CybersourceHelper.createHeader(service))
	{
		return PIPELET_ERROR;
	}
	

	//**************************************************************************//
	// the request object holds the input parameter for the AUTH request
	//**************************************************************************//	
	var request = new csReference.RequestMessage();
	CybersourceHelper.addCCAuthRequestInfo(request,billToObject,shipToObject,purchaseObject,cardObject,orderNo, CybersourceHelper.getDigitalFingerprintEnabled(), pdict.item);		
	if(pdict.XID != null)
	{
		CybersourceHelper.addPayerAuthReplyInfo(request, pdict.CAVV, pdict.UCAFAuthenticationData, pdict.UCAFCollectionIndicator, pdict.ECIRaw, pdict.CommerceIndicator, pdict.XID, pdict.ParesStatus);
	}
	
	/********************************/
	/* TOKEN-related WebService setup */
	/********************************/
	var enableTokenization : String = CybersourceHelper.getTokenizationEnabled();
	if(enableTokenization=='YES')
		CybersourceHelper.addPaySubscriptionCreateService(request,billToObject,purchaseObject,cardObject,pdict.OrderNo);
	
	/********************************/
	/* DAV-related WebService setup */
	/********************************/	
	var enableDAV : String = CybersourceHelper.getDavEnable();
	var approveDAV : String = CybersourceHelper.getDavOnAddressVerificationFailure();
	
	if( enableDAV=='YES' ) {
		var ignoreDAVResult = false;
		if( approveDAV=='APPROVE' ) {
			ignoreDAVResult = true;
		}
		CybersourceHelper.addDAVRequestInfo(request,billToObject,shipToObject,ignoreDAVResult);
	}
	/* End of DAV WebService setup */
	
	/* AVS Service setup */
	var ignoreAVSResult : Boolean = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags : String = CybersourceHelper.getAvsDeclineFlags();
	
	CybersourceHelper.addAVSRequestInfo(request,ignoreAVSResult,declineAVSFlags);
	/* End of AVS Service setup */
	writeOutDebugLog(request,orderNo);
	//**************************************************************************//
	// Execute Request
	//**************************************************************************//	
	var response = null;
	try
	{
		response = service.runTransaction(request);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in CCAuthRequestInfo request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            pdict.ReasonCode = 999; //set timeout error code 999
            return PIPELET_NEXT;
		}       
		
		return PIPELET_ERROR;
	}
	
	Logger.debug(response);
	
	
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in CCAuthRequestInfo: null response");
		return PIPELET_ERROR;
	}
		
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	pdict.Temp = protocolResponse( response );
	//pdict.Temp = getAvailableFunctions( service );
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	
	if ( null != response.ccAuthReply )
	{
		pdict.AuthorizationAmount = response.ccAuthReply.amount;
		pdict.AuthorizationCode = response.ccAuthReply.authorizationCode;
		//pdict.AuthorizationReasonCode = response.ccAuthReply.reasonCode.get();
		pdict.AuthorizationReasonCode = response.reasonCode.get();
	}
	if ( null != response.paySubscriptionCreateReply )
	{
		pdict.SubscriptionIDToken = response.paySubscriptionCreateReply.subscriptionID;
	}
	
	/**********************************************/
	/* DAV-related WebService response processing */
	/**********************************************/
	if( !empty(response.missingField) ) {
		pdict.MissingFieldsArray = response.missingField;
	}
	if( !empty(response.invalidField) ) {
		pdict.InvalidFieldsArray = response.invalidField;
	}	
	if(null != response.davReply){
		pdict.DAVReasonCode = response.davReply.reasonCode.get();
		
		if( !empty(response.davReply.standardizedAddress1) ) {
			var stdAddress : Object = new Object();
			stdAddress.firstName = pdict.shipTo.firstName;
			stdAddress.lastName = pdict.shipTo.lastName;
			stdAddress.address1 = response.davReply.standardizedAddress1;
			stdAddress.address2 = response.davReply.standardizedAddress2;
			stdAddress.city = response.davReply.standardizedCity;
			stdAddress.state = response.davReply.standardizedState;
			stdAddress.postalCode = response.davReply.standardizedPostalCode;
			stdAddress.country = response.davReply.standardizedCountry;
			pdict.StandardizedAddress = stdAddress;
		}
	}
	/* End of DAV response processing */
	
	//**************************************************************************//
	//Log response code specific data for further processing
	//**************************************************************************//
	var logTransactionData : String = " Order No = " +orderNo;
	logTransactionData += ", Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;
	 
	switch ( response.reasonCode.get() )
	{
		case 100:	
			Logger.info("[CCAuthRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction.");
			break;	
		case 101:	
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 101] [FATAL] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
			break;	
		case 102:								
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 102] [FATAL] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data. The could be due to coding error since all required fields should be first validated by the COSubmit pipeline.");
			break;	
		case 150:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 150] [FATAL] " + logTransactionData + " Error Message = Error: General system failure.");
			break;				
		case 151:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 151] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
			break;				
		case 152:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 152] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
			break;	
		case 234:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 234] [FATAL] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
			break;
		case 400:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 400] [WARN] " + logTransactionData + " Error Message = The fraud score exceeds your threshold. - Customer support to handle the order. ");
			break;
		case 480:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 480] [WARN] " + logTransactionData + " Error Message = The order is marked for review by Decision Manager. - ");
			break;						
		case 481:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 481] [WARN] " + logTransactionData + " Error Message = The order is rejected by Decision Manager. - Customer support to handle the order. ");
			break;			
		default:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code:" + response.reasonCode.get() +"] [WARN] " + logTransactionData + ", Error Message = Authorization Denied - ");
			break;
	}
	
    return PIPELET_NEXT;
}

function protocolResponse( response ) : HashMap
{
	var debug : Boolean = Site.getCurrent().getCustomPreferenceValue("CsDebugCybersource");
	if( true || debug )
	{
		var arr : HashMap = new HashMap();
		var xx : String;
		for ( xx in response )
		{
			arr.put( xx, response[xx] );
		}
		for ( xx in response.payPalPaymentReply )
		{
			trace( "checking " + xx );
			try
			{
				arr.put( "PayPalPaymentReply." + xx, response.payPalPaymentReply[xx] );
			}
			catch ( exception )
			{
				arr.put( "PayPalPaymentReply." + xx, " caused ex " + exception );
			}
		}
		
		var nullList : Array = new Array();
		var qq : String;
		var iter : Iterator;
		var retMap : HashMap = new HashMap();
		for ( iter = arr.keySet().iterator(); iter.hasNext(); )
		{
			qq = iter.next();
			if ( arr.get( qq ) == null )
			{
				nullList.push( qq );
				// arr.remove( qq );
			} 
			else
			{
				retMap.put( qq, arr.get( qq ) );
			}
		} 
		if ( qq.length > 0 )
		{
			retMap.put( "<<NullList>>", nullList ); 
		}
		return retMap;
	}
}

function writeOutDebugLog(request : Object, orderNo : String)
{
	// Do not allow debug logging on production.
	if (!dw.system.Logger.isDebugEnabled() || dw.system.System.getInstanceType() != dw.system.System.DEVELOPMENT_SYSTEM) return;

	var debug : Boolean = Site.getCurrent().getCustomPreferenceValue("CsDebugCybersource");
	if( debug )
	{
		var log : dw.system.Log = dw.system.Logger.getLogger("CsDebugCybersource");
		log.debug("REQUEST DATA SENT TO CYBERSOURCE");
		log.debug("billTo.firstName {0}", request.billTo.firstName);
		log.debug("billTo.lastName {0}", request.billTo.lastName);
		log.debug("billTo.street1 {0}", request.billTo.street1);
		log.debug("billTo.city {0}", request.billTo.city);
		log.debug("billTo.state {0}", request.billTo.state);
		log.debug("billTo.postalCode {0}", request.billTo.postalCode);
		log.debug("billTo.country {0}", request.billTo.country);
		log.debug("shipTo.firstName {0}", request.shipTo.firstName);
		log.debug("shipTo.lastName {0}", request.shipTo.lastName);
		log.debug("shipTo.street1 {0}", request.shipTo.street1);
		log.debug("shipTo.city {0}", request.shipTo.city);
		log.debug("shipTo.state {0}", request.shipTo.state);
		log.debug("shipTo.postalCode {0}", request.shipTo.postalCode);
		log.debug("shipTo.country {0}", request.shipTo.country);
		log.debug("Currency {0}", request.purchaseTotals.currency);
		log.debug("grandTotalAmount {0}", request.purchaseTotals.grandTotalAmount);
		//log.debug("taxAmount {0}", request.purchaseTotals.taxAmount);
		log.debug("card fullname {0}", request.card.fullName);
	}
}