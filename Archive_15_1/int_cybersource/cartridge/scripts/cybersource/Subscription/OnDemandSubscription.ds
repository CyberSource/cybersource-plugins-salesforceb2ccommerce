/**
*	OnDemandSubscription.ds
*	Perfroms the on demand subscription info service and returns the response.
*
*	@input 	subscriptionID : String
*	@input 	purchaseTotals : Object
* 	@input  billTo : Object 
* 	@input  shipTo : Object
*	@output amount : String
* 	@output authorizationCode : String
*	@output authorizedDateTime : String
*	@output processorResponse : String
*	@output reconciliationID : String
*	@output decision : String
* 	@output reasonCode : Object
* 	@output requestID : Object
* 	@output requestToken : Object
* 	@output invalidField : Array
* 	@output missingField : Array
* 	@output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* 	@output StandardizedAddress : Object Contains any 'corrections' made to the address from standards point of view
*
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

	var subscriptionID : String = pdict.subscriptionID;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	
    var CybersourceHelper = getCybersourceHelper();
	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();

	CybersourceHelper.addOnDemandSubscriptionInfo(subscriptionID, request, purchaseObject, "test");
	
	/********************************/
	/* DAV-related WebService setup */
	/********************************/	
	var enableDAV : String = CybersourceHelper.getDavEnable();
	var approveDAV : String = CybersourceHelper.getDavOnAddressVerificationFailure();
	
	if( enableDAV=='YES' ) {
		var ignoreDAVResult = false;
		if( approveDAV=='APPROVE' ) {
			ignoreDAVResult = true;
		}
		CybersourceHelper.addDAVRequestInfo(request,billToObject,shipToObject,ignoreDAVResult);
	}
	/* End of DAV WebService setup */
	
	/* AVS Service setup */
	var ignoreAVSResult : Boolean = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags : String = CybersourceHelper.getAvsDeclineFlags();
	
	CybersourceHelper.addAVSRequestInfo(request,ignoreAVSResult,declineAVSFlags);
	/* End of AVS Service setup */
		
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in subscription request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	else
	{
		if(null!=response.ccAuthReply)
		{
			pdict.amount = response.ccAuthReply.amount;
			pdict.authorizationCode = response.ccAuthReply.authorizationCode;
			pdict.authorizedDateTime = response.ccAuthReply.authorizedDateTime;
			pdict.processorResponse = response.ccAuthReply.processorResponse;
			pdict.reasonCode = response.ccAuthReply.reasonCode;
			pdict.reconciliationID = response.ccAuthReply.reconciliationID;
			pdict.decision = response.decision;
			pdict.requestID = response.requestID;
			pdict.requestToken = response.requestToken;
		}
		else
		{
			pdict.decision = response.decision;
			pdict.requestID = response.requestID;
			pdict.requestToken = response.requestToken;
			pdict.reasonCode = response.reasonCode;
			pdict.invalidField = response.invalidField;
			pdict.missingField = response.missingField;
		}
		
		/**********************************************/
		/* DAV-related WebService response processing */
		/**********************************************/
		if(null != response.davReply){
			pdict.DAVReasonCode = response.davReply.reasonCode.get();			
			if( !empty(response.davReply.standardizedAddress1) ) {
				var stdAddress : Object = new Object();
				stdAddress.firstName = pdict.shipTo.firstName;
				stdAddress.lastName = pdict.shipTo.lastName;
				stdAddress.address1 = response.davReply.standardizedAddress1;
				stdAddress.address2 = response.davReply.standardizedAddress2;
				stdAddress.city = response.davReply.standardizedCity;
				stdAddress.state = response.davReply.standardizedState;
				stdAddress.postalCode = response.davReply.standardizedPostalCode;
				stdAddress.country = response.davReply.standardizedCountry;
				pdict.StandardizedAddress = stdAddress;
			}
		}
		/* End of DAV response processing */
	}
	return PIPELET_NEXT;
}

