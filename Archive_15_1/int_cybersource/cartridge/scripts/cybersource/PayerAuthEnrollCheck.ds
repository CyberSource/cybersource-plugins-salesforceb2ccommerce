/**
* This script cheks if a customer is enrolled for a PayerAuth program
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @input Basket : dw.order.LineItemCtnr The basket used for Authorization
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input Request : dw.system.Request This is a sample comment.
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CommerceIndicator : String the commerce indicator to use credit card authorization 
* @output ProofXML : String The proof XML comfirming that a check for payer auth was done
* @output AcsURL : String - URL for the issuing Bank's authentication form
* @output PAReq : String The paReq field - Payer authentication request message that you send to the ACS through the card association
* @output XID : String The xid field - A unique transaction ID generated for each payment authentication request (PAReq) message. The PARes returned by issuing bank contains the XID of the PAReq.
* @output ProxyPAN : String The proxyPAN field - Encrypted versio of credit card number used in the payer authentication request message
*
*/
importPackage( dw.system );
importPackage( dw.order );

importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    var basket : LineItemCtnr = pdict.Basket;
    var amount : dw.value.Money = pdict.Amount;
    var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;
    var orderNo : String = pdict.OrderNo;
    var request : Request = pdict.Request;

	if((basket == null || creditCardForm == null )){
		Logger.error("Please provide a Basket and the credit card form element!");
		return PIPELET_ERROR;
	}
	
	var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());

	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addPayerAuthEnrollInfo(request,orderNo,creditCardForm,basket.billingAddress.countryCode.value,amount, request);

	var response = null;
	// send request
	try{
		Logger.debug("[PayerAuthEnrollCheck.ds] Sending PayerAuthEnrollCheck...");
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[PayerAuthEnrollCheck.ds] Error in PayerAuthEnrollCheck request ( {0} )",e.message);
		return false;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(response.payerAuthEnrollReply != null){
		pdict.CommerceIndicator = response.payerAuthEnrollReply.commerceIndicator;
		pdict.ProofXML = response.payerAuthEnrollReply.proofXML;
		pdict.AcsURL = response.payerAuthEnrollReply.acsURL;
		pdict.XID =  response.payerAuthEnrollReply.xid;
		pdict.PAReq = response.payerAuthEnrollReply.paReq;
		pdict.ProxyPAN = response.payerAuthEnrollReply.proxyPAN;
	}

    return PIPELET_NEXT;
}
