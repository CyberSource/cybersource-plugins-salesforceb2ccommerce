/**
* Demandware Script File - SAMerchantPostJob
* To update the array with passed input. 
*
*   @input COResult : dw.util.Iterator
*
*/


var Order = require('dw/order/Order');
var CardHelper = require('int_cybersource/cartridge/scripts/helper/CardHelper');
var secureAcceptanceHelper = require('int_cybersource/cartridge/scripts/helper/SecureAcceptanceHelper');
var PaymentInstrumentUtils = require('int_cybersource/cartridge/scripts/utils/PaymentInstrumentUtils');
var Logger = require('dw/system/Logger');
var CustomObjectMgr =require("dw/object/CustomObjectMgr");
var ArrayList = require('dw/util/ArrayList');
var OrderMgr = require('dw/order/OrderMgr');
var Resource = require('dw/web/Resource');
var Transaction = require('dw/system/Transaction');

function execute( args : PipelineDictionary ) : Number
{
	var coIterator : Iterator = args.COResult;
	    
		if (!empty(coIterator))
			{
				while (coIterator.hasNext())
				{
					var CO = coIterator.next();
					var orderID = CO.custom.OrderID;
					 var orders = OrderMgr.searchOrders('orderNo={0} AND status={1}', 'creationDate desc', orderID, dw.order.Order.ORDER_STATUS_CREATED);  
					 
					 try{
                     if(orders.count > 0){
                     	
                     	Transaction.wrap(function () {
                     	var order = orders.next();
						var paymentInstrument = CardHelper.getNonGCPaymemtInstument(order);
						 if(paymentInstrument == null){
						 	Logger.error('[SAmerchantPost.ds] Error occured for order:', orderID);
						 	return;
						 }
							var responseObject : Object = JSON.parse(CO.custom.postParams);
							if(responseObject == null){
							 	Logger.error('[SAmerchantPost.ds] Error occured for order:', orderID);
							 	return;
							 }
							else if(responseObject != null){
								
								var Decision = responseObject.Decision;							
								if(Decision == "ACCEPT" || Decision == "REVIEW"){
									if(null != order && null != responseObject){
										//add in try catch
										PaymentInstrumentUtils.UpdateOrderBillingShippingDetails(order,responseObject,false,false);
										PaymentInstrumentUtils.UpdatePaymentTransactionSecureAcceptanceAuthorize(order,responseObject);
										
										var cardToken = !empty(responseObject.SubscriptionID)?responseObject.SubscriptionID:responseObject.req_payment_token;
										PaymentInstrumentUtils.updatePaymentInstumenSACard(paymentInstrument, responseObject.req_card_expiry_date, responseObject.req_card_number, responseObject.req_card_type, cardToken, responseObject.req_bill_to_forename, responseObject.req_bill_to_surname);
										
										var customerObj	= order.getCustomer();
										secureAcceptanceHelper.AddOrUpdateToken(paymentInstrument, customerObj);
										if(Decision == "ACCEPT"){
										
											var orderStatus = OrderMgr.placeOrder(order);
											if(orderStatus.code == 'OK'){
												order.setExportStatus(Order.EXPORT_STATUS_READY);									
												order.setConfirmationStatus(Order.CONFIRMATION_STATUS_CONFIRMED);
												var MailFrom =  dw.system.Site.getCurrent().getCustomPreferenceValue('customerServiceEmail');
												var MailSubject =  dw.web.Resource.msg('order.orderconfirmation-email.001','order',null)+ " " + orderID;
												var MailTemplate =  "mail/orderconfirmation";
												var MailTo =  order.customerEmail;
													if(!empty(MailFrom) && !empty(MailSubject) && !empty(MailTemplate) && !empty(MailTo)){
														var Email = require('app_storefront_controllers/cartridge/scripts/models/EmailModel');
														 
														Email.sendMail({
													        template: 'mail/orderconfirmation',
													        recipient: order.getCustomerEmail(),
													        subject: Resource.msg('order.orderconfirmation-email.001', 'order', null),
													        context: {
													            Order: order
													        }
													    });
													}
										   			}else{
										   				Logger.error('[SAmerchantPost.ds] DECISION ACCEPT -  Placeorder Error for order:', orderID);
										   			}
										}									
									}
								}
								else{
									// if Decision is not ACCEPT 
									var orderStatus = OrderMgr.failOrder(order);									
									if(orderStatus.code =='ERROR'){											
										Logger.error('[SAmerchantPost.ds] DECISION REJECT -  FailOrder Called for order:', orderID);
										return;
									}
									if(Decision == "ERROR"  || Decision == "CANCEL"){
										PaymentInstrumentUtils.UpdatePaymentTransactionSecureAcceptanceAuthorize(order,responseObject);
										Logger.error('[SAmerchantPost.ds] DECISION ERROR -  FailOrder Called for order:', orderID);
									}	
								}
							}	
							
						});	
                     }
   					}catch(e){
   						Logger.error("[SAmerchantPost.ds] Error in Merchant post job request ( {0} )",e.message);
   					}
   					
   					Logger.info("[SAmerchantPost.ds] Order is deleted from custom Object for Order # ",orderID);
   					Transaction.wrap(function () {
   						CO.custom.processed = true;   
   					});              
				}
			}
			
   return PIPELET_NEXT;
}


		