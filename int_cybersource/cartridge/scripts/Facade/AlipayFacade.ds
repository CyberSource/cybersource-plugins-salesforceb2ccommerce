'use strict';
var Logger = dw.system.Logger.getLogger('Cybersource');
var dwsvc		= require ("dw/svc");
var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
var PurchaseTotals_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_PurchaseTotals_Object');

/**
*	This script call service to check payment status for alipay on basis of request id generated by Initiate payment service  
* 	and set the response in response object and also handles the logging of different error scenarios 
*	while making service call.
**/
function AlipayCheckPaymentStatusRequest(OrderNo : String,RequestID : String)
{
	//set the order object from pipeline dictionary
   	var orderNo : String = OrderNo;
   	//create service stubs
   	var CybersourceHelper = libCybersource.getCybersourceHelper();	
   	var csReference  = webreferences.CyberSourceTransaction;
   	
	//set alipay payment type to pass it as input in request
	var alipayPaymentType : String = CybersourceHelper.getAlipayPaymentType();
	var serviceRequest = new csReference.RequestMessage();
	//call alipay check status service by passing required input parameters
	CybersourceHelper.apCheckStatusService(serviceRequest,orderNo,RequestID,alipayPaymentType.value);
	
	var serviceResponse = null;
	//get the response in response object
	try
	{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[AlipayFacade.ds] Error in Execute request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            return {error:true, errorMsg:e.message};
		}       
		
		return {error:true, errorMsg:e.message};
	}
	
	//log the response in case of error scenario
	if(empty(serviceResponse) || serviceResponse.status != "OK")
	{
		Logger.getRootLogger().fatal("[AlipayFacade.ds] Error : null response");
		return {error:true, errorMsg:serviceResponse.status};
	}
		serviceResponse = serviceResponse.object;
		var alipayPaymentStatusResponse= {};
		//set response values in pipeline dictionary
		
		alipayPaymentStatusResponse["RequestID"] = serviceResponse.requestID;
		alipayPaymentStatusResponse["RequestToken"] = serviceResponse.requestToken;
		alipayPaymentStatusResponse["ReasonCode"] =  serviceResponse.reasonCode.get();
		alipayPaymentStatusResponse["Decision"] =  serviceResponse.decision;

	if(!empty(serviceResponse.apCheckStatusReply)) {
		alipayPaymentStatusResponse["ReconciliationID"] = serviceResponse.apCheckStatusReply.reconciliationID;
		alipayPaymentStatusResponse["apPaymentStatus"] = serviceResponse.apCheckStatusReply.paymentStatus;
		alipayPaymentStatusResponse["ProcessorTransactionID"] = serviceResponse.apCheckStatusReply.processorTransactionID;
	}
	//set the response values in a variable
	var logTransactionData : String = " Cybersource Request ID = " +serviceResponse.requestID;
		logTransactionData += ", Cybersource Request Token = " +serviceResponse.requestToken;
		logTransactionData += ", Cybersource Reason Code = " +serviceResponse.reasonCode.get();
		logTransactionData += ", Cybersource Decision = " +serviceResponse.decision;
		if(!empty(serviceResponse.apCheckStatusReply)) {
			logTransactionData += ", Cybersource Check Status Service Reconciliation ID = " +serviceResponse.apCheckStatusReply.reconciliationID;
			logTransactionData += ", Cybersource Check Status Service Payment Status = " +serviceResponse.apCheckStatusReply.paymentStatus;
		}
  
  	//log the response as per reason code generated by the request
   	switch(serviceResponse.reasonCode.get()){
    	case 100:
    		Logger.info("[APInitiateServiceRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction."); 
    		break;
    	case 101:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 101] [ERROR] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
    		break;
    	case 102: 
    	    Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 102] [ERROR] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data.");
    	    break;
    	case 150:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 150] [ERROR] " + logTransactionData + " Error Message = Error: General system failure.");
    		break;
    	case 233:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 233] [ERROR] " + logTransactionData + " Error Message = Error from Alipay. Alipay rejected this request because of invalid order request.");
    		break;
    }
    return {success:true, alipayPaymentStatusResponse:alipayPaymentStatusResponse};;
}

/**
* This script call service to initiate payment for Alipay and set the response in response object
* and also handles the logging of different error scenarios while making service call.
**/
function AlipayInitiatePaymentRequest(OrderNo : String,alipayReturnUrl : String,purchaseTotals : Object,productObject : Object)
{
	//set the order object, purchase object and return URL from pipeline dictionary
	var orderNo : String = OrderNo;
   	var purchaseObject = purchaseTotals;
   	var returnUrl = alipayReturnUrl.toString(); 
   	
   	//create service stubs
   	var CybersourceHelper = libCybersource.getCybersourceHelper();	
   	var csReference  = webreferences.CyberSourceTransaction;
   	
	//set alipay payment type to pass it as input in request
	var alipayPaymentType : String = CybersourceHelper.getAlipayPaymentType();
	var serviceRequest = new csReference.RequestMessage();
	
	//call alipay initiate service by passing required input parameters
	CybersourceHelper.apInitiateService(serviceRequest,returnUrl,purchaseObject,productObject.productName,productObject.productDescription,orderNo,alipayPaymentType.value);
	var serviceResponse = null;
	//get the response in response object
	try
	{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[AlipayFacade.ds] Error in Execute request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            return {error:true, errorMsg:e.message};
		}       
		
		return {error:true, errorMsg:e.message};
	}
	
	
	//log the response in case of error scenario
	if(empty(serviceResponse) || serviceResponse.status != "OK")
	{
		Logger.getRootLogger().fatal("[AlipayFacade.ds] Error : null response");
		return {error:true, errorMsg:serviceResponse.status};
	}

	serviceResponse = serviceResponse.object;
	//setting the payment type from request object
	var alipayPaymentResponse = {};
	alipayPaymentResponse["InitiatePaymentType"] = serviceRequest.apPaymentType;
	alipayPaymentResponse["RequestID"] = serviceResponse.requestID;
	alipayPaymentResponse["RequestToken"] = serviceResponse.requestToken;
	alipayPaymentResponse["ReasonCode"] = serviceResponse.reasonCode.get();
	alipayPaymentResponse["Decision"] =  serviceResponse.decision;
		
	if(!empty(serviceResponse.apInitiateReply)) {
		alipayPaymentResponse["ReconciliationID"] = serviceResponse.apInitiateReply.reconciliationID;
		alipayPaymentResponse["RedirectURL"] = serviceResponse.apInitiateReply.merchantURL;
	}
	//set the response values in a variable
	var logTransactionData : String = " Cybersource Request ID = " +serviceResponse.requestID;
	logTransactionData += ", Cybersource Request Token = " +serviceResponse.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +serviceResponse.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +serviceResponse.decision;
	logTransactionData += ", Cybersource Initiate Payment Service Reconciliation ID = " +serviceResponse.apInitiateReply.reconciliationID;
	logTransactionData += ", Cybersource Redirect URL = " +serviceResponse.apInitiateReply.merchantURL;
  
  	//log the response as per reason code generated by the request
   	switch(serviceResponse.reasonCode.get()){
    	case 100:
    		Logger.info("[APInitiateServiceRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction."); 
    		break;
    	case 101:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 101] [ERROR] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
    		break;
    	case 102: 
    	    Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 102] [ERROR] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data.");
    	    break;
    	case 150:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 150] [ERROR] " + logTransactionData + " Error Message = Error: General system failure.");
    		break;
    	case 233:
    		Logger.error("[APInitiateServiceRequest] [Cybersource Reson Code: 233] [ERROR] " + logTransactionData + " Error Message = Error from Alipay. Alipay rejected this request because of invalid order request.");
    		break;
    }
	 return {success:true, alipayInitiatePaymentResponse:alipayPaymentResponse};
}
module.exports = {
		AlipayInitiatePaymentRequest: AlipayInitiatePaymentRequest,
		AlipayCheckPaymentStatusRequest:AlipayCheckPaymentStatusRequest
	};