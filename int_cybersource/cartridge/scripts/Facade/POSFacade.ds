var Status = require('dw/system/Status');
var dwsvc = require ("dw/svc");
var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
var Logger = require('dw/system/Logger');

/**
 * Creatres the request input for POS authorization call and parses its response, sets them in map and returns to the calling method.
 * @param location : dw.order.LineItemCtnr
 * @param card : Object
 * @param purchaseTotal : Object
 * @param pos : Object
 * @param orderNo : String
 */


function POSAuthRequest(location:String,orderNo:String,card:Object,purchaseTotal:Object,pos:Object)
{
	var cardObject = card;
	var purchaseObject = purchaseTotal;
	var posObject = pos;


	//**************************************************************************//
	// Set WebReference & Stub
	//**************************************************************************//	
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	var csReference = webreferences.CyberSourceTransaction;

	//**************************************************************************//
	// the request object holds the input parameter for the AUTH request
	//**************************************************************************//	
	var serviceRequest = new csReference.RequestMessage();
	CybersourceHelper.addPOSAuthRequestInfo(serviceRequest, location, purchaseObject, cardObject, orderNo, CybersourceHelper.getDigitalFingerprintEnabled(), posObject);		


	//**************************************************************************//
	// Execute Request
	//**************************************************************************//	
	var serviceResponse = null;
	try
	{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.pos"); 
		var requestObj = {location:location,requestObj:serviceRequest};
		serviceResponse = service.call(requestObj);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[POSFacade.ds] Error in POSAuthRequest ( {0} )", e.message);
		return {error:true, errorMsg:e.message};
	}

	if(empty(serviceResponse) || serviceResponse.status != "OK")
	{
		Logger.getRootLogger().fatal("[POSFacade.ds] POSAuthRequest Error : null response");
		return {error:true, errorMsg:"empty or error in test POSAuthRequest response: "+serviceResponse};
	}
	serviceResponse = serviceResponse.object;	
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	
	var responseObject = {};
	responseObject["RequestID"] = serviceResponse.requestID;
	responseObject["RequestToken"] = serviceResponse.requestToken;
	responseObject["MerchantReferenceCode"] = serviceResponse.merchantReferenceCode;
	responseObject["ReasonCode"] = serviceResponse.reasonCode.get();
	responseObject["Decision"] = serviceResponse.decision;
	responseObject["purchaseTotals"] = (null !== serviceResponse.purchaseTotals) ? "exists" : null;
	if(null !== serviceResponse.purchaseTotals){
		responseObject["PurchaseTotalsCurrency"] = serviceResponse.purchaseTotals.currency;
	}
	responseObject["ccAuthReply"] = (null !== serviceResponse.ccAuthReply) ? "exists" : null;
	if(null !== serviceResponse.ccAuthReply){
		responseObject["AuthorizationAmount"] = serviceResponse.ccAuthReply.amount;
		responseObject["AuthorizationCode"] = serviceResponse.ccAuthReply.authorizationCode;
		responseObject["AuthorizationReasonCode"] = serviceResponse.ccAuthReply.reasonCode.get();
		responseObject["AVSCode"] = serviceResponse.ccAuthReply.avsCode;
		responseObject["AVSCodeRaw"] = serviceResponse.ccAuthReply.avsCodeRaw;
		responseObject["AuthReplyProcessorResponse"] = serviceResponse.ccAuthReply.processorResponse;
		responseObject["AuthReplyReconciliationID"] = serviceResponse.ccAuthReply.reconciliationID;
		responseObject["AuthReplyPaymentNetworkTransactionID"] = serviceResponse.ccAuthReply.paymentNetworkTransactionID;
		responseObject["AuthReplyCardCategory"] = serviceResponse.ccAuthReply.cardCategory;
		responseObject["AuthReplyCardGroup"] = serviceResponse.ccAuthReply.cardGroup;
	}
	responseObject["ccCaptureReply"] = (null !== serviceResponse.ccCaptureReply) ? "exists" : null;
	if(null !== serviceResponse.ccCaptureReply){
		responseObject["CaptureReplyAmount"] = serviceResponse.ccCaptureReply.amount;
		responseObject["CaptureReplyReasonCode"] = serviceResponse.ccCaptureReply.reasonCode.get();
		responseObject["CaptureReplyReconciliationID"] = serviceResponse.ccCaptureReply.reconciliationID;
	}
	
	if(!empty(serviceResponse.receiptNumber)){
		responseObject["ReceiptNumber"] = serviceResponse.receiptNumber;
	}
	
	if(!empty(serviceResponse.invalidField)){
		responseObject["InvalidField"] = serviceResponse.invalidField;
	}

	if(!empty(serviceResponse.missingField)){
		responseObject["MissingField"] = serviceResponse.missingField;
	}
	
	//**************************************************************************//
	//Log response code specific data for further processing
	//**************************************************************************//
	var logTransactionData : String = " Order No = " +orderNo;
	logTransactionData += ", Cybersource Request ID = " +serviceResponse.requestID;
	logTransactionData += ", Cybersource Request Token = " +serviceResponse.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +serviceResponse.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +serviceResponse.decision;
	var status;
	// below response codes will be updated after getting suitable response reason codes
	// for POS transaction
	switch ( serviceResponse.reasonCode.get() )
	{
		case 100:	
			Logger.info("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction.");
			status = new Status(Status.OK);
			return {success:true, POSStatus:status, serviceResponse:responseObject};
			break;	
		case 101:	
			Logger.getRootLogger().fatal("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 101] [FATAL] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_USERDENIED");
			break;	
		case 102:								
			Logger.getRootLogger().fatal("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 102] [FATAL] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data. The could be due to coding error since all required fields should be first validated by the COSubmit pipeline.");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_USERDENIED");
			break;
		case 150:
			Logger.getRootLogger().fatal("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 150] [FATAL] " + logTransactionData + " Error Message = Error: General system failure.");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;				
		case 151:
			Logger.getRootLogger().fatal("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 151] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;				
		case 152:
			Logger.getRootLogger().fatal("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 152] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;	
		case 234:
			Logger.getRootLogger().fatal("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 234] [FATAL] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;
		case 400:
			Logger.warn("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 400] [WARN] " + logTransactionData + " Error Message = The fraud score exceeds your threshold. - Customer support to handle the order. ");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;
		case 480:
			Logger.warn("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 480] [WARN] " + logTransactionData + " Error Message = The order is marked for review by Decision Manager. - ");
			status = new Status(Status.ERROR, "CREDITCARD_UNCONFIRMED");
			return {success:true, POSStatus:status, serviceResponse:responseObject};
			break;						
		case 481:
			Logger.warn("[POSFacade > PosAuthRequest] [Cybersource Reson Code: 481] [WARN] " + logTransactionData + " Error Message = The order is rejected by Decision Manager. - Customer support to handle the order. ");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_UNABLEPROCESS");
			break;			
		default:
			Logger.warn("[POSFacade > PosAuthRequest] [Cybersource Reson Code:" + response.reasonCode.get() +"] [WARN] " + logTransactionData + ", Error Message = Authorization Denied - ");
			status = new Status(Status.ERROR, "CREDITCARD_INVALID_AUTH");
			break;
	}
	
    return {error:true, POSStatus:status, serviceResponse:responseObject};
}

module.exports= {
		POSAuthRequest:POSAuthRequest
}