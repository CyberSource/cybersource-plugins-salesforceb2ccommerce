'use strict';
var Logger = dw.system.Logger.getLogger('Cybersource');
var StringUtils = require('dw/util/StringUtils');
var dwsvc		= require ("dw/svc");
var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');

/**
 * Capture all theinformation relate dto paypal payment method.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
function PaypalCaptureRequest(Order : dw.order.LineItemCtnr)
{
	//setting pipeline dictionary values in local variables
	var order = Order;
    if(order.getPaymentInstruments("PayPal").empty) {
    	return {error:true, errorMsg:'Not a PayPal order'};
    }

	//creating Cybersource helper object and setting the end point as "Test", "Staging", "Development" or "Production"
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	var csReference = webreferences.CyberSourceTransaction;
	
	//setting paypalAuthorizationRequestToken, paypalAuthorizationRequestId, transactionId, transactionType to pass it to capture service
	var paypalRequest = new csReference.RequestMessage();
	var paypalAuthorizationRequestToken=order.getPaymentInstruments("PayPal")[0].paymentTransaction.custom.requestToken;
	var paypalAuthorizationRequestId=order.getPaymentInstruments("PayPal")[0].paymentTransaction.custom.requestId;
	var transactionId :String =order.getPaymentInstruments("PayPal")[0].paymentTransaction.custom.paypalAuthTransactionID;
	var transactionType :String ="Complete";
	var completeType = dw.system.Site.getCurrent().getCustomPreferenceValue("CsPaypalCaptureCompleteType");
	if (!empty(completeType) && completeType.valueOf()=='NotComplete') {
		transactionType = 'NotComplete';
	}
	var refCode :String = order.orderNo;
	
	//setting purchase total
	var pt = order.getPaymentInstruments("PayPal")[0].paymentTransaction;
	paypalRequest.purchaseTotals = new CybersourceHelper.csReference.PurchaseTotals();
	paypalRequest.purchaseTotals.currency=pt.amount.currencyCode;
	paypalRequest.purchaseTotals.grandTotalAmount=StringUtils.formatNumber(pt.amount.value,"000000.00","en_US");
	
	//making capture service call
	CybersourceHelper.payPalCaptureService(paypalRequest, paypalAuthorizationRequestToken,paypalAuthorizationRequestId,transactionType,transactionId,refCode);

	var paypalResponse = null;
	//setting response in response object
	try{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		paypalResponse = service.call(paypalRequest);
		
	} catch(e) {
		Logger.error("[PayPalFacade.ds] Error in PaypalCaptureRequest ( {0} )",e.message);
		return {error:true, errorMsg:e.message};
	}

	if(empty(paypalResponse) || paypalResponse.status != "OK")
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in PaypalCaptureService: null response");
		return {error:true, errorMsg:e.message};
	}
		paypalResponse = paypalResponse.object;
		//setting response back into pipleine dictionary variables
		var paypalCaptureResponse = {};

			paypalCaptureResponse["RequestID"] = paypalResponse.requestID;
			paypalCaptureResponse["RequestToken"] = paypalResponse.requestToken	;
			paypalCaptureResponse["Decision"] = paypalResponse.decision;
			paypalCaptureResponse["ReasonCode"] = paypalResponse.reasonCode.get();
			
		if(!empty(paypalResponse.payPalDoCaptureReply)){
			
			paypalCaptureResponse["PaymentStatus"] = paypalResponse.payPalDoCaptureReply.paypalPaymentStatus;
			paypalCaptureResponse["ParentTransactionId"] =paypalResponse.payPalDoCaptureReply.parentTransactionId;
			paypalCaptureResponse["CaptureReasonCode"] = paypalResponse.payPalDoCaptureReply.reasonCode.get() ;
			paypalCaptureResponse["AuthorizationId"] = paypalResponse.payPalDoCaptureReply.authorizationId;
			paypalCaptureResponse["paypalReceiptId"] = paypalResponse.payPalDoCaptureReply.paypalReceiptId;
			paypalCaptureResponse["CaptureTransactionID"] = paypalResponse.payPalDoCaptureReply.transactionId;
			paypalCaptureResponse["CaptureFeeAmount"] = paypalResponse.payPalDoCaptureReply.paypalFeeAmount;
			paypalCaptureResponse["CaptureCorrelationID"] = paypalResponse.payPalDoCaptureReply.correlationID;
	  }
	
	//logging as per reason code
	var logTransactionData : String = " Cybersource Request ID = " +paypalResponse.requestID;
	logTransactionData += ", Cybersource Request Token = " +paypalResponse.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +paypalResponse.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +paypalResponse.decision;

	 switch(paypalResponse.reasonCode.get()){
    	case 100:
    		Logger.info("[PaypalCaptureRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction."); 
    		
    		break;
    	case 101:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 101] [ERROR] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
    		break;
    	case 102: 
    	    Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 102] [ERROR] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data.");
    	    break;
    	case 150:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 150] [ERROR] " + logTransactionData + " Error Message = Error: General system failure.");
    		break;
    	case 151:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 151] [ERROR] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
    		break;
    	case 152:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 152] [ERROR] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
    		break;
    	case 223:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 223] [ERROR] " + logTransactionData + " Error Message = Error from paypal. Paypal rejected this request because of invalid order request.");
    		break;
    	case 233:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 233] [ERROR] " + logTransactionData + " Error Message = Error from paypal. Paypal rejected this request because of invalid order request.");
    		break;
    	case 234:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 234] [ERROR] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
    		break;
    }
	   
	return {success:true, paypalCaptureResponse:paypalCaptureResponse};
}

module.exports = {
		PaypalCaptureRequest: PaypalCaptureRequest
}