'use strict';
var Logger = require('dw/system/Logger');
var dwsvc		= require ("dw/svc");
var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');

/**
 * Creates data for the capture service , calls the service and response is processed.
 * @param purchaseTotals :Object having amount and currency.
 * @param authorizationID : String
 */

function CreateCapture(purchaseTotals : Object,authorizationID : String)
{

    var purchaseObject = purchaseTotals;
    var authorizationID: String = authorizationID;
	
	
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	
	
	var csReference = webreferences.CyberSourceTransaction;

	var serviceRequest = new csReference.RequestMessage();

	CybersourceHelper.addCaptureService(serviceRequest, purchaseObject, "test", authorizationID);
	
	var serviceResponse = null;
	// send request
	try{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}catch(e){
		Logger.error("[ServiceFacade.ds] Error in CreateCapture request ( {0} )",e.message);
		return {error:true, errorMsg:e.message};
	}
	
	if(empty(serviceResponse) || serviceResponse.status != "OK"){
		return {error:true, errorMsg:"empty or error in CreateCapture response: "+serviceResponse};
	}
	serviceResponse = serviceResponse.object;

	var responseObject = {};
	responseObject["RequestID"] = serviceResponse.requestID;
	responseObject["RequestToken"] = serviceResponse.requestToken;
	responseObject["ReasonCode"] = serviceResponse.reasonCode.get();
	responseObject["Decision"] = serviceResponse.decision;
	responseObject["ccAuthReply"] = (null !== serviceResponse.ccAuthReply) ? "exists" : null;
	if(null !== serviceResponse.paySubscriptionCreateReply){
		responseObject["SubscriptionID"] = serviceResponse.paySubscriptionCreateReply.subscriptionID;
	}
	return {success:true, serviceResponse:responseObject};
}

/**
 * Data forvAuthorization is reversed by the cyb service , calls the service and response is processed.
 * @param purchaseTotals :Object having amount and currency.
 * @param authorizationID : String
 */
function CreateReversal(purchaseTotals : Object,authorizationID : String)
{

    var purchaseObject = purchaseTotals;
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	
	
	var csReference = webreferences.CyberSourceTransaction;
	var serviceRequest = new csReference.RequestMessage();

	CybersourceHelper.addReversalService(serviceRequest, purchaseObject, "test", authorizationID);
	
	var serviceResponse = null;
	// send request
	try{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}catch(e){
		Logger.getRootLogger().fatal("[ServiceFacade.ds] Error in CreateReversal ( {0} )",e.message);
		return {error:true, errorMsg:e.message};
	}
	
	if(empty(serviceResponse) || serviceResponse.status != "OK"){
		Logger.getRootLogger().fatal("[ServiceFacade.ds] CreateReversal Error : null response");
		return {error:true, errorMsg:"empty or error in test CreateReversal response: "+serviceResponse};
	}
	else
	{
		serviceResponse = serviceResponse.object;
		//set response values in local variables
		var responseObject = {};
		responseObject["RequestID"] = serviceResponse.requestID;
		responseObject["RequestToken"] = serviceResponse.requestToken;
		responseObject["ReasonCode"] = serviceResponse.reasonCode.get();
		responseObject["Decision"] = serviceResponse.decision;
		responseObject["invalidField"] = serviceResponse.invalidField;
		responseObject["missingField"] = serviceResponse.missingField;
		responseObject["ReversalAmount"] = purchaseObject.amount;
		responseObject["paySubscriptionCreateReply"] = (null !== serviceResponse.paySubscriptionCreateReply) ? "exists" : null;
		if(null !== serviceResponse.paySubscriptionCreateReply){
			responseObject["SubscriptionIDToken"] = serviceResponse.paySubscriptionCreateReply.subscriptionID;
		}
		return {success:true, serviceResponse:responseObject};
	}
}

module.exports = {
		CreateReversal : CreateReversal,
		CreateCapture : CreateCapture
}
