/**
* Performs the validation of the addresses of a given basket.
*
* @input Basket : dw.order.Basket The basket whose address should be validated
* @input  billTo : Object
* @input  shipTo : Object
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
*
* Author: Don Rivard
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );

importScript('int_cybersource:cybersource/libCybersource.ds');
importScript('int_cybersource:cybersource/Cybersource_BillTo_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_ShipTo_Object.ds');


function execute( pdict : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    var basket : Basket = pdict.Basket;

	if( basket == null ){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}

	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	
	var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");

	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		pdict.ReasonCode = 0;
		return PIPELET_ERROR;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addDAVRequestInfo(request,billToObject,shipToObject,false,"shippingDAV");

	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource2.ds] Error in DAV request ( {0} )",e.message);
		pdict.ReasonCode = 0;
		return PIPELET_ERROR;
	}
	
	if(response == null){
		pdict.ReasonCode = 0;
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(null != response.davReply){
		pdict.DAVReasonCode = response.davReply.reasonCode.get();
	}
	
	 if( response.decision=="REJECT" ) {
		var missingFields = "";
		var invalidFields = "";
		if( null!=response.missingField ) {
			for(var i : Number = 0; i < response.missingField.length; i++){
				missingFields += response.missingField[i];
			}
		}
		if( null!=response.invalidField ) {
			for(var i : Number = 0; i < response.invalidField.length; i++){
				invalidFields += response.invalidField[i];
			}
		}
		Logger.error("[libCybersource.ds] Request REJECTED (ReasonCode {0} ). \nRequestToken: {1} \nMissing Fields: {2} \nInvalid Fields: {3}",response.reasonCode,response.requestToken,missingFields,invalidFields);
	 }
		
		
    return PIPELET_NEXT;
}
