/**
*  Test transaction to simulate different shipment options.
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value );

importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_ShipFrom_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_TaxRequest_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	var reasonCode : Number;
	var order : dw.order.Order = OrderMgr.getOrder("00000415");   

	var orderfound : Boolean = false;
	if (order != null) {
		orderfound = true;	
	}

	var totalTaxAmount : String = "";
	var billToObject: BillTo_Object = new BillTo_Object();
	var billingAddress : OrderAddress = order.billingAddress;

			billToObject.setFirstName  ( billingAddress.firstName );
			billToObject.setLastName   ( billingAddress.lastName );
			billToObject.setStreet1    ( billingAddress.address1 );
			billToObject.setStreet2    ( billingAddress.address2 );
			billToObject.setCity       ( billingAddress.city );
			billToObject.setState      ( billingAddress.stateCode );
			billToObject.setPostalCode ( billingAddress.postalCode );
			billToObject.setCountry    ( billingAddress.countryCode );
			billToObject.setPhoneNumber( billingAddress.phone );
			billToObject.setEmail      ( order.customerEmail );
			
	
		var cardObject : Card_Object = new Card_Object();
	var cardType : String = "";
		var l : List = order.getPaymentInstruments( dw.order.PaymentInstrument.METHOD_CREDIT_CARD );
		if( !empty(order) && !empty(l) && l.length>0 ) {
			if ( l.length != 1 )
			{
				throw "Expected exactly one credit card.  Found " + l.length + " cards!?";
			}
			var paymentInst : PaymentInstrument = l[0];
			cardObject.setAccountNumber  ( paymentInst.getCreditCardNumber() );
			cardObject.setFullName       ( paymentInst.getCreditCardHolder() );
			cardObject.setExpirationMonth( paymentInst.getCreditCardExpirationMonth() );
			cardObject.setExpirationYear ( paymentInst.getCreditCardExpirationYear() );
			//cardObject.setCvNumber       ( pdict.CvNumber );
			
			cardType = paymentInst.getCreditCardType();
		}
		switch( cardType )
	{
		case "Visa": 
			cardType="001";
			break;
		case "Master": 
			cardType="002";
			break;
		case "Amex": 
			cardType="003";
			break;
		case "Discover": 
			cardType="004";
			break;
		// Diners Club
		// JCB
		// Maestro (UK Domestic) and Solo 
	}

	cardObject.setCardType(cardType);
	
	var purchaseObject : PurchaseTotals_Object = new PurchaseTotals_Object();
	var amount : Money = order.totalGrossPrice;
	purchaseObject.setCurrency(order.getCurrencyCode());

	var it : Iterator = order.getShipments().iterator();
	while(it.hasNext()){
			var shipToObject: ShipTo_Object = new ShipTo_Object();
			var shipment : Shipment = it.next();
			var shippingAddress = shipment.getShippingAddress();
			var shippingMethod : ShippingMethod = shipment.getShippingMethod();
	
			    shipToObject.setFirstName(shippingAddress.firstName);
				shipToObject.setLastName(shippingAddress.lastName);
				shipToObject.setStreet1(shippingAddress.address1);
				shipToObject.setStreet2(shippingAddress.address2);
				shipToObject.setCity(shippingAddress.city);
				shipToObject.setState(shippingAddress.stateCode);
				shipToObject.setPostalCode(shippingAddress.postalCode);
				shipToObject.setCountry(shippingAddress.countryCode);
				shipToObject.setPhoneNumber(shippingAddress.phone);
				shipToObject.setEmail(order.customerEmail);
				
				if( !empty(shippingMethod) ) {
					shipToObject.setShippingMethod(shippingMethod.displayName);
				} else {
					shipToObject.setShippingMethod("N/A");
				}
				
			
			var shippingMethodTaxCode = null;
			if( !empty(shippingMethod) ) {
				shippingMethodTaxCode = shippingMethod.taxClassID;
			}
			
			
			var CybersourceHelper = getCybersourceHelper();
			
			var lineItems : Iterator = shipment.allLineItems.iterator();
			var items : Array = new Array();
			var itemMap : dw.util.HashMap = new HashMap();
			var idcount : Number = 0;
			
			while( lineItems.hasNext() ) {
				var actualQuantity : Number = 0;
				var lineItem : ProductLineItem = lineItems.next();
				var item = new CybersourceHelper.csReference.Item();
				
		 		if( lineItem instanceof dw.order.ProductLineItem ) {
					itemMap.put(idcount.toString(), lineItem);
		 			
		 			actualQuantity = lineItem.quantity.value;
		 			
		 			// Switched to using prorated price which eliminates the need for applying order level discounts
	
					adjustedLineItemFinalPrice = lineItem.proratedPrice; 

			
		 			item.unitPrice = StringUtils.formatNumber(Math.abs(adjustedLineItemFinalPrice.getValue()),"#####0.00","en_US");
					item.quantity = lineItem.quantity.value;
					
					item.productName = lineItem.productName;
					item.productSKU = lineItem.productID;
					item.productCode = lineItem.taxClassID || lineItem.getProduct().taxClassID || CybersourceHelper.getDefaultProductTaxCode();
					
					item.id = idcount++;
					items.push(item);
				} else if( lineItem instanceof dw.order.ShippingLineItem ) {
					itemMap.put(idcount.toString(), lineItem);
					item.quantity		= 1;
					item.productName	= lineItem.lineItemText;
					item.productSKU		= lineItem.ID;
					item.productCode	= lineItem.taxClassID || shippingMethodTaxCode || CybersourceHelper.getDefaultShippingMethodTaxCode();
					item.id = idcount++;
		
					var shipPriceAdjustTotal = 0;
					var shipPriceTotal = 0;
					var basketShippingPriceAdjustments : Iterator = shipment.getShippingPriceAdjustments().iterator();
		    		while( basketShippingPriceAdjustments.hasNext() ) {
						var lineItem : PriceAdjustment = basketShippingPriceAdjustments.next();
						var shipPriceAdjust = lineItem.getPrice();
		
						if( shipPriceAdjust != null ) {
						    shipPriceAdjustTotal += shipPriceAdjust.getValue();
						}
					}
					
					if( empty(shipPriceAdjustTotal) || shipPriceAdjustTotal==0 ) {
					   shipPriceAdjustTotal = lineItem.basePrice.value;
					}
						
					item.unitPrice = StringUtils.formatNumber(Math.abs(shipment.getAdjustedShippingTotalNetPrice()), '#####0.00', 'en_US');
					items.push(item); 
				} else {
					item.productName = lineItem.lineItemText;
					item.productSKU = "PriceAdjustment";
					item.productCode = lineItem.taxClassID || CybersourceHelper.getDefaultCouponTaxCode();
					lineItem.setTax(new dw.value.Money(new Number(0),order.currencyCode));
					lineItem.setGrossPrice(lineItem.netPrice.add(new dw.value.Money(new Number(0),order.currencyCode)));
				}				
			}
			
			// besides shipment line items, we need to calculate tax for possible order-level price adjustments
			// this includes order-level shipping price adjustments
			if( !order.getPriceAdjustments().empty || !order.getShippingPriceAdjustments().empty ) {
				var basketPriceAdjustments : Iterator = order.getPriceAdjustments().iterator();
				while( basketPriceAdjustments.hasNext() ) {
					var lineItem : PriceAdjustment = basketPriceAdjustments.next();
					itemMap.put(idcount.toString(), lineItem);
		
					var item = new CybersourceHelper.csReference.Item();
					item.unitPrice = StringUtils.formatNumber(Math.abs(lineItem.basePrice.value),"#####0.00","en_US"); 
					item.quantity = 1;
					item.productCode = "";
					item.productName = lineItem.lineItemText;
					item.productSKU = "PriceAdjustment";
				}
		
				var basketShippingPriceAdjustments : Iterator = order.getShippingPriceAdjustments().iterator();
				while( basketShippingPriceAdjustments.hasNext() ) {
					var lineItem : PriceAdjustment = basketShippingPriceAdjustments.next();
					itemMap.put(idcount.toString(), lineItem);
					var item = new csReference.Item();
					item.unitPrice = StringUtils.formatNumber(Math.abs(lineItem.basePrice.value),"#####0.00","en_US");
					item.quantity = 1;
					item.productCode = "";
					item.productName = lineItem.lineItemText;
					item.productSKU = "PriceAdjustment";
				}
		    }
			
			
			var shipFrom : ShipFrom_Object = new ShipFrom_Object();
		
			shipFrom.setCity(Site.getCurrent().getCustomPreferenceValue("CsShipFromCity"));
		    shipFrom.setState(Site.getCurrent().getCustomPreferenceValue("CsShipFromStateCode"));
		    shipFrom.setPostalCode(Site.getCurrent().getCustomPreferenceValue("CsShipFromZipCode"));
		    shipFrom.setCountry(Site.getCurrent().getCustomPreferenceValue("CsShipFromCountryCode"));
		    
			var taxService : TaxService_Object = new TaxService_Object();
			
			taxService.setOrderAcceptanceCity(CybersourceHelper.getPOACity());
		    taxService.setOrderAcceptanceState(CybersourceHelper.getPOAStateCode());
		    taxService.setOrderAcceptancePostalCode(CybersourceHelper.getPOAZipCode());
		    taxService.setOrderAcceptanceCountry(CybersourceHelper.getPOACountryCode());
		    
		    taxService.setOrderOriginCity(CybersourceHelper.getPOOCity());
		    taxService.setOrderOriginState(CybersourceHelper.getPOOStateCode());
		    taxService.setOrderOriginPostalCode(CybersourceHelper.getPOOZipCode());
		    taxService.setOrderOriginCountry(CybersourceHelper.getPOOCountryCode());
			
			var csReference : WebReference = webreferences.CyberSourceTransaction;
			var taxationService : Stub = csReference.getService("TransactionProcessor", "portXML");
			
			var CybersourceHelper = getCybersourceHelper();
			
			CybersourceHelper.setEndpoint(taxationService);
			
			if(!CybersourceHelper.createHeader(taxationService)){
				return PIPELET_ERROR;
			}
			var request = new csReference.RequestMessage();
			
			CybersourceHelper.addTaxRequest(request,billToObject,shipToObject,purchaseObject,cardObject,shipFrom,taxService,items,order.currentOrderNo + "-"+shipment.shipmentNo);
			var taxationResponse = null;
			// send request
			try{
				taxationResponse = taxationService.runTransaction(request);
			}catch(e){
				Logger.error("[libCybersource2.ds] Error in taxation request ( {0} )",e.message);
				return PIPELET_ERROR;
			}
			
			if(taxationResponse == null){
				return PIPELET_ERROR;
			}
		
			// in case of success update basket
			if(taxationResponse.decision == "ACCEPT"){
				var resItem;
				for each(resItem in taxationResponse.taxReply.item){
					var lineItem : ProductLineItem = itemMap.get(resItem.id.toString());
					var itemTax : dw.value.Money = new dw.value.Money(new Number((lineItem.class.name == 'dw.order.PriceAdjustment'?"-":"")+resItem.totalTaxAmount),order.currencyCode);
					lineItem.setTax(itemTax);
					lineItem.setGrossPrice(lineItem.netPrice.add(itemTax));
				}
				totalTaxAmount = taxationResponse.taxReply.totalTaxAmount;
				order.updateTotals();
				
				reasonCode = taxationResponse.reasonCode;
			}else if(taxationResponse.decision == "REJECT"){
				var missingFields = "";
				var invalidFields = "";
				if(null != taxationResponse.missingField){
					for(var i : Number = 0; i < taxationResponse.missingField.length; i++){
						missingFields += taxationResponse.missingField[i];
					}
				}
				if(null != taxationResponse.invalidField){
					for(var i : Number = 0; i < taxationResponse.invalidField.length; i++){
						invalidFields += taxationResponse.invalidField[i];
					}
				}
				Logger.error("[libCybersource.ds] Taxation request REJECTED (ReasonCode {0} ). \nRequestToken: {1} \nMissing Fields: {2} \nInvalid Fields: {3}",taxationResponse.reasonCode,taxationResponse.requestToken,missingFields,invalidFields);
				reasonCode = taxationResponse.reasonCode;
			}else if(taxationResponse.decision == "ERROR"){
				Logger.error("[libCybersource.ds] Taxation request ERROR (ReasonCode {0} ). \nRequestToken: {1}",taxationResponse.reasonCode,taxationResponse.requestToken);
		reasonCode = taxationResponse.reasonCode;
	}

	}
    if(reasonCode == 100){
		return PIPELET_NEXT;
	}else{
		return PIPELET_ERROR;
	}
	
}
