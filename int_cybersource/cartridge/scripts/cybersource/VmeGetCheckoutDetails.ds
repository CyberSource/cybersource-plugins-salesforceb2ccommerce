/**
* VmeGetCheckoutDetails.ds
* Performs the get checkout details of the Visa VMe.
*
* @input  apObject : Object
* @input Basket : dw.order.LineItemCtnr	
* @input  purchaseTotals : Object
* @output CheckoutDetailObject : Object Checkout Detail Object containing response recieved via API call
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
*
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_AP_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('int_visa_VME:DataObject/CheckoutDetailObject.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	var CybersourceHelper = getCybersourceHelper();
	var purchaseObject : PurchaseTotals_Object = pdict.purchaseTotals;
	var apObject : AP_Object = pdict.apObject;
	var checkoutDetailObject : CheckoutDetail_Object = new CheckoutDetail_Object();
	var basket : LineItemCtnr = pdict.Basket;
	//**************************************************************************//
	// Check if Basket exists
	//**************************************************************************//
	if(basket == null){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addAPCheckoutDetailsRequestInfo(request, purchaseObject, apObject, basket.UUID);
	
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
			Logger.error("[libCybersource.ds] Error in Checkout Details Request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	
	pdict.ReasonCode = response.reasonCode.get();
	
	if(null != response.apReply){
		checkoutDetailObject.setAdditionalAmount(response.apReply.additionalAmount);
		checkoutDetailObject.setPurchaseAmount(response.apReply.totalPurchaseAmount);
		checkoutDetailObject.setTaxAmount(response.apReply.taxAmount);
		checkoutDetailObject.setSubtotalAmount(response.apReply.subtotalAmount);
		checkoutDetailObject.setShippingHandlingAmount(response.apReply.shippingHandlingAmount);
		checkoutDetailObject.setShippingAmount(response.apReply.shippingAmount);
		checkoutDetailObject.setPurchaseID(response.apReply.purchaseID);
		checkoutDetailObject.setProductID(response.apReply.productID);
		checkoutDetailObject.setProductDescription(response.apReply.productDescription);
		checkoutDetailObject.setOrderID(response.apReply.orderID);
		checkoutDetailObject.setHandlingAmount(response.apReply.handlingAmount);
		checkoutDetailObject.setGiftWrapAmt(response.apReply.giftWrapAmount);
		checkoutDetailObject.setDiscountAmt(response.apReply.discountAmount);
	}
	
	if(null != response.shipTo) {
		checkoutDetailObject.setStreet1(response.shipTo.street1);
		checkoutDetailObject.setStreet2(response.shipTo.street2);
		checkoutDetailObject.setPostalCode(response.shipTo.postalCode);
		checkoutDetailObject.setName(response.shipTo.name);
		checkoutDetailObject.setCountry(response.shipTo.country);
		checkoutDetailObject.setCity(response.shipTo.city);
		checkoutDetailObject.setState(response.shipTo.state);
		checkoutDetailObject.setPhone(response.shipTo.phoneNumber);
	}
	if(null != response.billTo) {
		checkoutDetailObject.setEmail(response.billTo.email);
	}
	pdict.CheckoutDetailObject = checkoutDetailObject;
	


    return PIPELET_NEXT;
}

