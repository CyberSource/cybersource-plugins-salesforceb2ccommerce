/**
* VmeAuth.ds
* Performs the authorization of the Visa VMe.
*
* @input apObject : Object
* @input purchaseTotals : Object
* @input Basket : dw.order.LineItemCtnr
* @input OrderNo : String The order no
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AVSCodeRaw : String
* @output TransactionID : String transactio id
* @output FirstName : String Customer First Name
* @output LastName : String Customer Last Name
* @output PhoneNumber : String customer Phone Number
* @output RiskIndicator : String
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_AP_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	
	var CybersourceHelper = getCybersourceHelper();
	var basket : LineItemCtnr = pdict.Basket;
	//**************************************************************************//
	// Check if Basket exists
	//**************************************************************************//
	if(basket == null){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}
	var apObject : AP_Object = pdict.apObject;
	var orderNo : String = pdict.OrderNo;
	var purchaseObject : PurchaseTotals_Object = pdict.purchaseTotals;	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addAPAuthRequestInfo(request, purchaseObject, apObject, orderNo);
	
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in Vme Auth Request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	pdict.RiskIndicator = "UNAVAILABLE";
	if(null != response.apAuthReply) {				
		pdict.TransactionID = response.apAuthReply.transactionID;
	}
	
	if(null != response.apReply){		
		pdict.AVSCodeRaw = response.apReply.avsCodeRaw;
		if(!empty(response.apReply.riskIndicator)){
			pdict.RiskIndicator = response.apReply.riskIndicator;
		}		
	}	
	if(null != response.billTo) {
		var Name = response.billTo.name != null ? response.billTo.name : "";
		
		if(!empty(Name)) {
			var name : String  = Name.replace(/\u0020+/g, "/").split("/");	
			var lastName = "";
			var firstName = "";
			for (var count=0; count<name.length; count++) {
				if(count == 0) {
					firstName = name[count];				
				} if(count == 2) {
					firstName+= " " + name[count-1];
					lastName= name[count];					
				} if(count == 1 ) {
					lastName= name[count];
				}if(count > 2 ) {					
					lastName+= " " + name[count];
				}
			}
			pdict.FirstName = firstName;
			pdict.LastName = lastName;		
		} else {
			pdict.FirstName = Site.getCurrent().getCustomPreferenceValue("VmeDefaultFirstName");
			pdict.LastName = Site.getCurrent().getCustomPreferenceValue("VmeDefaultLastName");
		}
		
		pdict.PhoneNumber = response.billTo.phoneNumber != null ? response.billTo.phoneNumber : ""; 	 
	} else {
		pdict.FirstName = Site.getCurrent().getCustomPreferenceValue("VmeDefaultFirstName");
		pdict.LastName = Site.getCurrent().getCustomPreferenceValue("VmeDefaultLastName");
	}


    return PIPELET_NEXT;
}

