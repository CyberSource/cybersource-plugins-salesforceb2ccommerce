/**
*	PaypalCaptureRequest.ds
* 	This will initiate the paypal Capture request for Order.
*
*	@input Order : dw.order.LineItemCtnr
*
*	@output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* 	@output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* 	@output RequestID : String The request id generated by Cybersource
* 	@output RequestToken : String the token generated by Cybersource
* 	@output CaptureReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* 	@output CaptureAmount : String the amount authorized by Cybersource
*   @output PaymentStatus : String
*   @output AuthorizationId : String
*   @output ParentTransactionId : String
*   @output paypalReceiptId : String
*   @output paypalFeeAmount : String
*   @output paypalCorrelationId : String
*   @output CaptureTransactionID: String
*   @output Response : Object
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);
importScript('cybersource/libCybersource.ds'); 
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
function execute( pdict : PipelineDictionary ) : Number
{
	//setting pipeline dictionary values in local variables
	var order : Order = pdict.Order;
    if(order.getPaymentInstruments("PayPal").empty)
		return PIPELET_ERROR;

	//creating Cybersource helper object and setting the end point as "Test", "Staging", "Development" or "Production"
	var CybersourceHelper = getCybersourceHelper();
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	CybersourceHelper.setEndpoint(service);
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}
	
	//setting paypalAuthorizationRequestToken, paypalAuthorizationRequestId, transactionId, transactionType to pass it to capture service
	var request = new csReference.RequestMessage();
	var paypalAuthorizationRequestToken=order.getPaymentInstruments("PayPal")[0].paymentTransaction.custom.requestToken;
	var paypalAuthorizationRequestId=order.getPaymentInstruments("PayPal")[0].paymentTransaction.custom.requestId;
	var transactionId :String =order.getPaymentInstruments("PayPal")[0].paymentTransaction.custom.paypalAuthTransactionID;
	var transactionType :String ="NotComplete";
	var refCode :String = order.orderNo;
	
	//setting purchase total
	var pt : PaymentTransaction = order.getPaymentInstruments("PayPal")[0].paymentTransaction;
	request.purchaseTotals = new CybersourceHelper.csReference.PurchaseTotals();
	request.purchaseTotals.currency=pt.amount.currencyCode;
	request.purchaseTotals.grandTotalAmount=StringUtils.formatNumber(pt.amount.value,"000000.00","en_US");
	
	//making capture service call
	CybersourceHelper.payPalCaptureService(request, paypalAuthorizationRequestToken,paypalAuthorizationRequestId,transactionType,transactionId,refCode);

	var response = null;
	//setting response in response object
	try{
		
		response = service.runTransaction(request);
		
	} catch(e) {
		
		Logger.error("[PaypalCaptureRequest.ds] Error in Execute request ( {0} )",e.message);
		if(e.message.indexOf("SocketTimeoutException") != -1){
            pdict.ReasonCode = 999; //set timeout error code 999
            return PIPELET_NEXT;
		
		}       
		return PIPELET_ERROR;
	}
	//logging response object as a result of service call
	Logger.debug(response);
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in PaypalCaptureService: null response");
		return PIPELET_ERROR;
	}
	
	//setting response back into pipleine dictionary variables
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	pdict.Response=response;
	if(!empty(response.payPalDoCaptureReply)){
		pdict.CaptureAmount = response.payPalDoCaptureReply.amount;
		pdict.CaptureReasonCode = response.payPalDoCaptureReply.reasonCode.get();
		pdict.PaymentStatus = response.payPalDoCaptureReply.paypalPaymentStatus;
		pdict.ParentTransactionId = response.payPalDoCaptureReply.parentTransactionId;
		pdict.AuthorizationId = response.payPalDoCaptureReply.authorizationId;
		pdict.paypalReceiptId = response.payPalDoCaptureReply.paypalReceiptId;
		pdict.CaptureTransactionID = response.payPalDoCaptureReply.transactionId;
		pdict.paypalFeeAmount = response.payPalDoCaptureReply.paypalFeeAmount;
		pdict.paypalCorrelationId = response.payPalDoCaptureReply.correlationID;
	}
	
	//logging as per reason code
	var logTransactionData : String = " Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;

	 switch(response.reasonCode.get()){
    	case 100:
    		Logger.info("[PaypalCaptureRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction."); 
    		
    		break;
    	case 101:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 101] [ERROR] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
    		break;
    	case 102: 
    	    Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 102] [ERROR] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data.");
    	    break;
    	case 150:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 150] [ERROR] " + logTransactionData + " Error Message = Error: General system failure.");
    		break;
    	case 151:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 151] [ERROR] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
    		break;
    	case 152:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 152] [ERROR] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
    		break;
    	case 223:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 223] [ERROR] " + logTransactionData + " Error Message = Error from paypal. Paypal rejected this request because of invalid order request.");
    		break;
    	case 233:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 233] [ERROR] " + logTransactionData + " Error Message = Error from paypal. Paypal rejected this request because of invalid order request.");
    		break;
    	case 234:
    		Logger.error("[PaypalCaptureRequest] [Cybersource Reson Code: 234] [ERROR] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
    		break;
    }
	   
   return PIPELET_NEXT;
}
