/**
* 	PaypalOrderSetupEcRequest.ds
* 	Initiate the order setup request at Cybersource, return the transactionID will be used in authorization request.
*
* 	@input Order : dw.order.Order
* 	@output orderSetupRequestId : String
* 	@output orderSetupRequestToken : String
* 	@output orderSetupTransactionId :String
* 	@output orderSetupReplyReasonCode : Number
* 	@output orderSetupReplyDecision :String
* 	@output orderSetupTransactionType :String
* 	@output orderSetupCorrelationID :String
* 	@output orderSetupPendingReason :String
* 	@output orderSetupPaymentStatus :String
* 	@output ReasonCode :Number  The global reason code returned by Cybersource (100 = Success)
*/
importPackage( dw.system );
importPackage( dw.util);
importPackage( dw.order);
importPackage( dw.value);
importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
function execute( pdict : PipelineDictionary ) : Number
{

	//setting pipeline dictionary values in local variables
   	var order : Order = pdict.Order;
   	
   	//getting payment instrument to set amount and currency in purchase object
   	var paymentInstruments : Collection = order.getPaymentInstruments();
    var purchaseObject : PurchaseTotals_Object = new PurchaseTotals_Object();
    var amount : Money = new Money(0,order.currencyCode);
    for each (var pi : PaymentInstrument in paymentInstruments) {
    	if(!pi.paymentMethod.equals("GIFT_CERTIFICATE"))
	    	{
	    		amount = amount.add(pi.paymentTransaction.amount);
	    	}
    }    
   	var iter : Iterator = paymentInstruments.iterator();
   	var orderPI : OrderPaymentInstrument = null;
   	while( iter.hasNext() )
	{
		var pi = iter.next();
		if(pi.getPaymentMethod().equals("PayPal")){
		  orderPI=pi;
		}
	}
	
	//setting amount and currency in purchase object
	purchaseObject.setCurrency(amount.currencyCode);
	purchaseObject.setGrandTotalAmount(StringUtils.formatNumber(amount.value,"000000.00","en_US"));
	
	//setting paypalToken, setRequestToken, payerId, setRequestId to pass it to order setup service
	var paymentTransaction=orderPI.getPaymentTransaction();
	var paypalToken = paymentTransaction.custom.paypalToken;
	var setRequestToken =	paymentTransaction.custom.paypalEcSetRequestToken;
	var payerId = paymentTransaction.custom.payPalPayerId;
	var setRequestId =	paymentTransaction.custom.paypalEcSetRequestID;
	
	//creating Cybersource helper object and setting the end point as "Test", "Staging", "Development" or "Production"
 	var CybersourceHelper = getCybersourceHelper();	
    var csReference : WebReference = webreferences.CyberSourceTransaction;
    var service : Stub = csReference.getService("TransactionProcessor", "portXML");
    service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
   	CybersourceHelper.setEndpoint(service);

	if(!CybersourceHelper.createHeader(service))
	{
		return PIPELET_ERROR;
	}
	
	//create request object and call paypal order setup service
	var request = new csReference.RequestMessage();
	CybersourceHelper.payPalEcOrderSetupService(request,purchaseObject,paypalToken,setRequestId,setRequestToken,payerId,order.getCustomerEmail(),order.orderNo);
	//setting response in response object
	var response = null;
	try
	{
		response = service.runTransaction(request);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[PaypalOrderSetupEcRequest.ds] Error in Execute request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            pdict.ReasonCode = 999; //set timeout error code 999
            return PIPELET_NEXT;
		}       
		
		return PIPELET_ERROR;
	}
	
	//logging response object as a result of service call
	Logger.debug(response);
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in payPalEcOrderSetupService: null response");
		return PIPELET_ERROR;
	}
	
	//setting response back into pipleine dictionary variables
	if(!empty(response.payPalEcOrderSetupReply)){
		pdict.orderSetupTransactionId = response.payPalEcOrderSetupReply.transactionId;
		pdict.orderSetupPaymentStatus = response.payPalEcOrderSetupReply.paypalPaymentStatus;
		pdict.orderSetupTransactionType = response.payPalEcOrderSetupReply.paypalTransactiontype;
		pdict.orderSetupCorrelationID = response.payPalEcOrderSetupReply.correlationID;
		pdict.orderSetupPendingReason = response.payPalEcOrderSetupReply.paypalPendingReason;
		pdict.orderSetupReplyReasonCode = response.payPalEcOrderSetupReply.reasonCode.get();
	}
	pdict.orderSetupRequestId= response.requestID;
	pdict.orderSetupRequestToken =response.requestToken;
	pdict.orderSetupReplyDecision = response.decision;
	pdict.ReasonCode= response.reasonCode.get();
	
	//logging as per reason code
	var logTransactionData : String = " Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;
  
   switch(response.reasonCode.get()){
    	case 100:
    		Logger.info("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction."); 
    		break;
    	case 101:
    		Logger.error("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 101] [ERROR] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
    		break;
    	case 102: 
    	    Logger.error("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 102] [ERROR] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data.");
    	    break;
    	case 150:
    		Logger.error("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 150] [ERROR] " + logTransactionData + " Error Message = Error: General system failure.");
    		break;
    	case 151:
    		Logger.error("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 151] [ERROR] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
    		break;
    	case 152:
    		Logger.error("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 152] [ERROR] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
    		break;
    	case 223:
    		Logger.error("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 223] [ERROR] " + logTransactionData + " Error Message = Error from paypal. Paypal rejected this request because of invalid order request.");
    		break;
    	case 233:
    		Logger.error("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 233] [ERROR] " + logTransactionData + " Error Message = Error from paypal. Paypal rejected this request because of invalid order request.");
    		break;
    	case 234:
    		Logger.error("[PaypalOrderSetupEcRequest] [Cybersource Reson Code: 234] [ERROR] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
    		break;
    }
   

   return PIPELET_NEXT;
}
