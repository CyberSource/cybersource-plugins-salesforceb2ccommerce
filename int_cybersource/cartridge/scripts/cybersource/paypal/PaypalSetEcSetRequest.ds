/**
* 	PaypalSetEcSetRequest.ds 
*  	Initiate the Set Request  for paypal payPalEcSetService 
*
* 	@input 	Basket : dw.order.LineItemCtnr The basket used for Authorization
* 	@input 	returnUrl : dw.web.URL
* 	@input 	cancelUrl : dw.web.URL
* 	@input  item : Array 
* 	@input 	shipTo : Object
* 	@input	billTo : Object
* 	@output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* 	@output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* 	@output SetReasonCode : Number the Set Reason code(100 =success)
* 	@output SetRequestID : String The request id generated by Cybersource
* 	@output	SetRequestToken : String the token generated by Cybersource
* 	@output PayPalToken : String
* 	@output CorrelationID : String
* 	@output RedirectURL : String 
*
*/
importPackage( dw.system );
importPackage( dw.value);
importPackage( dw.util);
importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
function execute( pdict : PipelineDictionary ) : Number
{
	 //setting pipeline dictionary values in local variables
	 var basket : LineItemCtnr = pdict.Basket;
   	 var billToObject: BillTo_Object = pdict.billTo;
	 var shipToObject: ShipTo_Object = pdict.shipTo;
   	 var cancelUrl = pdict.cancelUrl.toString();
   	 var returnUrl = pdict.returnUrl.toString();
   	 
 	//**************************************************************************//
	// Check if Basket exists
	//**************************************************************************//
	
	if(basket == null){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}
	// If paypal express , than AdjustedMerchandizeTotalGrossPrice will pass as order toal , if normal paypal than TotalGrossPrice will be pass as order total
	
	var productTotal  : Money = basket.getAdjustedMerchandizeTotalPrice();
	var shippingTotal : Money = basket.getAdjustedShippingTotalNetPrice();
	var shippingTax   : Money = basket.getAdjustedShippingTotalTax();
	var totalTax      : Money = basket.getAdjustedMerchandizeTotalTax();
	var totalAmount   : Money = new Money(0,basket.currencyCode);
	
	totalAmount=totalAmount.add(productTotal);
	if(shippingTotal.value!=0){
	totalAmount=totalAmount.add(shippingTotal);
	totalAmount=totalAmount.add(shippingTax);
	}
	if(totalTax.value !=0){
   		totalAmount=totalAmount.add(totalTax);
	}
	//setting amount and currency in purchase object
	var purchaseObject : PurchaseTotals_Object = new PurchaseTotals_Object();
	purchaseObject.setCurrency(totalAmount.currencyCode);
	purchaseObject.setGrandTotalAmount(StringUtils.formatNumber(totalAmount.value,"000000.00","en_US"));
	
	//creating Cybersource helper object and setting the end point as "Test", "Staging", "Development" or "Production"
	var CybersourceHelper = getCybersourceHelper();	
   	var csReference : WebReference = webreferences.CyberSourceTransaction;
   	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
   	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
   	CybersourceHelper.setEndpoint(service);

	if(!CybersourceHelper.createHeader(service))
	{
		return PIPELET_ERROR;
	}
	//create request object and call paypal set service
	var request = new csReference.RequestMessage();
	CybersourceHelper.payPalEcSetService(request,cancelUrl,returnUrl,purchaseObject,pdict.item,basket.UUID,billToObject,shipToObject);
	//setting response in response object
	var response = null;
	try
	{
		response = service.runTransaction(request);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[PaypalSetEcSetRequest.ds] Error in Execute request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            pdict.ReasonCode = 999; //set timeout error code 999
            return PIPELET_ERROR;
		}       
		
		return PIPELET_ERROR;
	}
	//logging response object as a result of service call
	Logger.debug(response);
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in payPalEcSetService: null response");
		return PIPELET_ERROR;
	}
	
	//setting response back into pipleine dictionary variables
	pdict.SetRequestID = response.requestID;
	pdict.SetRequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	
	if(!empty(response.payPalEcSetReply))
	{
		pdict.SetReasonCode=response.payPalEcSetReply.reasonCode.get();
    	pdict.RedirectURL = CybersourceHelper.getPaypalSandboxUrl()+"&token="+response.payPalEcSetReply.paypalToken;
    	pdict.PayPalToken = response.payPalEcSetReply.paypalToken;
    	pdict.CorrelationID = response.payPalEcSetReply.correlationID;
	}
	
	//logging as per reason code
	var logTransactionData : String = " Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;
	
    switch(response.reasonCode.get()){
    	case 100:
    		Logger.info("[PaypalSetEcSetRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction.");
    		break;
    	case 101:
    		Logger.error("[PaypalSetEcSetRequest] [Cybersource Reson Code: 101] [ERROR] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
    		break;
    	case 102: 
    	    Logger.error("[PaypalSetEcSetRequest] [Cybersource Reson Code: 102] [ERROR] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data.");
    	    break;
    	case 150:
    		Logger.error("[PaypalSetEcSetRequest] [Cybersource Reson Code: 150] [ERROR] " + logTransactionData + " Error Message = Error: General system failure.");
    		break;
    	case 151:
    		Logger.error("[PaypalSetEcSetRequest] [Cybersource Reson Code: 151] [ERROR] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
    		break;
    	case 152:
    		Logger.error("[PaypalSetEcSetRequest] [Cybersource Reson Code: 152] [ERROR] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
    		break;
    	case 223:
    		Logger.error("[PaypalSetEcSetRequest] [Cybersource Reson Code: 223] [ERROR] " + logTransactionData + " Error Message = Error from paypal. Paypal rejected this request because of invalid order request.");
    		break;
    	case 233:
    		Logger.error("[PaypalSetEcSetRequest] [Cybersource Reson Code: 233] [ERROR] " + logTransactionData + " Error Message = Error from paypal. Paypal rejected this request because of invalid order request.");
    		break;
    	case 234:
    		Logger.error("[PaypalSetEcSetRequest] [Cybersource Reson Code: 234] [ERROR] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
    		break;
    }
    
    
   return PIPELET_NEXT;
}
