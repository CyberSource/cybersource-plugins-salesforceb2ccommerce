/**
* This script is used to retrieve the detailed conversion report from HttpClient.
*
*/
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.order );
importPackage( dw.util );
importScript('cybersource/libCybersource.ds');
var dwsvc		= require ("dw/svc");
function execute( pdict : PipelineDictionary ) : Number
{

var CybersourceHelper = getCybersourceHelper();
	Logger.debug("ConversionDetailReport---------------- -");
	//var httpClient : HTTPClient = new HTTPClient();
	
	var message : String;
	var sendErrorMail : Boolean;
	
	//create hashmap of orders based on the query below
	
	var query : String = "exportStatus =" + Order.EXPORT_STATUS_NOTEXPORTED + "d";
		query += " and confirmationStatus =0d";
		query += " and status =" + Order.ORDER_STATUS_CREATED + "d";
	
	//var orderIterator : Iterator = OrderMgr.queryOrders(query, "orderNo asc", null);
	/*comment above queryOrders code to avoid quota exception*/
	var orderIterator : Iterator = OrderMgr.searchOrders(query, "orderNo asc", null);
	var orderHashMap : HashMap = new HashMap();
	if (!empty(orderIterator))
	{
		while (orderIterator.hasNext())
		{
			var order : Order = orderIterator.next();
			
			if( order != null && empty(order.getPaymentInstruments('ALIPAY'))){
			//if( order.paymentTransaction != null && order.paymentTransaction.transactionID != null){
			//var transactionID : String = order.paymentTransaction.transactionID;
			//orderHashMap.put(transactionID, order);
			orderHashMap.put(order.orderNo, order);
			Logger.debug("order ID - " + order.orderNo);
			}
		}
	}
	Logger.debug("unconfirmend orders - " + orderHashMap.length);
	if(orderHashMap.length > 0)
	{
		//date logic: considering to run Batch job one day before the current date
		var endDate : dw.util.Calendar = System.getCalendar();
		endDate.setTimeZone("GMT");
		var enddate = StringUtils.formatCalendar(endDate, "yyyy-MM-dd");
		var endtime = StringUtils.formatCalendar(endDate, "HH:mm:ss");
		var currentDate : dw.util.Calendar = System.getCalendar();
		currentDate.setTimeZone("GMT");
		currentDate.add(dw.util.Calendar.HOUR, -23);
		var startDate = StringUtils.formatCalendar(currentDate, "yyyy-MM-dd");
		var startTime = StringUtils.formatCalendar(currentDate, "HH:mm:ss");
		
		Logger.error("postValues sent to CyberSource for On Demand Conversion report :: ");
		
		var responseObj = null;
		// mapping request object with correct parameter
		var requestObj = new Object();
			requestObj.startDate = startDate;
			requestObj.startTime = startTime;
			requestObj.endDate = enddate;
			requestObj.endTime = endtime;
			
		try{
          
          var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.conversiondetailreport");
              responseObj = service.call(requestObj);
		}catch(e){
                Logger.error("Error in conversion detail report request ( {0} )",e.message);
                return PIPELET_ERROR;
		}

		var errorCode = "";
		var errorMessage = "";
		if(empty(responseObj)){                              
                errorCode = "RESPONSE_EMPTY";            
                errorMessage = "Empty Response";
        return {error : true, errorCode : errorCode ,errorMessage : errorMessage}; 
        } 
        else if("status" in  responseObj && responseObj.getStatus().equals("SERVICE_UNAVAILABLE")){
                errorCode = "SERVICE_UNAVAILABLE";
                errorMessage = responseObj.getErrorMessage();
       return {error : true, errorCode : errorCode ,errorMessage : errorMessage}; 
       // else if(responseObj.status == "OK" && responseObj.object ==" Invalid login credentials." ){handle case for "Invalid login credentials."
       }
		message = responseObj.object;
	
	if (!empty(message))
	{
		Logger.debug("Got the report....");
		Logger.debug("Message - " + message);
	    var xmlDocument : XML = new XML(message);
	    var ns = new Namespace("http://reports.cybersource.com/reports/cmos/1.0");

		Logger.debug("Processing daily conversion report xml ......");
		for each (var xmlConversion:XML in xmlDocument..*::["Conversion"]) 
		{
			var orderNumber = xmlConversion.attribute("MerchantReferenceNumber").toString();
			var order : Order = orderHashMap.get(orderNumber);
			Logger.debug("Order Id - " + xmlConversion.@RequestID.toString());
			if (order != null) {
				//new decision ACCEPT decision applied to order
				if (xmlConversion..*::["NewDecision"].toString() == 'ACCEPT') {
					order.setConfirmationStatus(Order.CONFIRMATION_STATUS_CONFIRMED);
					OrderMgr.placeOrder(order)	
				//new decision REJECT decision applied to order
				} else if (xmlConversion..*::["NewDecision"].toString() == 'REJECT') {  
						OrderMgr.failOrder(order);
				} else {
					//do nothing
				}
			} else {
				Logger.debug("Order in Daily conversion report not found in the query results against Demandware DB");
			}
		}
	}
		 else {
		    // error handling
		    pdict.sendErrorMail = true;
		}
		
	}
    return PIPELET_NEXT;
}
