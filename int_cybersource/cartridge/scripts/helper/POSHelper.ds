'use strict';
/**
 * Validates the credit card details for the requested payment.
 * @param accountNumber : String
 * @param cardType : String
 * @param cvnNumber : String
 * @param expiryMonth : String
 * @param expiryYear : String   
 */
 
function CreateCyberSourcePaymentCardObject_UserData(accountNumber, cardType, cvnNumber, expiryMonth, expiryYear)
{
	var errorMsg, errorCode;
	var Card_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_Card_Object');
    var cardObject = new Card_Object();

	if(!empty(accountNumber))
		cardObject.setAccountNumber(accountNumber);
	else{
		errorCode = "101";
		errorMsg = "Account Number is missing";
		return {error:true, errorCode:errorCode, errorMsg:errorMsg};
	}	

	if(!empty(expiryMonth))
		cardObject.setExpirationMonth(expiryMonth);
	else{
		errorCode = "101";
		errorMsg = "Expiry Month is missing";
		return {error:true, errorCode:errorCode, errorMsg:errorMsg};
	}
	
	if(!empty(expiryYear))
		cardObject.setExpirationYear(expiryYear);
	else{
		errorCode = "101";
		errorMsg = "Expiry Year is missing";
		return {error:true, errorCode:errorCode, errorMsg:errorMsg};
	}
	
	cardObject.setCardType(cardType);
	cardObject.setCvNumber(cvnNumber);
	
	return {success:true, card:cardObject};
}

/**
 * Validates the POS user details details for the requested payment.
 * @param cardPresent : String
 * @param entryMode : String
 * @param catLevel : String
 * @param terminalCapability : String
 * @param terminalID : String
 * @param trackData : String     
 */
 
function CreateCyberSourcePOSObject_UserData(cardPresent, entryMode, catLevel, terminalCapability, terminalID, trackData)
{  
	var errorMsg, errorCode;
	var Pos_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_POS_Object');
	var posObject = new Pos_Object();
	
	if( !empty(cardPresent) )
		posObject.setCardPresent( cardPresent );
	else{
		errorCode = "101";
		errorMsg = "Card Present value is missing";
		return {error:true, errorCode:errorCode, errorMsg:errorMsg};
	}

	if( !empty(entryMode) )
		posObject.setEntryMode( entryMode );
	else{
		errorCode = "101";
		errorMsg = "Entry Mode value is missing";
		return {error:true, errorCode:errorCode, errorMsg:errorMsg};
	}

	if( !empty(terminalCapability) )
		posObject.setTerminalCapability( parseInt(terminalCapability) );
	else{
		errorCode = "101";
		errorMsg = "Terminal Capability value is missing";
		return {error:true, errorCode:errorCode, errorMsg:errorMsg};
	}

	try{
		if( !empty(terminalID) ){
			// passed terminal ID is the serial number of POS terminal.
			// fetch configured terminalID for passed serial number from custom object
			// and set the terminalID accordingly in request
			var customObject = null;
			
			customObject = dw.object.CustomObjectMgr.getCustomObject("POS_TerminalMapping", terminalID);
			if(customObject != null){
				posObject.setTerminalID( customObject.custom.terminalID );
			}
			else{
				errorCode = "102";
				errorMsg = "Serial number passed is invalid/not found";
				return {error:true, errorCode:errorCode, errorMsg:errorMsg};
			}
		}
	}
	catch(e){
		errorCode = "ERR";
		errorMsg = "System error: "+e.message;
		return {error:true, errorCode:errorCode, errorMsg:errorMsg};
	}
	
	if( !empty(posObject.getTerminalID()) ){
		if( !empty(catLevel) )
			posObject.setCatLevel( parseInt(catLevel) );
		else{
			errorCode = "102";
			errorMsg = "CatLevel can't be empty when Terminal ID is present";
			return {error:true, errorCode:errorCode, errorMsg:errorMsg};
		}
	}
	
	if(entryMode.equals("swiped")){
		if( !empty(trackData) )
			posObject.setTrackData( trackData );
		else{
			errorCode = "101";
			errorMsg = "Track Data is missing";
			return {error:true, errorCode:errorCode, errorMsg:errorMsg};
		}
	}
	    
    return {success:true, posObject:posObject};
}

/**
 * Validates and creates the purchase object with amount and currency for the requested payment.
 * @param amount : Money
 * @param currency : String
 */
function CreateCyberSourcePurchaseTotalsObject_UserData(amount, currency)
{  
	var errorMsg, errorCode;
	var PurchaseTotals_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_PurchaseTotals_Object');
	var purchaseObject = new PurchaseTotals_Object();
	
	if(empty(currency)) {
		currency = dw.system.Site.getCurrent().getDefaultCurrency();
	}
	
	purchaseObject.setCurrency(currency);

	var StringUtils = require('dw/util/StringUtils');
	var amount : Number = new Number(amount);
	if(!empty(amount)){
		if(isNaN(amount)){
			errorCode = "102";
			errorMsg = "Amount value is invalid";
			return {error:true, errorCode:errorCode, errorMsg:errorMsg};
		}
		purchaseObject.setGrandTotalAmount(StringUtils.formatNumber(amount.valueOf(),"000000.00","en_US"));
	}
	else{
		errorCode = "101";
		errorMsg = "Amount value is missing";
		return {error:true, errorCode:errorCode, errorMsg:errorMsg};
	}
    
    return {success:true, purchaseObject:purchaseObject};
}

module.exports = {
		CreateCyberSourcePaymentCardObject_UserData: CreateCyberSourcePaymentCardObject_UserData,
		CreateCyberSourcePurchaseTotalsObject_UserData: CreateCyberSourcePurchaseTotalsObject_UserData,
		CreateCyberSourcePOSObject_UserData: CreateCyberSourcePOSObject_UserData
}