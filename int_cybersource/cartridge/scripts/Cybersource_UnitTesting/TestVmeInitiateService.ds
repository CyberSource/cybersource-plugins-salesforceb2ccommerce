/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
*
* @input  apObject : Object
* @input  purchaseTotals : Object
* @output dateTime : String
* @output processorResponse : String
* @output apReasonCode : Number the Checkout Reply ReasonCode
* @output apStatus : String the status of order
* @output apOrderID : String the order id
* @output apProductDescription : String Product description
* @output apProductID : String Product Id
* @output apPurchaseID : String purchase Id
* @output signature : String signature
* @output publicKey : String public key
* @output purchaseTotalCurrency : String Currency
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output merchantId : String
* @output siteId : String
* 
*
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_AP_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{

var CybersourceHelper = getCybersourceHelper();	
	
	var apObject : AP_Object = pdict.apObject;
	var purchaseObject : PurchaseTotals_Object = pdict.purchaseTotals;
			 
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addAPInitiateServiceInfo(request, purchaseObject, apObject, "test");
	
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
			Logger.error("[libCybersource.ds] Error in Ap Initiate Service ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	
	if(null != response.apInitiateReply){
		pdict.dateTime = response.apInitiateReply.dateTime;		
		pdict.apReasonCode = response.apInitiateReply.reasonCode.get();	
		pdict.signature = response.apInitiateReply.signature;
		pdict.publicKey = response.apInitiateReply.publicKey;					
	}
	if(null != response.apReply)
	{
		pdict.apProductID = response.apReply.productID;	
		pdict.merchantId = response.apReply.merchantUUID;
		pdict.apPurchaseID = response.apReply.purchaseID;
		pdict.siteId = response.apReply.merchantSiteID;
		pdict.apOrderID = response.apReply.orderID;
	}
	if(null != response.purchaseTotals)
		pdict.purchaseTotalCurrency = response.purchaseTotals.currency;

   return PIPELET_NEXT;
}
