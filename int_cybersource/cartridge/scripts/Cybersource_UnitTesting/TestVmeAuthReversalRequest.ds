/**
* TestVmeAuthReversalRequest.ds
* Performs the auth reversal for requested authorized request ID
* @input 	purchaseTotals : Object
* @input	authRequestID : String
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Object The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CaptureReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output CaptureAmount : String the amount authorized by Cybersource
* @output transactionID : String
* @output invalidField : Array
* @output missingField : Array
* @output providerResponse : String
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

    var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
    /*
    * An authorization reversal is a follow-on transaction that uses the request ID returned from an authorization.
    */
    var authRequestID: String = pdict.authRequestID;
	
	
	var CybersourceHelper = getCybersourceHelper();
	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();

	CybersourceHelper.addAPAuthReversalServiceInfo(request, purchaseObject, "test", authRequestID);
	
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in Authorization Reversal Request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	else
	{
		if ( null != response.apAuthReversalReply)
		{
			pdict.transactionID = response.apAuthReversalReply.transactionID;
			pdict.providerResponse = response.apAuthReversalReply.providerResponse;
		}
		pdict.Decision = response.decision;
		pdict.invalidField = response.invalidField;
		pdict.missingField = response.missingField;
		pdict.ReasonCode = response.reasonCode;
		pdict.RequestID = response.requestID;
		pdict.RequestToken = response.requestToken;	
	}
	return PIPELET_NEXT;
}

