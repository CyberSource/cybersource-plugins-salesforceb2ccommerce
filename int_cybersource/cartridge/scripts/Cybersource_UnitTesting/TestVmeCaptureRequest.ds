/**
* TestVmeCaptureRequest.ds
* Performs the authorization for requested ID 
* @input 	purchaseTotals : Object
* @input	authRequestID : String
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Object The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CaptureReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output CaptureAmount : String the amount authorized by Cybersource
* @output transactionID : String
* @output invalidField : Array
* @output missingField : Array
* @output purchaseTotalCurrency : String The Currency Code for requested transaction id
* @output dateTime : String The date time of transaction creation
* @output providerResponse : String Process response code for transaction
* @output apReasonCode : Number the Checkout Reply ReasonCode
* @output apStatus : String the status of order
* @output apOrderID : String the order ID
* @output reconciliationID : String
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

    var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
    /*
    * A capture is a follow-on transaction that uses the request ID returned from an authorization.
    */
    var authRequestID: String = pdict.authRequestID;
	
	
	var CybersourceHelper = getCybersourceHelper();
	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();

	CybersourceHelper.addAPCaptureServiceInfo(request, purchaseObject, "test", authRequestID);
	
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in Authorization Reversal Request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	else
	{
					
		if ( null != response.apCaptureReply)
		{
			pdict.transactionID = response.apCaptureReply.transactionID;			
			pdict.CaptureAmount = response.apCaptureReply.amount;
			pdict.dateTime = response.apCaptureReply.dateTime;
			pdict.providerResponse = response.apCaptureReply.providerResponse;
			pdict.apReasonCode = response.apCaptureReply.reasonCode.get();
			pdict.apStatus = response.apCaptureReply.status;		
			pdict.reconciliationID = response.apCaptureReply.reconciliationID;
		}
		if(null != response.apReply) 
		pdict.apOrderID = response.apReply.orderID;
		if( null != response.purchaseTotals )
		pdict.purchaseTotalCurrency = response.purchaseTotals.currency;
		pdict.Decision = response.decision;
		pdict.invalidField = response.invalidField;
		pdict.missingField = response.missingField;
		pdict.ReasonCode = response.reasonCode;
		pdict.RequestID = response.requestID;
		pdict.RequestToken = response.requestToken;
	}
	return PIPELET_NEXT;
}

