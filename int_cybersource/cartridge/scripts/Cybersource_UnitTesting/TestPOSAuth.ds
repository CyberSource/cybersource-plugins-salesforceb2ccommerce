/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
*
* @input location		: String
* @input card 			: Object
* @input purchaseTotals	: Object
* @input pos 			: Object

* @output MerchantReferenceCode 				: String
* @output RequestID 							: String The request id generated by Cybersource
* @output Decision 								: String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode 							: Number The global reason code returned by Cybersource (100 = Success)
* @output PurchaseTotalsCurrency 				: String

* @output AuthorizationReasonCode 				: String The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount 					: String the amount authorized by Cybersource
* @output AuthorizationCode 					: String the authorizationCode by Cybersource
* @output AVSCode 								: String
* @output AVSCodeRaw 							: String
* @output AuthReplyCardGroup 					: String
* @output AuthReplyCardCategory 				: String
* @output AuthReplyPaymentNetworkTransactionID	: String
* @output AuthReplyReconciliationID 			: String
* @output AuthReplyProcessorResponse 			: String

* @output CaptureReplyReconciliationID 			: String
* @output CaptureReplyAmount 					: String
* @output CaptureReplyReasonCode 				: String
* @output ReceiptNumber			 				: String

* @output InvalidField 							: Array
* @output MissingField 							: Array
* @output posAuthResponse 						: Object
*
*/
importPackage( dw.system );
var TestFacade = require('int_cybersource/cartridge/scripts/Facade/TestFacade');
function execute( pdict : PipelineDictionary ) : Number
{

	var location: String = pdict.location;
	var cardObject = pdict.card;
	var purchaseObject = pdict.purchaseTotals;
	var posObject = pdict.pos;
	
	
	var result = TestFacade.TestPOSAuth(cardObject, purchaseObject, posObject);
	
	
	if (result.error && result.errorMsg) {
		return PIPELET_ERROR;
	} 
	
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	
	pdict.posAuthResponse = result.serviceResponse;
	pdict.RequestID 								= result.serviceResponse.RequestID;
	pdict.MerchantReferenceCode						= result.serviceResponse.MerchantReferenceCode;
	pdict.Decision									= result.serviceResponse.Decision;
	pdict.ReasonCode								= result.serviceResponse.ReasonCode;

	if(null != result.serviceResponse.purchaseTotals)
		pdict.PurchaseTotalsCurrency				= result.serviceResponse.PurchaseTotalsCurrency;
	
	if(null != result.serviceResponse.ccAuthReply) {
		pdict.AuthorizationReasonCode				= result.serviceResponse.AuthorizationReasonCode;
		pdict.AuthorizationAmount					= result.serviceResponse.AuthorizationAmount;
		pdict.AuthorizationCode 					= result.serviceResponse.AuthorizationCode;
		pdict.AVSCode								= result.serviceResponse.AVSCode;
		pdict.AVSCodeRaw 							= result.serviceResponse.AVSCodeRaw;
		pdict.AuthReplyProcessorResponse			= result.serviceResponse.AuthReplyProcessorResponse;
		pdict.AuthReplyReconciliationID 			= result.serviceResponse.AuthReplyReconciliationID;
		pdict.AuthReplyPaymentNetworkTransactionID	= result.serviceResponse.AuthReplyPaymentNetworkTransactionID;
		pdict.AuthReplyCardCategory					= result.serviceResponse.AuthReplyCardCategory;
		pdict.AuthReplyCardGroup					= result.serviceResponse.AuthReplyCardGroup;
	}
	
	if(null != result.serviceResponse.ccCaptureReply){
		pdict.CaptureReplyReasonCode				= result.serviceResponse.CaptureReplyReasonCode;
		pdict.CaptureReplyAmount					= result.serviceResponse.CaptureReplyAmount;
		pdict.CaptureReplyReconciliationID			= result.serviceResponse.CaptureReplyReconciliationID;
	}
	
	if(!empty(result.serviceResponse.receiptNumber)){
		pdict.ReceiptNumber							= result.serviceResponse.receiptNumber;
	}
	
	if(!empty(result.serviceResponse.invalidField)){
		pdict.InvalidField							= result.serviceResponse.invalidField;
	}

	if(!empty(result.serviceResponse.missingField)){
		pdict.MissingField							= result.serviceResponse.missingField;
	}
	
    return PIPELET_NEXT;
}