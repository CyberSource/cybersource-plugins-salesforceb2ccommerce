/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
*
* @input location		: String
* @input card 			: Object
* @input purchaseTotals	: Object
* @input pos 			: Object

* @output MerchantReferenceCode 				: String
* @output RequestID 							: String The request id generated by Cybersource
* @output Decision 								: String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode 							: Number The global reason code returned by Cybersource (100 = Success)
* @output PurchaseTotalsCurrency 				: String

* @output AuthorizationReasonCode 				: Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount 					: String the amount authorized by Cybersource
* @output AuthorizationCode 					: String the authorizationCode by Cybersource
* @output AVSCode 								: String
* @output AVSCodeRaw 							: String
* @output AuthReplyCardGroup 					: String
* @output AuthReplyCardCategory 				: String
* @output AuthReplyPaymentNetworkTransactionID	: String
* @output AuthReplyReconciliationID 			: String
* @output AuthReplyProcessorResponse 			: String

* @output CaptureReplyReconciliationID 			: String
* @output CaptureReplyAmount 					: String
* @output CaptureReplyReasonCode 				: String
* @output ReceiptNumber			 				: String

* @output InvalidField 							: Array
* @output MissingField 							: Array

*
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_POS_Object.ds');
importScript('cybersource/libCybersource.ds');

var numbersOnlyRegExp : RegExp = /\D/g;
function execute( pdict : PipelineDictionary ) : Number
{

	var location: String = pdict.location;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var posObject: Pos_Object = pdict.pos;
	
	
	var CybersourceHelper = getCybersourceHelper();
	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createPosHeader(service, location)){
		return PIPELET_ERROR;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addPOSAuthRequestInfo(request, location, purchaseObject,cardObject,"POS",CybersourceHelper.getDigitalFingerprintEnabled(), posObject);
		
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[Test POS transaction TestPosAuth.ds] Error in request: {0}",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.RequestID 								= response.requestID;
	pdict.MerchantReferenceCode						= response.merchantReferenceCode;
	pdict.Decision									= response.decision;
	pdict.ReasonCode								= response.reasonCode.get();

	if(!empty(response.purchaseTotals))
		pdict.PurchaseTotalsCurrency				= response.purchaseTotals.currency;
	
	if(!empty(response.ccAuthReply)){
		pdict.AuthorizationReasonCode				= response.ccAuthReply.reasonCode.get();
		pdict.AuthorizationAmount					= response.ccAuthReply.amount;
		pdict.AuthorizationCode 					= response.ccAuthReply.authorizationCode;
		pdict.AVSCode								= response.ccAuthReply.avsCode;
		pdict.AVSCodeRaw 							= response.ccAuthReply.avsCodeRaw;
		pdict.AuthReplyProcessorResponse			= response.ccAuthReply.processorResponse;
		pdict.AuthReplyReconciliationID 			= response.ccAuthReply.reconciliationID;
		pdict.AuthReplyPaymentNetworkTransactionID	= response.ccAuthReply.paymentNetworkTransactionID;
		pdict.AuthReplyCardCategory					= response.ccAuthReply.cardCategory;
		pdict.AuthReplyCardGroup					= response.ccAuthReply.cardGroup;
	}
	
	if(!empty(response.ccCaptureReply)){
		pdict.CaptureReplyReasonCode				= response.ccCaptureReply.reasonCode;
		pdict.CaptureReplyAmount					= response.ccCaptureReply.amount;
		pdict.CaptureReplyReconciliationID			= response.ccCaptureReply.reconciliationID;
	}
	
	if(!empty(response.receiptNumber)){
		pdict.ReceiptNumber							= response.receiptNumber;
	}
	
	if(!empty(response.invalidField)){
		pdict.InvalidField							= response.invalidField;
	}

	if(!empty(response.missingField)){
		pdict.MissingField							= response.missingField;
	}

    return PIPELET_NEXT;
}