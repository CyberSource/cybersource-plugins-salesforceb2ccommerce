/**
* TestVmeRefundRequest.ds
* Performs the authorization for capture id.
*
* @input 	purchaseTotals : Object
* @input	apCaptureID : String
* @input	reason : String
* @input	note : String
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Object The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CaptureReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output CaptureAmount : String the amount authorized by Cybersource
* @output transactionID : String
* @output invalidField : Array
* @output missingField : Array
* @output providerResponse : String
* @output reconciliationID : String
*
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

    var purchaseObject : PurchaseTotals_Object = pdict.purchaseTotals;
    
	/*
	 *  A refund is a follow-on transaction that uses the request ID returned from a capture and
	 *  must take place within 60 days after the capture.
	 */
    var apCaptureID : String = pdict.apCaptureID;
    var reason : String = pdict.reason;
    var note : String = pdict.note;
	
	
	var CybersourceHelper = getCybersourceHelper();
	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();

	CybersourceHelper.addAPRefundServiceInfo(request, purchaseObject, "test", apCaptureID, reason, note);
	
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in AP Refund Request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	else
	{
		if ( null != response.apRefundReply)
		{
			pdict.transactionID = response.apRefundReply.transactionID;
			pdict.providerResponse = response.apRefundReply.providerResponse;
			pdict.reconciliationID = response.apRefundReply.reconciliationID;
		}
		pdict.Decision = response.decision;
		pdict.invalidField = response.invalidField;
		pdict.missingField = response.missingField;
		pdict.ReasonCode = response.reasonCode;
		pdict.RequestID = response.requestID;
		pdict.RequestToken = response.requestToken;	

	}
	return PIPELET_NEXT;
}

