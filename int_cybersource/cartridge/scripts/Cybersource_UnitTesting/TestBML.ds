/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* @input  billTo : Object
* @input  shipTo : Object
* @input  card : Object
* @input  purchaseTotals : Object
* @input  bml : Object
*
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource*
* @output merchantID : String the authorizationCode by Cybersource*
* @output password : String the authorizationCode by Cybersource*
* @output newid : String the authorizationCode by Cybersource*
* @output foobar : Object 
*/
importPackage( dw.system );
importPackage(dw.value);
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);
importScript('cybersource/Cybersource_BML_Object.ds');
importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

var numbersOnlyRegExp : RegExp = /\D/g;
function execute( pdict : PipelineDictionary ) : Number
{


var CybersourceHelper = getCybersourceHelper();
	
	//hard coded values for testing:
	var Promo : Boolean = false;
	
	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var bmlObject: BML_Object = pdict.bml;
	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");

	CybersourceHelper.setEndpoint(service);
	
	if(Promo)
	{
		if(!CybersourceHelper.createBMLPromoHeader(service)){
			return PIPELET_ERROR;
		}
	}
	else
	{
		if(!CybersourceHelper.createBMLHeader(service)){
			return PIPELET_ERROR;
		}
	}

	pdict.merchantID = CybersourceHelper.getBMLMerchantID();
	pdict.password = CybersourceHelper.getBMLMerchantPassword();
	
	var request = new csReference.RequestMessage();
	CybersourceHelper.addBMLAuthRequestInfo(request,billToObject,shipToObject,purchaseObject,cardObject,bmlObject,Promo);

	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[TestBML.ds] Error in BML request ( {0} )",e.message);
		pdict.foobar = request;
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(null != response.ccAuthReply){
		pdict.AuthorizationAmount = response.ccAuthReply.amount;
		pdict.AuthorizationCode = response.ccAuthReply.authorizationCode;
		pdict.AuthorizationReasonCode = response.ccAuthReply.reasonCode.get();
}
		pdict.newid = response.ccAuthReply.bmlAccountNumber;
return PIPELET_NEXT;
}
