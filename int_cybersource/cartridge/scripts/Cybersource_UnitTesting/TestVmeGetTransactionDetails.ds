/**
* TestVmeGetTransactionDetails.ds.ds
* Performs the get transaction details of the Visa VMe.
*
* @input  apObject : Object
* @input  purchaseTotals : Object
* @input  transactionDetailID : String
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output dateTime : String The date time of transaction creation
* @output processorResponse : String Process response code for transaction
* @output apReasonCode : Number the Checkout Reply ReasonCode
* @output apStatus : String the status of order
* @output AVSCodeRaw : String
* @output transactionID : String transaction id
* @output cardExpirationMonth : String Credit Card Exp Month
* @output cardExpirationYear : String Credit Card Exp Year
* @output cardGroup : String Card Group
* @output cardType : String Card Type
* @output cardNumberSuffix : String last 4 digit for card
* @output apSubtotalAmount : String sub total amount
*
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_AP_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	var CybersourceHelper = getCybersourceHelper();	
	var apObject : AP_Object = pdict.apObject;
	var purchaseObject : PurchaseTotals_Object = pdict.purchaseTotals;
	var transactionDetailID = pdict.transactionDetailID;
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addAPTransactionDetailsRequestInfo(request, purchaseObject, apObject, transactionDetailID, "test123");
	
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
			Logger.error("[libCybersource.ds] Error in Transaction Details Request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if (null != response.apTransactionDetailsReply) {
		pdict.dateTime = response.apTransactionDetailsReply.dateTime;
		pdict.processorResponse = response.apTransactionDetailsReply.processorResponse;
		pdict.apReasonCode = response.apTransactionDetailsReply.reasonCode.get();
		pdict.apStatus = response.apTransactionDetailsReply.status;
		pdict.transactionID = response.apTransactionDetailsReply.transactionID;
	}
	if(null != response.apReply){		
		pdict.cardExpirationMonth = response.apReply.cardExpirationMonth;
		pdict.cardExpirationYear = response.apReply.cardExpirationYear;
		pdict.cardGroup = response.apReply.cardGroup;
		pdict.cardNumberSuffix = response.apReply.cardNumberSuffix;
		pdict.cardType = response.apReply.cardType;
		pdict.apSubtotalAmount = response.apReply.subtotalAmount;				
		pdict.AVSCodeRaw = response.apReply.avsCodeRaw;
	}	
    return PIPELET_NEXT;
}

