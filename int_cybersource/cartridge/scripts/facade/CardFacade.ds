'use strict';
var dwsvc = require ("dw/svc");
var Logger = require('dw/system/Logger');

/**
 * This method create the input for the cybersource credit card payment method, validates it and gets response from the service.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr
 * @param IPAddress : Client Ip address
 * @param orderNo : String
 * @param CreditCardForm : dw.web.FormElement
 * @param SubscriptionID : String
 * @param payerEnrollResponse : Object
 * @param payerValidationResponse : Object
 * @param ReadFromBasket : boolean
 */


function CCAuthRequest(Basket : dw.order.LineItemCtnr, OrderNo : String, IPAddress : String, CreditCardForm : dw.web.FormElement, SubscriptionID:String, 
	payerEnrollResponse : Object, payerValidationResponse : Object, ReadFromBasket : Boolean)
{
    var basket = Basket;
    var orderNo = OrderNo;
	
	//**************************************************************************//
	// Check if Basket exists
	//**************************************************************************//
	if(basket == null){
		Logger.error("Please provide a Basket!");
		return {error:true};
	}

	var CardHelper = require('int_cybersource/cartridge/scripts/helper/CardHelper');
	var CommonHelper = require('int_cybersource/cartridge/scripts/helper/CommonHelper');
	var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
	var CybersourceConstants = require('int_cybersource/cartridge/scripts/utils/CybersourceConstants.ds');
	var CybersourceHelper = libCybersource.getCybersourceHelper();	
	//Objects to set in the Service Request inside facade
	var billTo, shipTo, purchaseObject, cardObject;
	var result = CommonHelper.CreateCyberSourceBillToObject(basket, ReadFromBasket);
	billTo = result.billTo;
	result = CommonHelper.CreateCybersourceShipToObject(basket);
	shipTo = result.shipTo;
	if (empty(basket.getPaymentInstruments(CybersourceConstants.METHOD_SA_SILENTPOST))) {
		result = CardHelper.CreateCybersourcePaymentCardObject("billing", SubscriptionID);
		cardObject = result.card;
	}
	result = CommonHelper.CreateCybersourcePurchaseTotalsObject(basket);
	purchaseObject = result.purchaseTotals;
	result = CommonHelper.CreateCybersourceItemObject(basket);
	var items : dw.util.List = result.items;

	//**************************************************************************//
	// Set WebReference & Stub
	//**************************************************************************//	
	var csReference = webreferences.CyberSourceTransaction;

	var serviceRequest = new csReference.RequestMessage();
	//**************************************************************************//
	// the request object holds the input parameter for the OnDemand Subscription request
	//**************************************************************************//	
	if (!empty(SubscriptionID)) {
		CybersourceHelper.addOnDemandSubscriptionInfo(SubscriptionID, serviceRequest, purchaseObject,orderNo);
	}
	
	/********************************/
	/* TOKEN-related WebService setup */
	/********************************/
	var enableTokenization : String = CybersourceHelper.getTokenizationEnabled();
	if(enableTokenization=='YES' && empty(SubscriptionID))
	{
		CybersourceHelper.addPaySubscriptionCreateService(serviceRequest,billTo,purchaseObject,cardObject,OrderNo);
	}
	
	//**************************************************************************//
	// the request object holds the input parameter for the AUTH request
	//**************************************************************************//	
	CybersourceHelper.addCCAuthRequestInfo(serviceRequest,billTo,shipTo,purchaseObject,cardObject,orderNo, CybersourceHelper.getDigitalFingerprintEnabled(), items);
	
	//Populate Payer Auth Reply service response attributes		
	if (payerValidationResponse) {
		CybersourceHelper.addPayerAuthReplyInfo(serviceRequest, payerValidationResponse.CAVV, payerValidationResponse.UCAFAuthenticationData, 
			payerValidationResponse.UCAFCollectionIndicator, payerValidationResponse.ECIRaw, payerValidationResponse.PAVCommerceIndicator, 
			payerValidationResponse.PAVXID, payerValidationResponse.ParesStatus);
	} else if (payerEnrollResponse) {
		CybersourceHelper.addPayerAuthReplyInfo(serviceRequest, null, null, payerEnrollResponse.UCAFCollectionIndicator, null, payerEnrollResponse.PACommerceIndicator, 
		payerEnrollResponse.PAXID, null);
	}
	/********************************/
	/* DAV-related WebService setup */
	/********************************/	
	var enableDAV = CybersourceHelper.getDavEnable();
	var approveDAV = CybersourceHelper.getDavOnAddressVerificationFailure();
	
	if( enableDAV=='YES' ) {
		var ignoreDAVResult = false;
		if( approveDAV=='APPROVE' ) {
			ignoreDAVResult = true;
		}
		CybersourceHelper.addDAVRequestInfo(serviceRequest, billTo, shipTo, ignoreDAVResult);
	}
	/* End of DAV WebService setup */
	
	/* AVS Service setup */
	var ignoreAVSResult = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags = CybersourceHelper.getAvsDeclineFlags();
	
	CybersourceHelper.addAVSRequestInfo(serviceRequest, ignoreAVSResult, declineAVSFlags);
	/* End of AVS Service setup */
	CardHelper.writeOutDebugLog(serviceRequest,orderNo);
	
	//**************************************************************************//
	// Execute Request
	//**************************************************************************//	
	var serviceResponse = null;
	try
	{
		var service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}
	catch(e)
	{
		Logger.fatal("[CardFacade.ds] Error in CCAuthRequest ( {0} )", e.message);
		return {error:true, errorMsg:e.message};
	}
	
	Logger.debug(response);
	
	
	if(empty(serviceResponse) || serviceResponse.status != "OK")
	{
		Logger.fatal("[CardFacade.ds] CCAuthRequest Error : null response");
		return {error:true, errorMsg:"empty or error in test CCAuthRequest response: "+serviceResponse};
	}
	serviceResponse = serviceResponse.object;	
	CardHelper.protocolResponse( serviceResponse );
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	result = CardHelper.ProcessCardAuthResponse(serviceResponse, shipTo, billTo);
	return {success:true, serviceResponse:result.responseObject};
}

/**
 * For normal Credit card payment type, CC service is called and response is given back to invoked method. 
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */


function CCCaptureRequest(Order : dw.order.LineItemCtnr)
{
    var order = Order;
    var PaymentInstrument = require('dw/order/PaymentInstrument');
    var CybersourceConstants = require('int_cybersource/cartridge/scripts/utils/CybersourceConstants');
    if (empty(order.getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD)) && 
    	empty(order.getPaymentInstruments(CybersourceConstants.SA_IFRAME)) &&
    	empty(order.getPaymentInstruments(CybersourceConstants.SA_REDIRECT)) &&
    	empty(order.getPaymentInstruments(CybersourceConstants.METHOD_SA_SILENTPOST)) &&
    	empty(order.getPaymentInstruments("DW_APPLE_PAY")) &&
    	empty(order.getPaymentInstruments(CybersourceConstants.METHOD_VISA_CHECKOUT))) {
    	return {error:true, errorMsg:"credit card payment instrument not available in order"};
    }
    var CardHelper = require('int_cybersource/cartridge/scripts/helper/CardHelper');
    var paymentinstr = CardHelper.getNonGCPaymemtInstument(order);
    var paymentTransaction = paymentinstr.paymentTransaction;
 	if(order.paymentStatus.value == "PAID") {
 		return {error:true, errorMsg:'order already in PAID status'};
 	}
	var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	
	var csReference = webreferences.CyberSourceTransaction;

	var serviceRequest = new csReference.RequestMessage();
	CybersourceHelper.addCCCaptureRequestInfo(serviceRequest, order);
	if (!empty(order.getPaymentInstruments(CybersourceConstants.METHOD_VISA_CHECKOUT))) {
		CybersourceHelper.addVCOrderID(serviceRequest,paymentinstr.custom.callId);
	}
	
	var serviceResponse = null;
	// send request
	try{
		var service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}catch(e){
		Logger.error("[CardFacade.ds] Error in CCCaptureRequest ( {0} )",e.message);
		return {error:true, errorMsg:e.message};
	}
	
	if(empty(serviceResponse) || serviceResponse.status != "OK"){
		return {error:true, errorMsg:"[CardFacade.ds] empty or error in card capture response: "+serviceResponse};
	}
	serviceResponse = serviceResponse.object;
	
	var responseObject = {};
	responseObject["RequestID"] = serviceResponse.requestID;
	responseObject["RequestToken"] = serviceResponse.requestToken;
	responseObject["ReasonCode"] = serviceResponse.reasonCode.get();
	responseObject["Decision"] = serviceResponse.decision;
	responseObject["ccCaptureReply"] = (null !== serviceResponse.ccCaptureReply) ? "exists" : null;
	if(null !== serviceResponse.ccCaptureReply){
		responseObject["CaptureAmount"] = serviceResponse.ccCaptureReply.amount;
		responseObject["CaptureReasonCode"] = serviceResponse.ccCaptureReply.reasonCode.get();
	}
	return {success:true, serviceResponse:responseObject};
}

/**
 * DAV request call is made to cybersource and response if send back.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 * @param bill To : billing address of the order
 * @param ship to : Shipping address of the order
 */

function DAVRequest(Basket : dw.order.LineItemCtnr,billTo : Object,shipTo : Object)
{
    // read pipeline dictionary input parameter
    var basket = Basket;

	if( basket == null ){
		Logger.error("[CardFacade.ds DAVRequest] Please provide a Basket");
		return {error:true};
	}

	var billToObject = billTo;
	var shipToObject = shipTo;
	
	var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	
	var csReference = webreferences.CyberSourceTransaction;
	var serviceRequest = new csReference.RequestMessage();
	
	CybersourceHelper.addDAVRequestInfo(serviceRequest,billToObject,shipToObject);

	var serviceResponse = null;
	// send request
	try{
		var service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}catch(e){
		Logger.fatal("[CardFacade.ds] Error in DAV request ( {0} )",e.message);
		return {error:true, errorMsg:e.message};
	}
	
	if(empty(serviceResponse) || serviceResponse.status != "OK"){
		Logger.fatal("[CardFacade.ds] response in DAV response ( {0} )",serviceResponse);
		return {error:true, errorMsg:"empty or error in DAV response: "+serviceResponse};
	}
	serviceResponse = serviceResponse.object;
	//set response values in local variables
	var responseObject = {};
	responseObject["RequestID"] = serviceResponse.requestID;
	responseObject["RequestToken"] = serviceResponse.requestToken;
	responseObject["ReasonCode"] = serviceResponse.reasonCode.get();
	responseObject["Decision"] = serviceResponse.decision;
	responseObject["davReply"] = (null !== serviceResponse.davReply) ? "exists" : null;
	if(null !== serviceResponse.davReply){
		responseObject["DAVReasonCode"] = serviceResponse.davReply.reasonCode.get();
	}
	return {success:true, serviceResponse:responseObject};
}

/**
 * Payer Auth call is made to cybersource and response if send back.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 * @param amount : order total
 * @param OrderNo : Order number
 * @param CreditCardForm : details of the card
 */
 
function PayerAuthEnrollCheck(LineItemCtnrObj : dw.order.LineItemCtnr,Amount : dw.value.Money,OrderNo : String, CreditCardForm)
{
    var lineItemCtnrObj = LineItemCtnrObj;
    var amount = Amount;
    var creditCardForm = CreditCardForm;
    var orderNo : String = OrderNo;
    
	if((lineItemCtnrObj == null || creditCardForm == null )){
		Logger.error("[CardFacade.ds] Please provide a Basket and the credit card form element!");
		return {error:true};
	}
	
	var CardHelper = require('int_cybersource/cartridge/scripts/helper/CardHelper');
	var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	var csReference  = webreferences.CyberSourceTransaction;
	var serviceRequest = new csReference.RequestMessage();
	var paymentInstrument = CardHelper.getNonGCPaymemtInstument(lineItemCtnrObj);
	CybersourceHelper.addPayerAuthEnrollInfo(serviceRequest,orderNo,creditCardForm,lineItemCtnrObj.billingAddress.countryCode.value,amount, paymentInstrument.getCreditCardToken());

	var serviceResponse = null;
	// send request
	try{
		var service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}catch(e){
		Logger.fatal("[CardFacade.ds] Error in PayerAuthEnrollCheck request ( {0} )",e.message);
		return {error:true, errorMsg:e.message};
	}
	if(empty(serviceResponse) || serviceResponse.status != "OK"){
		Logger.fatal("[CardFacade.ds] response in PayerAuthEnrollCheck response ( {0} )",serviceResponse);
		return {error:true, errorMsg:"empty or error in PayerAuthEnrollCheck response: "+serviceResponse};
	}
	serviceResponse = serviceResponse.object;
	//set response values in local variables
	var responseObject = {};
	responseObject["RequestID"] = serviceResponse.requestID;
	responseObject["RequestToken"] = serviceResponse.requestToken;
	responseObject["ReasonCode"] = serviceResponse.reasonCode.get();
	responseObject["Decision"] = serviceResponse.decision;
	responseObject["payerAuthEnrollReply"] = (null !== serviceResponse.payerAuthEnrollReply) ? "exists" : null;
	if(null !== serviceResponse.payerAuthEnrollReply){
		responseObject["PACommerceIndicator"] = serviceResponse.payerAuthEnrollReply.commerceIndicator;
		responseObject["UCAFCollectionIndicator"] = serviceResponse.payerAuthEnrollReply.ucafCollectionIndicator;
		responseObject["ProofXML"] = serviceResponse.payerAuthEnrollReply.proofXML;
		responseObject["AcsURL"] = serviceResponse.payerAuthEnrollReply.acsURL;
		responseObject["PAXID"] = serviceResponse.payerAuthEnrollReply.xid;
		responseObject["PAReq"] = serviceResponse.payerAuthEnrollReply.paReq;
		responseObject["ProxyPAN"] = serviceResponse.payerAuthEnrollReply.proxyPAN;
	}
	return {success:true, serviceResponse:responseObject};
}

/**
 * Payer Auth validation call is made to cybersource and response if send back.
 * @param PaRes : 
 * @param amount : order total
 * @param OrderNo : Order number
 * @param CreditCardForm : details of the card
 */
 
function PayerAuthValidation(PaRes : String,Amount : dw.value.Money,OrderNo : String,CreditCardForm : dw.web.FormElement, CreditCardToken: String)
{
	var orderNo = OrderNo;
    var amount = Amount;
    var creditCardForm = CreditCardForm;
    var signedPaRes = dw.util.StringUtils.trim(PaRes);
	//var signedPaRes : String =PaRes;
	signedPaRes = signedPaRes.replace('/[^a-zA-Z0-9/+=]/g',"");
	//**************************************************************************//
	// Set WebReference & Stub
	//**************************************************************************//	
	var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	
	var csReference = webreferences.CyberSourceTransaction;
	var serviceRequest = new csReference.RequestMessage();
	
	CybersourceHelper.addPayerAuthValidateInfo(serviceRequest,orderNo,signedPaRes,creditCardForm,amount, CreditCardToken);

	var serviceResponse = null;
	// send request
	try{
		var service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		serviceResponse = service.call(serviceRequest);
	}catch(e){
		Logger.fatal("[CardFacade.ds] Error in PayerAuthValidation request ( {0} )",e.message);
		return {error:true, errorMsg:e.message};
	}
	
	if(empty(serviceResponse) || serviceResponse.status != "OK"){
		Logger.fatal("[CardFacade.ds] response in PayerAuthValidation response ( {0} )",serviceResponse);
		return {error:true, errorMsg:"empty or error in PayerAuthValidation response: "+serviceResponse};
	}
	serviceResponse = serviceResponse.object;
	//set response values in local variables
	var responseObject = {};
	responseObject["RequestID"] = serviceResponse.requestID;
	responseObject["RequestToken"] = serviceResponse.requestToken;
	responseObject["ReasonCode"] = serviceResponse.reasonCode.get();
	responseObject["Decision"] = serviceResponse.decision;
	responseObject["payerAuthValidateReply"] = (null !== serviceResponse.payerAuthValidateReply) ? "exists" : null;
	if(null !== serviceResponse.payerAuthValidateReply){
		responseObject["AuthenticationResult"] = serviceResponse.payerAuthValidateReply.authenticationResult;
		responseObject["AuthenticationStatusMessage"] = serviceResponse.payerAuthValidateReply.authenticationStatusMessage;
		responseObject["CAVV"] = serviceResponse.payerAuthValidateReply.cavv;
		responseObject["UCAFAuthenticationData"] = serviceResponse.payerAuthValidateReply.ucafAuthenticationData;
		responseObject["UCAFCollectionIndicator"] = serviceResponse.payerAuthValidateReply.ucafCollectionIndicator;
		responseObject["PAVCommerceIndicator"] = serviceResponse.payerAuthValidateReply.commerceIndicator;
		responseObject["PAVXID"] = serviceResponse.payerAuthValidateReply.xid;
		responseObject["ECIRaw"] = serviceResponse.payerAuthValidateReply.eciRaw;
		responseObject["ParesStatus"] = serviceResponse.payerAuthValidateReply.paresStatus;
	}
	return {success:true, serviceResponse:responseObject};
}
module.exports = {
		CCCaptureRequest: CCCaptureRequest,
		PayerAuthEnrollCheck: PayerAuthEnrollCheck,
		PayerAuthValidation: PayerAuthValidation,
		CCAuthRequest : CCAuthRequest,
		DAVRequest : DAVRequest
	};