'use strict';
var Logger = dw.system.Logger.getLogger('Cybersource');

/**
 * Cybersource service is called with the tax request as true and the service gived tax information in response.
 * @param Basket : dw.order.LineItemCtnr contains object of basket or order
 * @param bill To : billing address of the order
 * @param ship to : Shipping address of the order
 * @param card : card details
 * @param shipFrom : site preference shipping details
 * @param itemArray : Array of Items purchased
 * @param  itemMap : Map having rest Ids
 * @param purchaseTotals : total of the amt with out gift card
 * @param taxService : tax details
 */

function TaxationRequest(Basket : dw.order.LineItemCtnr,billTo : Object,shipTo : Object,card : Object,shipFrom : Object,itemArray: Array,itemMap : dw.util.HashMap,purchaseTotals : Object,taxService : Object)
{
    // read pipeline dictionary input parameter
    var reasonCode : Number;
	var basket = Basket;
		
	if((basket == null)){
		Logger.error("Please provide a Basket!");
		return {error:true};
	}
	
	var billToObject = billTo;
	var shipToObject = shipTo;
	var cardObject = card;
	var purchaseObject = purchaseTotals;
	var itemArray : Array = itemArray;
	var itemMap = itemMap;
	var shipFrom = shipFrom;
	var taxService = taxService;
	
	var csReference  = webreferences.CyberSourceTransaction;
	var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	
	// create request body
	var taxationRequest = new csReference.RequestMessage();
	
	CybersourceHelper.addTaxRequest(taxationRequest,billToObject,shipToObject,purchaseObject,cardObject,shipFrom,taxService,itemArray,basket.UUID);
	var taxationResponse = null;
	// send request
	try{
		var dwsvc		= require ("dw/svc");
		var service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		taxationResponse = service.call(taxationRequest);
	}catch(e){
		Logger.error("[libCybersource2.ds] Error in taxation request ( {0} )",e.message);
		 return {error:true, errorMsg:e.message};
	}
	
	if(empty(taxationResponse) || taxationResponse.status != "OK"){
		 return {error:true, errorMsg: taxationResponse.status};
	}
	taxationResponse = taxationResponse.object;
		var taxationObject = {};
	taxationObject["response"] = taxationResponse;
	taxationObject["Decision"] = taxationResponse.decision;
	// in case of success update basket
	if(taxationResponse.decision == "ACCEPT"){
		var resItem;
		for each(resItem in taxationResponse.taxReply.item)
		{
			var lineItem : dw.order.ProductLineItem =  itemMap.get(resItem.id.toString());
			var itemTax : dw.value.Money = new dw.value.Money(new Number(resItem.totalTaxAmount),basket.currencyCode);
			lineItem.setTax(itemTax);
			var taxRate : Number = 0.00;
			//lineItem.setGrossPrice(lineItem.netPrice.add(itemTax));
			
			//*****************************************************************//
			// An issue with this code incorrectly updates the line items and the order totals in the basket by ignoring the
			// discount ï¿½  resulting in an order total higher than it should be. 
			// This block of code fix is used to accumulate the gross price of line item's adjusted/discounted price and item tax in the basket.
			// And update the basket after accumulating all line items gross price and taxes. 
			//    
			//*****************************************************************//
			
			if( lineItem instanceof dw.order.ProductLineItem) 
			{
				if(!lineItem.bonusProductLineItem)
				{
					if(!empty(lineItem.proratedPrice) && lineItem.proratedPrice.value != 0)
					{
						taxRate = itemTax.value/lineItem.proratedPrice.value;
					}
					lineItem.updateTax(taxRate,lineItem.proratedPrice);
					//	lineItem.setGrossPrice(lineItem.proratedPrice.add(itemTax));
				} 
				else
				 {
					// tax is not getting calculated for bonus product which is updating bonus line item's tax as /NA. it has the direct impact on basket totals.
					// Resolution - update line item tax with 0 which will resolve the tax calculation N/A for bonus line items.   
					lineItem.updateTax(0);
				}
			} 
			else if( lineItem instanceof dw.order.ShippingLineItem )
		 	{
		 		if(!empty(lineItem.adjustedNetPrice) && lineItem.adjustedNetPrice.value != 0)
				{
					taxRate = itemTax.value/lineItem.adjustedNetPrice.value;
				}
				lineItem.updateTax(taxRate,lineItem.adjustedNetPrice);
				//	lineItem.setGrossPrice(lineItem.adjustedNetPrice.add(itemTax));
			} 
			else 
			{
				if(!empty(lineItem.netPrice) && lineItem.netPrice.value != 0)
				{
					taxRate = itemTax.value/lineItem.netPrice.value;
				}
				lineItem.updateTax(taxRate,lineItem.netPrice);
				//	lineItem.setGrossPrice(lineItem.netPrice.add(itemTax));
			}

		}
		taxationObject["totalTaxAmount"] = taxationResponse.taxReply.totalTaxAmount;
		basket.updateTotals();
		
		reasonCode = taxationResponse.reasonCode;
	}else if(taxationResponse.decision == "REJECT"){
		var missingFields = "";
		var invalidFields = "";
		if(null != taxationResponse.missingField){
			for(var i : Number = 0; i < taxationResponse.missingField.length; i++){
				missingFields += taxationResponse.missingField[i];
			}
		}
		if(null != taxationResponse.invalidField){
			for(var i : Number = 0; i < taxationResponse.invalidField.length; i++){
				invalidFields += taxationResponse.invalidField[i];
			}
		}
		Logger.error("[TaxFacade.ds] Taxation request REJECTED (ReasonCode {0} ). \nRequestToken: {1} \nMissing Fields: {2} \nInvalid Fields: {3}",taxationResponse.reasonCode,taxationResponse.requestToken,missingFields,invalidFields);
		reasonCode = taxationResponse.reasonCode;
	}else if(taxationResponse.decision == "ERROR"){
		Logger.error("[TaxFacade.ds] Taxation request ERROR (ReasonCode {0} ). \nRequestToken: {1}",taxationResponse.reasonCode,taxationResponse.requestToken);
		reasonCode = taxationResponse.reasonCode;
	}
		taxationObject["reasonCode"] = taxationResponse.reasonCode;
	if(reasonCode == 100){
		return {success:true, response:taxationObject};
	}else{
		 return {error:true, errorMsg:'Reason code as '+reasonCode};
	}
	
    return {success:true, response:taxationObject};
}

module.exports = {
	TaxationRequest: TaxationRequest
}