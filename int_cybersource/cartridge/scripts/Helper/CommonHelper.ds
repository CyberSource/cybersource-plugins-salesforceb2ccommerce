'use strict';
var Logger = dw.system.Logger.getLogger('Cybersource');
var StringUtils = require('dw/util/StringUtils');
var Money = require('dw/value/Money');
var Site = require('dw/system/Site');
var PaymentInstrument = require('dw/order/PaymentInstrument');
var ShipTo_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_ShipTo_Object');
var BillTo_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_BillTo_Object');
var Item_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_Item_Object');
var PurchaseTotals_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_PurchaseTotals_Object');
var ArrayList = require('dw/util/ArrayList');
var Resource = require('dw/web/Resource');
/**
 * Sets the purchasable item amount, does not includes the gift card amount.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
 
function CreateCybersourcePurchaseTotalsObject(Basket : dw.order.LineItemCtnr) {
	var basket = Basket;
	//**************************************************************************//
	// Check if Basket exists
	//**************************************************************************//
	if(basket == null){
		Logger.error("Please provide a Basket!");
		return {error:true};
	}
	var purchaseObject = new PurchaseTotals_Object();
	var amount = new Money(0,basket.currencyCode);
	var ccPaymentInstruments = basket.getPaymentInstruments();
	for each (var pi in ccPaymentInstruments) {
		if(!pi.paymentMethod.equals("GIFT_CERTIFICATE"))
    	{
    		amount = amount.add(pi.paymentTransaction.amount);
    	}
	}
	purchaseObject.setCurrency(amount.currencyCode);
	purchaseObject.setGrandTotalAmount(StringUtils.formatNumber(amount.value,"000000.00","en_US"));
	
	return {success:true, purchaseTotals: purchaseObject};
}

/**
 * On basis of boolean variable , bill to address object is populated either from basket or shipping address
 * @param formType : String variable can hold value like subscription,billing,paymentinstruments.
 * @param ReadFromBasket : true if value needs to be read from basket or order else false.
 */

function CreateCyberSourceBillToObject(Basket : dw.order.LineItemCtnr, ReadFromBasket : Boolean)
{
	var billToObject = new BillTo_Object();
	
	if(ReadFromBasket)
	{
		var basket = Basket;
		var billingAddress = basket.billingAddress;
		var shippingAddress = basket.defaultShipment.shippingAddress;

		if( !empty(billingAddress)&&!empty(basket) ) {			
			/*This if condition checks if billingAddress.address1 is present only for V.Me
			* create the billToObject using billingAddress else it will create billToObject using shippingAddress 
			*/			  
			if(!empty(billingAddress.address1)){
				billToObject.setFirstName  ( billingAddress.firstName );
				billToObject.setLastName   ( billingAddress.lastName );
				billToObject.setStreet1    ( billingAddress.address1 );
				billToObject.setStreet2    ( billingAddress.address2 );
				billToObject.setCity       ( billingAddress.city );
				billToObject.setState      ( billingAddress.stateCode );
				billToObject.setPostalCode ( billingAddress.postalCode );
				billToObject.setCountry    ( billingAddress.countryCode );
				billToObject.setPhoneNumber( billingAddress.phone );
				billToObject.setEmail      ( basket.customerEmail );
			} else {
				billToObject.setFirstName  ( shippingAddress.firstName );
				billToObject.setLastName   ( shippingAddress.lastName );
				billToObject.setStreet1    ( shippingAddress.address1 );
				billToObject.setStreet2    ( shippingAddress.address2 );
				billToObject.setCity       ( shippingAddress.city );
				billToObject.setState      ( shippingAddress.stateCode );
				billToObject.setPostalCode ( shippingAddress.postalCode );
				billToObject.setCountry    ( shippingAddress.countryCode );
				billToObject.setPhoneNumber( shippingAddress.phone );
				if (customer.registered) {
					billToObject.setEmail      ( customer.profile.email );
				} else { 
					billToObject.setEmail      ( "test@test.com" );
				}
			}
			if (!empty(basket.getCustomerNo())) {
				billToObject.setCustomerID(basket.getCustomerNo());
			}
		}
		else
		{
			billToObject.setFirstName  ( shippingAddress.firstName );
			billToObject.setLastName   ( shippingAddress.lastName );
			billToObject.setStreet1    ( shippingAddress.address1 );
			billToObject.setStreet2    ( shippingAddress.address2 );
			billToObject.setCity       ( shippingAddress.city );
			billToObject.setState      ( shippingAddress.stateCode );
			billToObject.setPostalCode ( shippingAddress.postalCode );
			billToObject.setCountry    ( shippingAddress.countryCode );
			billToObject.setPhoneNumber( shippingAddress.phone );
			if (customer.registered) {
				billToObject.setEmail      ( customer.profile.email );
			} else { 
				billToObject.setEmail      ( "test@test.com" );
			}
		}
	}
	else
	{
		var billAddrForm =  session.forms.billing.billingAddress;
		
		billToObject.setFirstName  ( billAddrForm.addressFields.firstName.value);
		billToObject.setLastName   ( billAddrForm.addressFields.lastName.value);
		billToObject.setStreet1    ( billAddrForm.addressFields.address1.value);
		billToObject.setStreet2    ( billAddrForm.addressFields.address2.value);
		billToObject.setCity       ( billAddrForm.addressFields.city.value);
		billToObject.setState      ( billAddrForm.addressFields.states.state.value);
		billToObject.setPostalCode ( billAddrForm.addressFields.postal.value);
		billToObject.setCountry    ( billAddrForm.addressFields.country.value);
		billToObject.setPhoneNumber( billAddrForm.addressFields.phone.value);
		if (customer.registered) {
			billToObject.setCustomerID(customer.ID);
			billToObject.setEmail      ( customer.profile.email );
		} else { 
			billToObject.setEmail('test@test.com');
		}
	
	}
	billToObject.setIpAddress(GetIPAddress());

    return {success:true, billTo:billToObject};
}

/**
 * On basis of form type, bill to address object is populated.
 * @param formType : String variable can hold value like subscription,billing,paymentinstruments.
 */
 
 
function CreateCyberSourceBillToObject_UserData(formType : String)
{
	var title, firstName, lastName, street1, city, state, postalCode, country, phoneNumber, email, dob, ipAddress;
	
		switch(formType){
			case "subscription" :
					title = session.forms.subscription.title.htmlValue;
					firstName = session.forms.subscription.firstName.htmlValue;
					lastName = session.forms.subscription.lastName.htmlValue;
					street1 = session.forms.subscription.street1.htmlValue;
					city = session.forms.subscription.city.htmlValue;
					state = session.forms.subscription.state.htmlValue;
					postalCode = session.forms.subscription.postalCode.htmlValue;
					country = session.forms.subscription.country.htmlValue;
					phoneNumber = session.forms.subscription.phoneNumber.htmlValue;
					email = session.forms.subscription.email.htmlValue;
					dob = session.forms.subscription.dateOfBirth.htmlValue;
					ipAddress = session.forms.subscription.ipAddress.htmlValue;
			break;
			case "billing" :
					firstName =session.forms.billing.billingAddress.addressFields.firstName.value;
					lastName =session.forms.billing.billingAddress.addressFields.lastName.value;
					city = session.forms.billing.billingAddress.addressFields.city.value;
					country = session.forms.billing.billingAddress.addressFields.country.value;
					email = session.forms.billing.billingAddress.email.emailAddress.value;
					phoneNumber = session.forms.billing.billingAddress.addressFields.phone.value;
					postalCode =session.forms.billing.billingAddress.addressFields.postal.value;
					state = session.forms.billing.billingAddress.addressFields.states.state.value;
					street1 = session.forms.billing.billingAddress.addressFields.address1.value;
					title = "";
					dob = "";
					ipAddress = GetIPAddress();
			break;
			case "paymentinstruments" :
					firstName =session.forms.paymentinstruments.creditcards.address.firstname.value;
					lastName =session.forms.paymentinstruments.creditcards.address.lastname.value;
					city = session.forms.paymentinstruments.creditcards.address.city.value;
					country = ""+session.forms.paymentinstruments.creditcards.address.country.value;
					email = session.forms.paymentinstruments.creditcards.address.email.emailAddress.value;
					phoneNumber = session.forms.paymentinstruments.creditcards.address.phone.value;
					postalCode =session.forms.paymentinstruments.creditcards.address.postal.value;
					state = session.forms.paymentinstruments.creditcards.address.states.state.value;
					street1 = session.forms.paymentinstruments.creditcards.address.address1.value;
					title = "";
					dob = "";
					ipAddress = GetIPAddress();
			break;
		}
					var billToObject = new BillTo_Object();
					billToObject.setTitle(title);
					billToObject.setFirstName(firstName);
					billToObject.setLastName(lastName);
					billToObject.setStreet1(street1);
					billToObject.setCity(city);
					billToObject.setState(state);
					billToObject.setPostalCode(postalCode);
					billToObject.setCountry(country);
					billToObject.setPhoneNumber(phoneNumber);
					billToObject.setEmail(email);
					billToObject.setIpAddress(ipAddress);
					billToObject.setDateOfBirth(dob);
					
					return {success:true, billTo: billToObject};
}


/** 
 * Determines if the basket already contains a payment instrument and removes it from the basket except gift certificate.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
function removeExistingPaymentInstruments( basket : dw.order.LineItemCtnr)
{	
	var ccPaymentInstrs = basket.getPaymentInstruments();
	
	// get all credit card payment instruments
	
	var iter : Iterator = ccPaymentInstrs.iterator();
	var existingPI = null;

	// remove them
	while( iter.hasNext() )
	{
		existingPI = iter.next();
		if(existingPI.paymentMethod.equals(PaymentInstrument.METHOD_GIFT_CERTIFICATE)){
		 continue;
		}else{
			basket.removePaymentInstrument( existingPI );
		}
	}
}

/** 
 * Determines if the basket already contains a payment instrument and removes it from the basket except gift certificate and paymentType. 
 * instrument and removes it from the basket.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
function removeExistingPaymentInstrumentsExceptPaymentType( basket : dw.order.LineItemCtnr, paymentType)
{	
	var ccPaymentInstrs = basket.getPaymentInstruments();
	var iter : Iterator = ccPaymentInstrs.iterator();
	var existingPI = null;

	// remove them
	while( iter.hasNext() )
	{
		existingPI = iter.next();
		if(existingPI.paymentMethod.equals(PaymentInstrument.METHOD_GIFT_CERTIFICATE) || existingPI.paymentMethod.equals(paymentType)){
		 continue;
		}else{
			basket.removePaymentInstrument( existingPI );
		}
	}
}

/**
 * Sets cybersource item object using lineitem, having data related to product, product price,quantity.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
 
function CreateCybersourceItemObject(Basket : dw.order.LineItemCtnr)
{
	var basket = Basket;
	var lineItems = basket.allLineItems.iterator();
	var itemObjects = new ArrayList();
	var count = 1;
	while(lineItems.hasNext())
	{
		var lineItem = lineItems.next();
		var itemObject = new Item_Object();
		if(lineItem instanceof dw.order.ProductLineItem)
		{
			itemObject.setUnitPrice(StringUtils.formatNumber(lineItem.proratedPrice.value,"000000.00","en_US"));
			itemObject.setQuantity(lineItem.quantityValue);
			itemObject.setProductCode("default");
			itemObject.setProductName(lineItem.productName);
			itemObject.setProductSKU(lineItem.productID);
			itemObject.setTaxAmount(StringUtils.formatNumber(lineItem.adjustedTax.value,"000000.00","en_US"));
			itemObject.setId(count);
		}
		else if(lineItem instanceof dw.order.GiftCertificateLineItem)
		{
			itemObject.setUnitPrice(StringUtils.formatNumber(lineItem.grossPrice.value,"000000.00","en_US"));
			itemObject.setQuantity(1);
			itemObject.setProductCode("GIFT_CERTIFICATE");
			itemObject.setProductName("GIFT_CERTIFICATE");
			itemObject.setProductSKU("GIFT_CERTIFICATE");
			itemObject.setTaxAmount(StringUtils.formatNumber(0,"000000.00","en_US"));
			itemObject.setId(count);
		}
		else if(lineItem instanceof dw.order.ShippingLineItem)
		{
			itemObject.setUnitPrice(StringUtils.formatNumber(lineItem.adjustedPrice.value,"000000.00","en_US"));
			itemObject.setQuantity(1);
			itemObject.setProductCode(lineItem.ID);
			itemObject.setProductName(lineItem.ID);
			itemObject.setProductSKU(lineItem.ID);
			itemObject.setTaxAmount(StringUtils.formatNumber(lineItem.adjustedTax.value,"000000.00","en_US"));
			itemObject.setId(count);
		}
		else if(lineItem instanceof dw.order.ProductShippingLineItem)
		{
			itemObject.setUnitPrice(StringUtils.formatNumber(lineItem.adjustedPrice.value,"000000.00","en_US"));
			itemObject.setQuantity(1);
			itemObject.setProductCode("SHIPPING_SURCHARGE");
			itemObject.setProductName("SHIPPING_SURCHARGE");
			itemObject.setProductSKU("SHIPPING_SURCHARGE");
			itemObject.setTaxAmount(StringUtils.formatNumber(lineItem.adjustedTax.value,"000000.00","en_US"));
			itemObject.setId(count);
		}
		if(!(lineItem instanceof dw.order.PriceAdjustment))
		{
			count = count+1;
			itemObjects.add(itemObject);	
		}
	}
	
    return {success:true, items:itemObjects};
}

/**
 * Sets currency and amount in purchase object.
 * @param currency : Currency of the site
 * @param amount : purchasable amount 
 */
 
 
function CreateCyberSourcePurchaseTotalsObject_UserData(currency:String,amount:String)
{  
	var purchaseObject : PurchaseTotals_Object = new PurchaseTotals_Object();
	
	if(empty(currency))
		currency = Site.getCurrent().getDefaultCurrency();
	
	purchaseObject.setCurrency(currency);

	var amount = new Number(amount);
	if(!empty(amount)){
		if(isNaN(amount)){
			return {error:true, errorCode : "102", errorMsg : "Amount value is invalid"};
		}
		purchaseObject.setGrandTotalAmount(StringUtils.formatNumber(amount.valueOf(),"000000.00","en_US"));
	}
	else{
		return {error:true, errorCode : "101", errorMsg : "Amount value is missing"};
	}
    
    return {success:true, purchaseTotals:purchaseObject};
}

/**
 * Sets Shipping city,state,zipcode and country from site preference.
 */
 

function CreateCybersourceShipFromObject()
{
	var ShipFrom_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_ShipFrom_Object');
	var shipFrom = new ShipFrom_Object();

	shipFrom.setCity(Site.getCurrent().getCustomPreferenceValue("CsShipFromCity"));
    shipFrom.setState(Site.getCurrent().getCustomPreferenceValue("CsShipFromStateCode"));
    shipFrom.setPostalCode(Site.getCurrent().getCustomPreferenceValue("CsShipFromZipCode"));
    shipFrom.setCountry(Site.getCurrent().getCustomPreferenceValue("CsShipFromCountryCode"));
       
    return {success:true, shipFrom: shipFrom};
}


/**
 * Creates shipping address and sets the shipping method.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
 
function CreateCybersourceShipToObject(Basket : dw.order.LineItemCtnr)
{
	var basket = Basket;
	
	var shipToObject = new ShipTo_Object();
	var shippingAddress = basket.defaultShipment.shippingAddress;
	var shippingMethod = basket.defaultShipment.shippingMethod;
	var it : Iterator = basket.getShipments().iterator();
	// TODO: This code purposely does not handle the case of
	// multiple shipments per order
	if(shippingAddress == null){
		while(it.hasNext()){
			var shipment = it.next();
			shippingAddress = shipment.getShippingAddress();
			shippingMethod = shipment.getShippingMethod();
			if(shippingAddress != null){
				break;
			}
		}
	}
	if( !empty(shippingAddress) && !empty(basket) ) {
		shipToObject.setFirstName(shippingAddress.firstName);
		shipToObject.setLastName(shippingAddress.lastName);
		shipToObject.setStreet1(shippingAddress.address1);
		shipToObject.setStreet2(shippingAddress.address2);
		shipToObject.setCity(shippingAddress.city);
		shipToObject.setState(shippingAddress.stateCode);
		shipToObject.setPostalCode(shippingAddress.postalCode);
		shipToObject.setCountry(shippingAddress.countryCode);
		shipToObject.setPhoneNumber(shippingAddress.phone);
		shipToObject.setEmail(basket.customerEmail);		
		//*****************************************************//
		// ShippingMethod custom attribute CybersourceShippingID is used to fetch Cybersource Shipping method i.e. oneday, sameday, twoday etc.
		// if merchant does not specify Cybersource Shipping Id whilie creating shipping methods within Business Manager, the switch statement
		// fetch default shipping method available in Demandware's Site Genesis.  
		//*****************************************************//
		if( !empty(shippingMethod) ) 
		{
			if ( !empty(shippingMethod.custom.CybersouceShippingID.value) ) 
			{
				shipToObject.setShippingMethod(shippingMethod.custom.CybersouceShippingID.value);
			} 
			else
			{
				switch (shippingMethod.displayName)
					{									
						case "Overnight":
						shipToObject.setShippingMethod("oneday");						
						break;
						case "Next Day":
						shipToObject.setShippingMethod("oneday");						
						break;
						case "2-Day Express":
						shipToObject.setShippingMethod("twoday");						
						break;	
						case "Super Saver":
						shipToObject.setShippingMethod("threeday");						
						break;		
						case "Ground":
						shipToObject.setShippingMethod("other");						
						break;			
						case "None":
						shipToObject.setShippingMethod("none");						
						break;
						default:
						shipToObject.setShippingMethod("N/A");						
						break;	
					}				
			}			
		} 
		else {
			shipToObject.setShippingMethod("N/A");
		}
	}
	
    return {success:true, shipTo:shipToObject};
}

/**
 * This function appends shipping totals and basket totals to string (adjustedMerchandizeTotalPrice includes order level price adjustments). 
 * Basket Net total checked as to catch all for both taxation policies not including taxe.	
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
 
function CreateCartStateString(Basket : dw.order.LineItemCtnr)
{
	var basket = Basket;
	var cartStateString = "";
	var surcharge = false;
	
	var productLineItems = basket.getAllProductLineItems().iterator();
	while(productLineItems.hasNext())
	{
		var productLineItem = productLineItems.next();	
		if(null !== productLineItem.shippingLineItem && productLineItem.shippingLineItem.surcharge && basket.adjustedShippingTotalTax.value==0)
		{
			surcharge = true;
		}
		cartStateString += productLineItem.productID +";"+ productLineItem.quantityValue +";"+ productLineItem.adjustedPrice + "|";
	}	
	
	// Append shipping totals and basket totals to string (adjustedMerchandizeTotalPrice includes order level price adjustments). Basket Net total checked as catch all for both taxation policies not including taxe.
	
	cartStateString += basket.adjustedShippingTotalPrice.valueOrNull + "|" + basket.adjustedMerchandizeTotalPrice.valueOrNull + "|" + basket.totalNetPrice.valueOrNull + "|" + basket.defaultShipment.shippingAddress.stateCode + "|" + basket.defaultShipment.shippingAddress.city.toLowerCase() + "|" + basket.defaultShipment.shippingAddress.countryCode + "|" + basket.defaultShipment.shippingAddress.postalCode + "|";
	
	// Check if the cartStateString in session is the same as the newly calculated cartStateString. 
	// If the strings are the same, then the cart has not changed and tax calculation will be skipped
	Logger.debug("CartStateStrings: ( {0}----{1} )",session.custom.cartStateString,cartStateString);
	if( !empty(session.custom.cartStateString) && session.custom.cartStateString == cartStateString && !surcharge){
		return {error:true};
	}

    return {success:true, CartStateString:cartStateString};
}

/**
 * If debug is true then requested data is printed in logs. 
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 * @param OrderNo : No of the order
 * @param request : http request
 * @param response : http response
 * @param bill To : billing address of the order
 * @param ship to : Shipping address of the order
 * @param card : card details
 * @param shipFrom : site preference shipping details
 * @param itemArray : Array of Items purchased
 * @param purchaseTotals : total of the amt with out gift card
 * @param taxService : tax details
 */
function Debug(OrderNo : String,request : Object,response : Object,Basket : dw.order.LineItemCtnr,billTo : Object,shipTo : Object,card : Object,shipFrom : Object,itemArray: Array,itemMap : dw.util.List,purchaseTotals : Object,taxService : Object) : Number
{
	
	var billToObject: BillTo_Object = billTo;
	var shipToObject: ShipTo_Object = shipTo;
	var cardObject: Card_Object = card;
	var purchaseObject: PurchaseTotals_Object = purchaseTotals;
	var itemArray : Array = itemArray;
	var itemMap : List = itemMap;
	var shipFrom : ShipFrom_Object = shipFrom;
	var taxService : TaxService_Object = taxService;
	var basket : LineItemCtnr = Basket;	
	var orderno : String = OrderNo;	
    var debug : Boolean = Site.getCurrent().getCustomPreferenceValue("CsDebugCybersource");
	
    if(debug == true && orderno != null){
     var co : CustomObject = CustomObjectMgr.getCustomObject("cybersourceDebug",orderno);
     	if(co == null){
     		co = CustomObjectMgr.createCustomObject("cybersourceDebug",orderno);
     		var txrq : String = getRequestString(billToObject,shipToObject,purchaseObject,cardObject,shipFrom,taxService,itemArray,basket.UUID);
     		var txrsp : String = getResponseString(response);
     		co.custom.TaxRequest=txrq;
     		co.custom.TaxResponse=txrsp;
	   	}
	   	
    } 
    return {success:true};
}

/**
 * Creates String for the input object.
 * @param obj : Object.
 */ 
 
function getResponseString(obj : Object){
	var ret : String = new String();
	ret += "reasonCode: " + obj.reasonCode;
	ret += "\n"
	ret += "currency: " + obj.taxReply.currency;
	ret += "\n"
	ret += "grandTotalAmount: " + obj.taxReply.grandTotalAmount;
	ret += "\n"
	ret += "totalCityTaxAmount: " + obj.taxReply.totalCityTaxAmount;
	ret += "\n"
	ret += "city: " + obj.taxReply.city;
	ret += "\n"
	ret += "totalCountyTaxAmount: " + obj.taxReply.totalCountyTaxAmount;
	ret += "\n"
	ret += "county: " + obj.taxReply.county;
	ret += "\n"
	ret += "totalDistrictTaxAmount: " + obj.taxReply.totalDistrictTaxAmount;
	ret += "\n"
	ret += "totalStateTaxAmount: "  + obj.taxReply.totalStateTaxAmount;
	ret += "\n"
	ret += "state: " + obj.taxReply.state;
	ret += "\n"
	ret += "totalTaxAmount: " + obj.taxReply.totalTaxAmount;
	ret += "\n"
	ret += "postalCode: " + obj.taxReply.postalCode;
	ret += "\n"
	if(obj.decision == "ACCEPT"){
		var resItem;
		ret += "decision: ACCEPT";
		ret += "\n"
		ret += "------------Item Tax ------------";
		ret += "\n"
		for each(resItem in obj.taxReply.item){
			ret += "	item id: " + resItem.id;
			ret += "\n"
			ret += "	item cityTaxAmount: " + resItem.cityTaxAmount;
			ret += "\n"
			ret += "	item countyTaxAmount: " + resItem.countyTaxAmount;
			ret += "\n"
			ret += "	item districtTaxAmount: " + resItem.districtTaxAmount;
			ret += "\n"
			ret += "	item stateTaxAmount: " + resItem.stateTaxAmount;
			ret += "\n"
			ret += "	item totalTaxAmount: " + resItem.totalTaxAmount;
			ret += "\n"
	}
	}
return ret
}

/**
 * Requested string is gievn in particular format
 * @param bill To : billing address of the order
 * @param ship to : Shipping address of the order
 * @param card : card details
 * @param shipFrom : site preference shipping details
 * @param items : Array of Items purchased
 * @param purchase : total of the amt with out gift card
 * @param taxService : tax details
 * @param refCode : Refference code for the request
 */

function getRequestString(billTo, shipTo, purchase, card, shipFrom, taxService, items : Array, refCode : String){
var ret : String = new String();
ret = "Merchant Reference Code : " + refCode;
ret += "\n";
for(name in billTo){
		if(name.indexOf("set") == -1 && name.indexOf("get") == -1){
				value = billTo[name];
				if(value != ""){
					ret += "billto." + name + " :" + value;
					ret +="\n";
				}
			}
		}
for(name in shipTo){
		if(name.indexOf("set") == -1 && name.indexOf("get") == -1){
				value = shipTo[name];
				if(value != ""){
					ret += "shipto." + name + " :" + value;
					ret +="\n";
				}
			}
		}

for(name in purchase){
		if(name.indexOf("set") == -1 && name.indexOf("get") == -1){
				value = purchase[name];
				if(value != ""){
					ret += "purchase." + name + " :" + value;
					ret +="\n";
				}
			}
		}
for(name in card){
		if(name.indexOf("set") == -1 && name.indexOf("get") == -1){
				value = card[name];
				if(value != ""){
					ret += "card." + name + " :" + value;
					ret +="\n";
				}
			}
		}
for(name in shipFrom){
		if(name.indexOf("set") == -1 && name.indexOf("get") == -1){
				value = shipFrom[name];
				if(value != ""){
					ret += "shipfrom." + name + " :" + value;
					ret +="\n";
				}
			}
		}
for(name in taxService){
		if(name.indexOf("set") == -1 && name.indexOf("get") == -1){
				value = taxService[name];
				if(value != ""){
					ret += "taxService." + name + " :" + value;
					ret +="\n";
				}
			}
		}
return ret;
}

/**
 * Updates the shipping address with the standard shipping address or the billing address.
 * @param StandardizedAddress : Standard address.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 * @param useAsBillingAddress : Boolean variable if true then shipping address is over ridden by billing address.
 */
function UpdateOrderShippingAddress(StandardizedAddress : Object,Basket : dw.order.LineItemCtnr,useAsBillingAddress : Boolean)
{
	var Transaction = require('dw/system/Transaction');
	var shippingAddress = Basket.defaultShipment.shippingAddress;	
	var stdAddress = StandardizedAddress;
	Transaction.wrap(function () {
		shippingAddress.setAddress1(stdAddress.address1);				
		shippingAddress.setAddress2(stdAddress.address2);			
		//shippingAddress.setPhone(stdAddress.phone);			
		shippingAddress.setCity(stdAddress.city);			
		shippingAddress.setStateCode(stdAddress.state);			
		shippingAddress.setCountryCode(stdAddress.country);			
		shippingAddress.setPostalCode(stdAddress.postalCode);			
		shippingAddress.setFirstName(stdAddress.firstName);			
		shippingAddress.setLastName(stdAddress.lastName);
		
		if(useAsBillingAddress == true)
		{
			var billingAddress : OrderAddress = Basket.billingAddress;
			billingAddress.setAddress1(stdAddress.address1);
			billingAddress.setAddress2(stdAddress.address2);
			billingAddress.setCity(stdAddress.city);
			billingAddress.setStateCode(stdAddress.state);			
			billingAddress.setCountryCode(stdAddress.country);			
			billingAddress.setPostalCode(stdAddress.postalCode);			
			billingAddress.setFirstName(stdAddress.firstName);			
			billingAddress.setLastName(stdAddress.lastName);	
		}
	});
   return {success:true};
}

/**
 * Updates tax if Gift certificate/card amount is present inorder total.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
 
function UpdateTaxForGiftCertificate(Basket)
{
	var basket = Basket;	
	if(basket == null) {	
		return {error:true};
	}
	try{		
		if( basket.getGiftCertificateLineItems().size() >0)
		 {
		 	var shipments = basket.getShipments().iterator();
				while(shipments.hasNext())
				{
					var shipment : Shipment = shipments.next();							
					var shipmentLineItems : Iterator = shipment.getAllLineItems().iterator();
					while(shipmentLineItems.hasNext())
					{
						var lineItem : LineItem = shipmentLineItems.next();	
						if(lineItem.tax.value>0)
						{						
							continue;
						} 
						else
						{
							lineItem.updateTax(0);
						}			
					 }
				}
		 }			
		basket.updateTotals();
	}catch(e){			
		Logger.error("[CommonHelper.ds] Error in giftcertificate tax updation ( {0} )",e.message);
		return {error:true, errorMsg:e.message};
	}   

    return {success:true};
}

/**
 * Calculates amount which customer needs to pay this amount does not include Gift certificate/card amount. 
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
 
function calculateNonGiftCertificateAmount( lineItemCtnr : dw.order.LineItemCtnr ) 
{
	
	var productTotal = lineItemCtnr.getAdjustedMerchandizeTotalPrice();
	var shippingTotal = lineItemCtnr.getAdjustedShippingTotalPrice();
	var shippingTax   = lineItemCtnr.getAdjustedShippingTotalTax();
	var totalTax      = lineItemCtnr.getAdjustedMerchandizeTotalTax();
	var totalAmount   = new Money(0,lineItemCtnr.currencyCode);
	
	totalAmount=totalAmount.add(productTotal);
	if(shippingTotal.value!=0){
    	totalAmount=totalAmount.add(shippingTotal);
	}
	if(shippingTax.value !=0){
		totalAmount=totalAmount.add(shippingTax);
	}
	if(totalTax.value !=0){
   		totalAmount=totalAmount.add(totalTax);
	}
	
	// the total redemption amount of all gift certificate payment instruments in the basket
	var giftCertTotal = new Money( 0.0, lineItemCtnr.currencyCode );

	// get the list of all gift certificate payment instruments 
	var gcPaymentInstrs = lineItemCtnr.getGiftCertificatePaymentInstruments();
	var iter = gcPaymentInstrs.iterator();
	var orderPI = null;

	// sum the total redemption amount
	while( iter.hasNext() )
	{
		orderPI = iter.next();
		giftCertTotal = giftCertTotal.add( orderPI.getPaymentTransaction().getAmount() );
	}

	// get the order total
	var orderTotal = totalAmount;

	// calculate the amount to charge for the payment instrument
	// this is the remaining open order total which has to be paid
	var amountOpen = orderTotal.subtract( giftCertTotal );

	// return the open amount
	return amountOpen;
}

/**
*Get Request IP Address
*/
function GetIPAddress() {
	return request.httpHeaders["x-is-remote_addr"];
}


/**
* Validates billing address of the user.
*/
function validateBillingAddress() {
	
	var result = {success : true};
	var firstName =(session.forms.billing.billingAddress.addressFields.firstName.value); 
	var lastName =(session.forms.billing.billingAddress.addressFields.lastName.value);
	var city = (session.forms.billing.billingAddress.addressFields.city.value);
	var country = (session.forms.billing.billingAddress.addressFields.country.value);
	var email = (session.forms.billing.billingAddress.email.emailAddress.value);
	var phoneNumber = (session.forms.billing.billingAddress.addressFields.phone.value);
	var postalCode = (session.forms.billing.billingAddress.addressFields.postal.value);
	var state = (session.forms.billing.billingAddress.addressFields.states.state.value);
	var street1 = (session.forms.billing.billingAddress.addressFields.address1.value);
	var errorMsg : Array = new Array();
	   					
	if(!validFieldData(firstName,0,50)) {
		errorMsg.push(Resource.msg("address.firstname.missing", "forms", null));
	}
	if(!validFieldData(lastName,0,50)) {
		errorMsg.push(Resource.msg("address.lastname.missing", "forms", null));
		}
	if(!validFieldData(street1,0,50)) {
		errorMsg.push(Resource.msg("resource.addresserror", "forms", null));
		}
	if(!validFieldData(city,2,50)) {
		errorMsg.push(Resource.msg("address.city.missing", "forms", null));
	}
	if(!validFieldData(postalCode,5,10)) {
		errorMsg.push(Resource.msg("resource.errorzip", "forms", null));
	}
	else {
		var postalCodeVal = postalCode.match(/(^\d{5}(-\d{4})?$)|(^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Za-z]{1} *\d{1}[A-Za-z]{1}\d{1}$)/gi);
		if (empty(postalCodeVal) || postalCodeVal == '') {
			errorMsg.push(Resource.msg("resource.errorzip", "forms", null));
		}
	}
	if(!validFieldData(country,0,100)) {
		errorMsg.push(Resource.msg("address.country.missing", "forms", null));
	}
	if(!validFieldData(phoneNumber,0,20)) {
		errorMsg.push(Resource.msg("address.phone.missing", "forms", null));
	}
	if(validFieldData(email,0,50)) {
		var emailVal = email.match(/^[\w.%+-]+@[\w.-]+\.[\w]{2,6}$/gi);
		if (empty(emailVal) || emailVal == '') {
			errorMsg.push(Resource.msg("address.email.invalid", "forms", null));
		}
	}
	else {
		errorMsg.push(Resource.msg("address.email.invalid", "forms", null));
	}
	if(errorMsg.length > 0 ) {
	 var errormsg = errorMsg.join();
	 result = {error : true , errorMsg : errormsg }
	}
	return result;
}

function validFieldData(fieldValue : String,fieldMinlength : String ,fieldMaxlength : String) {
	if(!empty(fieldValue) && fieldValue.length >= fieldMinlength && fieldValue.length <= fieldMaxlength) {
		return true;
	}
	else {
		return false;
	}
}

/**
* Get saved card token of customer save card based on matched cardUUID
*/
function GetSubscriptionToken(cardUUID : String, CustomerObj : dw.customer.Customer) {
	var token=null;
	if(!empty(CustomerObj) && CustomerObj.authenticated && !empty(cardUUID)) {
		var wallet = CustomerObj.getProfile().getWallet();
		var paymentInstruments = wallet.getPaymentInstruments(dw.order.PaymentInstrument.METHOD_CREDIT_CARD);
		var creditCardInstrument;
		var instrumentsIter = paymentInstruments.iterator();
		while( instrumentsIter.hasNext() )
		{
			creditCardInstrument = instrumentsIter.next();
			//find token ID exists for matching payment card
			if ( creditCardInstrument.UUID.equals(cardUUID) && !empty(creditCardInstrument.getCreditCardToken()) ) {
				token = creditCardInstrument.getCreditCardToken();
				break;
			}
		}
	}
	return token;
}

/**
* Get request locale in format en-US basically replace _ with -
*/
function GetRequestLocale() {
	var locale ='default' ? "en-us" : request.locale.replace("_","-").toLowerCase();
	return locale;
}

/**
 * Function to create signature using HMAC256 algo, this funation usedthe secret key for the same.
 * @param dataToSign : Comma separated data.
 * @param secretKey : secretKey of the payment method defined in cybersource.
 */
 
function signedDataUsingHMAC256(dataToSign:String, secretKey:String){
		
		var signature;
		var mac = new dw.crypto.Mac(dw.crypto.Mac.HMAC_SHA_256);
		
		if(!empty(dataToSign) && !empty(secretKey)){ 
			 signature = dw.crypto.Encoding.toBase64(mac.digest(new dw.util.Bytes( dataToSign, "UTF-8" ),new dw.util.Bytes( secretKey, "UTF-8" ) ));
		}
   return signature;
}

module.exports = {
	CreateCybersourceShipFromObject : CreateCybersourceShipFromObject,
	CreateCyberSourceBillToObject : CreateCyberSourceBillToObject,
	CreateCybersourceShipToObject : CreateCybersourceShipToObject,
	CreateCybersourcePurchaseTotalsObject : CreateCybersourcePurchaseTotalsObject,
	CreateCyberSourcePurchaseTotalsObject_UserData : CreateCyberSourcePurchaseTotalsObject_UserData,
	CreateCyberSourceBillToObject_UserData : CreateCyberSourceBillToObject_UserData,
	CreateCybersourceItemObject : CreateCybersourceItemObject,
	UpdateOrderShippingAddress : UpdateOrderShippingAddress,
	CreateCartStateString : CreateCartStateString,
	UpdateTaxForGiftCertificate:UpdateTaxForGiftCertificate,
	Debug:Debug,
	validateBillingAddress : validateBillingAddress,
	removeExistingPaymentInstruments:removeExistingPaymentInstruments,
	removeExistingPaymentInstrumentsExceptPaymentType:removeExistingPaymentInstrumentsExceptPaymentType,
	GetIPAddress :GetIPAddress,
	GetSubscriptionToken: GetSubscriptionToken,
	GetRequestLocale:GetRequestLocale,
	signedDataUsingHMAC256:signedDataUsingHMAC256
}