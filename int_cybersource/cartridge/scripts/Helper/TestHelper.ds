'use strict';
var ArrayList = require('dw/util/ArrayList');
var Resource = require('dw/web/Resource');
var StringUtils = require('dw/util/StringUtils');
var BillTo_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_BillTo_Object'); 
var ShipTo_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_ShipTo_Object');
var PurchaseTotals_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_PurchaseTotals_Object');
var Card_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_Card_Object');
var MockLineItem_Object = require('int_cybersource/cartridge/scripts/Cybersource_UnitTesting/LineItemObject');
var libCybersource = require('int_cybersource/cartridge/scripts/cybersource/libCybersource');
var CommonHelper = require('int_cybersource/cartridge/scripts/Helper/CommonHelper');
/**
 * Creates testing billing address  for the application.
 */
function CreateCyberSourceBillToObject()
{
	var billToObject = new BillTo_Object();
	
	billToObject.setTitle("This is the Title");
	billToObject.setFirstName("Donald");
	billToObject.setLastName("Rivard");
	billToObject.setStreet1("131 Dartmouth Street");
	billToObject.setCity("Boston");
	billToObject.setState("MA");
	billToObject.setPostalCode("02116");
	billToObject.setCountry("US");
	billToObject.setPhoneNumber("777-777-7777");
	billToObject.setEmail("drivard@demandware.com");
	billToObject.setIpAddress(CommonHelper.GetIPAddress());
	billToObject.setDateOfBirth("19541217");
	billToObject.setSsn("000001234");
    return {success:true, billTo: billToObject};
}

/**
 * Creates testing shipping address  for the application.
 */
function CreateCyberSourceShipToObject()
{
   var shipToObject = new ShipTo_Object();
	shipToObject.setTitle("This is the Title");
	shipToObject.setFirstName("Donald");
	shipToObject.setLastName("Rivard");
	shipToObject.setStreet1("131 Dartmouth Streetd");
	shipToObject.setCity("Boston");
	shipToObject.setState("MA");
	shipToObject.setPostalCode("02116");
	shipToObject.setCountry("US");
	shipToObject.setPhoneNumber("777-777-7777");
	shipToObject.setEmail("drivard@demandware.com");
	shipToObject.setShippingMethod("Bills Shipping");

	return {success:true, shipTo: shipToObject};
}

/**
 * Creates the testing purchase Object where currency is passed in arguments for the application.
 * @param args : having currency value.
 */
function CreateCyberSourcePurchaseTotalsObject(args)
{  
    var purchaseObject = new PurchaseTotals_Object();
			
	/**
	* It is mandatory for all Vme services.
	* 
	**/ 
	if(undefined != args && args.currency) {
		purchaseObject.setCurrency(args.currency);
	} else {
		purchaseObject.setCurrency("USD");
	}
	/***
	 * It is mandatory for Vme confirm purchase (The actual total amount of an order required here), Vme Transaction Details, optional for all services
	 * 
	 **/
	if(undefined != args && args.amount){ 
		var amount : Number = new Number(args.amount);
	} else {
		var amount : Number = new Number("200.00");
	}
		
	purchaseObject.setGrandTotalAmount(StringUtils.formatNumber(amount.valueOf(),"000000.00","en_US"));
    return {success:true, purchaseTotals: purchaseObject};
}

/**
 * Creates the testing purchase Object for Alipay where currency is passed in arguments for the application.
 * @param args : having currency value.
 */
 
function CreateCyberSourcePurchaseTotalsObjectForAlipay(args)
{  
    var purchaseObject = new PurchaseTotals_Object();
	var alipayPaymentType : String = dw.system.Site.getCurrent().getCustomPreferenceValue('apPaymentType');	
	/**
	* It is mandatory for Alipay services.
	* 
	**/ 
	if(undefined != args && args.currency) {
		purchaseObject.setCurrency(args.currency);
	} else {
		if(!empty(alipayPaymentType) && alipayPaymentType.value.equals(Resource.msg('alipaycheckout.domesticpaymenttype', 'checkout', null))) {
			purchaseObject.setCurrency("CNY");
		} else {
			purchaseObject.setCurrency("USD");
		}
	}
	/***
	 * It is mandatory for Alipay confirm purchase (The actual total amount of an order required here), Vme Transaction Details, optional for all services
	 * 
	 **/
	 var amount : Number;
	if(undefined != args && args.amount){ 
		amount = new Number(args.amount);
	} else {
		amount = new Number("200.00");
	}
		
	purchaseObject.setGrandTotalAmount(StringUtils.formatNumber(amount.valueOf(),"000000.00","en_US"));
    return {success:true, purchaseTotals: purchaseObject};
}

/**
 * Creates the testing purchase Object for Tax where currency is passed in arguments for the application.
 * @param args : having currency value.
 */
function CreateCyberSourcePurchaseTotalsObjectTax(args)
{  
    var purchaseObject = new PurchaseTotals_Object();
			
	/**
	* It is mandatory for all Vme services.
	* 
	**/ 
	if(undefined != args && args.currency) {
		purchaseObject.setCurrency(args.currency);
	} else {
		purchaseObject.setCurrency("USD");
	}
    return {success:true, purchaseTotals: purchaseObject};
}

/**
 * Creates the testing Payment Card  Object for the application.
 */
function CreateCyberSourcePaymentCardObject()
{
    var cardObject = new Card_Object();
	cardObject.setAccountNumber('4000000000000002');
	cardObject.setCardType('001');
	cardObject.setFullName('Donald Rivard');
	cardObject.setExpirationMonth("12");
	cardObject.setExpirationYear("2021");
	cardObject.setCvNumber('321');
	
	return {success:true, card: cardObject};
}

/**
 * Creates testing billing object to check the missing field check.
 * @param InvalidFields : boolean.
 * @param MissingFields : boolean.
 */

function CreateMockCybersourceBillToObject(InvalidFields : Boolean, MissingFields : Boolean)
{
	var billToObject = new BillTo_Object();
	
	billToObject.setFirstName  ( "Peter" );
	billToObject.setLastName   ( "Pritchard" );
	if( !empty(InvalidFields) && InvalidFields.valueOf() ) {
		billToObject.setStreet1 ( "xxxxxxxxxxxxxx" );
	} else {
		billToObject.setStreet1 ( "25 Call Street" );
	}
	billToObject.setStreet2    ( "" );
	billToObject.setCity       ( "Billerica" );
	billToObject.setState      ( "MA" );
	if( !empty(MissingFields) && MissingFields.valueOf() ) {
		billToObject.setPostalCode ( "" );
	} else {
		billToObject.setPostalCode ( "01862" );
	}
	billToObject.setCountry    ( "US" );
	billToObject.setPhoneNumber( "978-362-1553" );
	billToObject.setEmail      ( "ppritchard@demandware.com" );
	
	billToObject.setIpAddress("127.0.0.1");

	return {success:true, billTo: billToObject};
}

/**
 * Creates testing shipping object to check the missing field check.
 * @param InvalidFields : boolean.
 * @param MissingFields : boolean.
 */

function CreateMockCybersourceShipToObject(InvalidFields : Boolean, MissingFields : Boolean)
{
	var shipToObject = new ShipTo_Object();
	
	shipToObject.setFirstName  ( "Peter" );
	shipToObject.setLastName   ( "Pritchard" );
	if( !empty(InvalidFields) && InvalidFields.valueOf() ) {
		shipToObject.setStreet1 ( "xxxxxxxxxxxxxx" );
	} else {
		shipToObject.setStreet1 ( "25 Call Street" );
	}
	shipToObject.setStreet2    ( "" );
	shipToObject.setCity       ( "Billerica" );
	shipToObject.setState      ( "MA" );
	if( !empty(MissingFields) && MissingFields.valueOf() ) {
		shipToObject.setPostalCode ( "" );
	} else {
		shipToObject.setPostalCode ( "01862" );
	}
	shipToObject.setCountry    ( "US" );
	shipToObject.setPhoneNumber( "978-362-1553" );
	shipToObject.setEmail      ( "ppritchard@demandware.com" );
	
	shipToObject.setShippingMethod("Bills Shipping");
	
	return {success:true, shipTo: shipToObject};
}

/**
 * Creates objet to check the taxation service.
 */

function CreateCybersourceTaxationItems()
{
	var itemMap = new ArrayList();
	var lineItems = getLineItems();
	var items = new Array();
	var idcount : Number = 0;
	var CybersourceHelper = libCybersource.getCybersourceHelper();
	while(lineItems.hasNext()){
		var lineItem = lineItems.next();
		itemMap.addAt(idcount, lineItem);
		
		var item = new CybersourceHelper.csReference.Item();
		item.unitPrice = StringUtils.formatNumber(Math.abs(lineItem.basePrice),"#####0.00","en_US");
		
 		if(lineItem.class == 'dw.order.ProductLineItem'){
			item.quantity = lineItem.quantity;
		}else{
			item.quantity = 5;
		}
		if(lineItem.class == 'dw.order.ProductLineItem'){
			item.productName = lineItem.productName;
			item.productSKU = lineItem.productID;
			item.productCode = "01"; // todo: fill in product code when available
			
		}else if(lineItem.class == 'dw.order.ShippingLineItem'){
			item.productName = lineItem.lineItemText;
			item.productSKU = lineItem.ID;
			item.productCode = "78.100";
		}else{
			item.productName = lineItem.lineItemText;
			item.productSKU = "PriceAdjustment";
			item.productCode = "coupon"; // Set to coupon as not to tax
		}
		item.id = idcount++;
		items.push(item);
	}
	return {success:true, items: items, itemMap: itemMap};
}

/**
 * function creates items for testing purpose.
 */
function getLineItems() : Iterator{

	var items = new ArrayList();
	var item = new MockLineItem_Object();
	item.basePrice = "109.00";
	item.quantity = "5";
    item.class ="dw.order.ProductLineItem";
	item.productName = "foobar is my name";
	item.productID = "11111111";
	item.productCode = "";
	items.add(item);
	return items.iterator();	

}
module.exports = {
		CreateCyberSourceBillToObject: CreateCyberSourceBillToObject,
		CreateCyberSourceShipToObject: CreateCyberSourceShipToObject,
		CreateCyberSourcePurchaseTotalsObject: CreateCyberSourcePurchaseTotalsObject,
		CreateCyberSourcePurchaseTotalsObjectForAlipay: CreateCyberSourcePurchaseTotalsObjectForAlipay,
		CreateCyberSourcePurchaseTotalsObjectTax: CreateCyberSourcePurchaseTotalsObjectTax,
		CreateCyberSourcePaymentCardObject:CreateCyberSourcePaymentCardObject,
		CreateCybersourceTaxationItems:CreateCybersourceTaxationItems,
		CreateMockCybersourceBillToObject: CreateMockCybersourceBillToObject,
		CreateMockCybersourceShipToObject: CreateMockCybersourceShipToObject
	};
