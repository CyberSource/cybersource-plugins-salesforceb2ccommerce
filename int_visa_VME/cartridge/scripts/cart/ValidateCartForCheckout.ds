/**
 * ValidateCartForCheckout.ds
 *
 * This script implements a typical shopping cart checkout validation. 
 * The script is provided with the Demandware reference application. Some 
 * parts of the validation script are specific to the reference application
 * logic and might not be applicable to our customer's storefront applications.
 * However, the shopping cart validation script can be customized to meet 
 * specific needs and requirements.
 * 
 * The script implements the validation of the shopping cart against specific
 * conditions. This includes the following steps:
 * - validate that total price is not N/A
 * - validate that all products in the basket are still in site catalog and online
 * - validate that all coupon codes in the basket are valid
 * - validate that the taxes can be calculated for all products in the basket (if ValidateTax in put paramter is true)
 *
 * @input  Basket : dw.order.Basket
 * @input  ValidateTax : Boolean
 * @output BasketStatus : dw.system.Status
 * @output EnableCheckout : Boolean
 */

importPackage( dw.campaign ); 
importPackage( dw.catalog ); 
importPackage( dw.order );
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.web );

/**
 * Function: execute
 *
 * Main function of the validation script. 
 */
function execute( pdict : PipelineDictionary ) : Number
{
    // ===================================================
	// =====     	PROCESS INPUT PARAMETERS 		 ===== 
    // ===================================================
	
	var basket : Basket = pdict.Basket;
	var validateTax : Boolean = pdict.ValidateTax;

    // ===================================================
	// =====   VALIDATE PRODUCT EXISTENCE            ===== 
    // ===================================================
	// Check if all products in basket can still be resolved
	// and are online
	
	var productExistence = validateProductExistence(basket, pdict);
	
    // ===================================================
	// =====             VALIDATE CONTENT            ===== 
    // ===================================================
	// Check if basket contains products or gift certificates
	var hasContent = validateContent(basket);
	
    // ===================================================
	// =====    CHECK MERCHANDIZE TOTAL NET PRICE   ====== 
    // ===================================================

	// Checks the availability of the basket's merchandize
	// total price (net or gross depending on taxation policy)
	var pricesAvailable = basket.merchandizeTotalPrice.available;
	
    // ===================================================
	// =====             VALIDATE COUPONS           ====== 
    // ===================================================	
	var allCouponsValid = validateCoupons(basket, pdict);
	
	// ===================================================
	// =====             VALIDATE TAXES             ====== 
    // ===================================================	
	var hasTotalTax : Boolean = true;
	if (validateTax != null && validateTax == true)
	{
		hasTotalTax = basket.totalTax.available;
	}
	
	
    // ===================================================
	// =====           EVALUATE CONDITIONS           =====
    // ===================================================
    
	if(!pricesAvailable || !productExistence)
	{
		// there are either any product line items without existing 
		// product or one or more line items has no price
		pdict["BasketStatus"] = new Status(Status.ERROR);
		return PIPELET_ERROR;
	}
	else if(!allCouponsValid)
	{
		// there are invalid coupon line items.
		// exit with an error.
		pdict["BasketStatus"] = new Status(Status.ERROR, "CouponError");
		return PIPELET_ERROR;
	}
	else if(!hasContent)
	{
		// there are neither products nor gift certificates in the 
		// basket; we exit with an error however the basket status is OK
		pdict["BasketStatus"] = new Status(Status.OK);
		return PIPELET_ERROR;
	}
	else if (!hasTotalTax)
	{
		pdict["BasketStatus"] = new Status(Status.ERROR, "TaxError");
		return PIPELET_ERROR;
	}


    // ===================================================
	// =====            DONE                         =====
    // ===================================================
	
	pdict["BasketStatus"] = new Status(Status.OK);
    return PIPELET_NEXT;
}

/**
 * FUNCTION: validateProductExistence
 */
function validateProductExistence(basket : Basket, pdict : PipelineDictionary)
{
	var quantityOverflow : Boolean = true;
	var plis : Iterator = basket.getProductLineItems().iterator();
	
	while(plis.hasNext())
	{
		var pli : ProductLineItem = plis.next();
		if(pli.product == null || !pli.product.online)
		{
			return false;
		}
		
		// RAP-116 : if atleast one of the products is out of stock, don't allow checkout 		
		var availabilityLevels : ProductAvailabilityLevels = pli.product.getAvailabilityModel().getAvailabilityLevels(pli.quantityValue);
		quantityOverflow = quantityOverflow && (availabilityLevels.getNotAvailable().value == 0);
	}
	pdict.EnableCheckout = quantityOverflow;
	
	return true;
}

/**
 * FUNCTION: validateContent
 */
function validateContent(basket : Basket)
{
	var plis : Collection = basket.getProductLineItems();
	var gclis : Collection = basket.getGiftCertificateLineItems();
	
	if(plis.size() == 0 && gclis.size() == 0)
	{
		return false;
	}
	
	return true;
}

/**
 * FUNCTION: validateCoupons
 */
function validateCoupons(basket : Basket, pdict : PipelineDictionary)
{
	var clis : Iterator = basket.getCouponLineItems().iterator();
	
	while (clis.hasNext())
	{
		var cli : CouponLineItem = clis.next();
		if (! cli.isValid())
		{
			return false;
		}
	}
	
	return true;
}