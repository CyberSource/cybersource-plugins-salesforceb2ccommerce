/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
*
* @input Basket : dw.order.Basket The basket used for Authorization
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input BMLForm : dw.web.FormElement The form containing the credit card data
* @input IPAddress : String The client's IP address
* @input Customer : dw.customer.Customer
* @input Promo : Boolean
*
* @input  billTo : Object
* @input  shipTo : Object
* @input  card : Object
* @input  purchaseTotals : Object
* @input  bml : Object
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
*
* Author: Danny Gehl
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.customer );

importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_BML_Object.ds');
importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    var basket : Basket = pdict.Basket;
    var orderNo : String = pdict.OrderNo;
	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var bmlObject: BML_Object = pdict.bml;
	var Promo : Boolean = pdict.Promo;
	var cust : Customer = pdict.Basket.getCustomer();

//	if((basket == null || BMLForm == null )){
//		Logger.error("Please provide a Basket and the credit card form element!");
//		return PIPELET_ERROR;
//	}

	var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");

	CybersourceHelper.setEndpoint(service);
	
	if(pdict.Promo)
	{
		if(!CybersourceHelper.createBMLPromoHeader(service)){
			return PIPELET_ERROR;
		}
	}
	else
	{
		if(!CybersourceHelper.createBMLHeader(service)){
			return PIPELET_ERROR;
		}
	}

	var request = new csReference.RequestMessage();
	CybersourceHelper.addBMLAuthRequestInfo(request,billToObject,shipToObject,purchaseObject,cardObject,bmlObject,Promo,orderNo);


	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in BML request request ( {0} )",e.message);
		return false;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(null != response.ccAuthReply){
		pdict.AuthorizationAmount = response.ccAuthReply.amount;
		pdict.AuthorizationCode = response.ccAuthReply.authorizationCode;
		pdict.AuthorizationReasonCode = response.ccAuthReply.reasonCode.get();
		if(cust.profile != null){
		if(!empty(response.ccAuthReply.bmlAccountNumber) && response.decision == 'ACCEPT')
			cust.profile.custom.BMLAcctNo = response.ccAuthReply.bmlAccountNumber;
		}	 
	}
	
    return PIPELET_NEXT;
}
