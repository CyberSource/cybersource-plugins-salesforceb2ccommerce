/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
*
* @input Basket : dw.order.LineItemCtnr The basket used for Authorization
* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input IPAddress : String The client's IP address
* @input ReadFromBasket : Boolean
* @input visaCheckoutFlag : Boolean
* optional payer auth input data
* if XID is provided (not null) the PA data is added to the request
* @input SubscriptionID :String Token
* @input PayerEnrollResponse :Object
* @input PayerValidationResponse :Object
*
* @output ServiceResponse : Object Service Response object
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
*
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output MissingFieldsArray : Array Contains any missing (and required) fields to complete DAV processing
* @output InvalidFieldsArray : Array Contains any invalid (and required) fields to complete DAV processing
* @output StandardizedAddress : Object Contains any 'corrections' made to the address from standards point of view
* @output SubscriptionIDToken :String Token
*/
var Logger = require('dw/system/Logger');
var CybersourceConstants = require('int_cybersource/cartridge/scripts/utils/CybersourceConstants');
var CardFacade = require(CybersourceConstants.CS_CORE_SCRIPT+'facade/CardFacade');
var VisaCheckoutFacade = require(CybersourceConstants.CS_CORE_SCRIPT+'visacheckout/facade/VisaCheckoutFacade');
function execute( pdict : PipelineDictionary ) : Number
{

	//**************************************************************************//
	// read pipeline dictionary input parameter	
	//**************************************************************************//    
    var basket = pdict.Basket;
    var orderNo : String = pdict.OrderNo;

	//**************************************************************************//
	// Check if Basket exists
	//**************************************************************************//
	if(basket == null){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}

	var result;
	if (!pdict.visaCheckoutFlag) {
		result = CardFacade.CCAuthRequest(basket, orderNo, pdict.IPAddress, pdict.CreditCardForm, pdict.SubscriptionID, pdict.PayerEnrollResponse, 
			pdict.PayerValidationResponse, pdict.ReadFromBasket);
	} else {
		result = VisaCheckoutFacade.CCAuthRequest(basket, orderNo, pdict.IPAddress);
	}	
	if (result.error) {
		Logger.error("[PayerAuthValidation.ds] error "+result.errorMsg);
		return PIPELET_ERROR;
	}
	pdict.ServiceResponse = result.serviceResponse;
		
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	pdict.RequestID = result.serviceResponse.RequestID;
	pdict.RequestToken = result.serviceResponse.RequestToken;
	pdict.ReasonCode = result.serviceResponse.ReasonCode;
	pdict.Decision = result.serviceResponse.Decision;
	
	if ( result.serviceResponse.ccAuthReply )
	{
		pdict.AuthorizationAmount = result.serviceResponse.AuthorizationAmount;
		pdict.AuthorizationCode = result.serviceResponse.AuthorizationCode;
		pdict.AuthorizationReasonCode = result.serviceResponse.AuthorizationReasonCode;
	}
	if ( result.serviceResponse.paySubscriptionCreateReply )
	{
		pdict.SubscriptionIDToken = result.serviceResponse.SubscriptionID;
	}
	
	/**********************************************/
	/* DAV-related WebService response processing */
	/**********************************************/
	if( !empty(result.serviceResponse.missingField) ) {
		pdict.MissingFieldsArray = result.serviceResponse.MissingFieldsArray;
	}
	if( !empty(result.serviceResponse.invalidField) ) {
		pdict.InvalidFieldsArray = result.serviceResponse.InvalidFieldsArray;
	}	
	if(!empty(result.serviceResponse.davReply)){
		pdict.DAVReasonCode = result.serviceResponse.DAVReasonCode;
		pdict.StandardizedAddress = result.serviceResponse.StandardizedAddress;
	}
	/* End of DAV response processing */
	
    return PIPELET_NEXT;
}