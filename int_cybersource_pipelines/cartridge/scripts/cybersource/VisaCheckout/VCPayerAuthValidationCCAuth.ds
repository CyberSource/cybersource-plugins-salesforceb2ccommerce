/**
* This script validates the PayerAuth information the customer provided 
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @input Basket : dw.order.LineItemCtnr The basket used for Authorization
* @input PaRes : String The PaRes returned by the authentication
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
*
* @output ServiceResponse : Object Service Response object
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthenticationResult : String the return field
* @output AuthenticationStatusMessage : String the return field
* @output CAVV : String the return field
* @output UCAFAuthenticationData : String the return field
* @output UCAFCollectionIndicator : String the return field
* @output CommerceIndicator : String the return field
* @output XID : String the return field
* @output ECIRaw : String the return field
* @output ParesStatus : String paresStatus as returned by Cybersource
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
*
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output StandardizedAddress : Object Contains any 'corrections' made to the address from standards point of view
* @output SubscriptionIDToken :String Token
*
*/

var VisaCheckoutFacade = require('int_cybersource/cartridge/scripts/facade/VisaCheckoutFacade');
function execute( pdict : PipelineDictionary ) : Number
{
	var basket = pdict.Basket;
	var orderNo : String = pdict.OrderNo;
	var amount : dw.value.Money = pdict.Amount;
	if(basket == null){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}
	var result = VisaCheckoutFacade.PayerAuthValidationCCAuthRequest(basket, pdict.PaRes, amount, orderNo);
	if (result.error) {
		Logger.error("[PayerAuthValidation.ds] error "+result.errorMsg);
		return PIPELET_ERROR;
	}
	pdict.ServiceResponse = result.serviceResponse;
	pdict.RequestID = result.serviceResponse.RequestID;
	pdict.RequestToken = result.serviceResponse.RequestToken;
	pdict.ReasonCode = result.serviceResponse.ReasonCode;
	pdict.Decision = result.serviceResponse.Decision;
	if(result.serviceResponse.payerAuthValidateReply){
		pdict.AuthenticationResult = result.serviceResponse.AuthenticationResult;
		pdict.AuthenticationStatusMessage = result.AuthenticationStatusMessage;
		pdict.CAVV = result.serviceResponse.CAVV;
		pdict.UCAFAuthenticationData = result.serviceResponse.UCAFAuthenticationData;
		pdict.UCAFCollectionIndicator = result.serviceResponse.UCAFCollectionIndicator;
		pdict.CommerceIndicator =  result.serviceResponse.PAVCommerceIndicator;
		pdict.XID = result.serviceResponse.PAVXID;
		pdict.ECIRaw = result.serviceResponse.ECIRaw;
		pdict.ParesStatus = result.serviceResponse.ParesStatus;
	}
	if ( result.serviceResponse.ccAuthReply )
	{
		pdict.AuthorizationAmount = result.serviceResponse.AuthorizationAmount;
		pdict.AuthorizationCode = result.serviceResponse.AuthorizationCode;
		//pdict.AuthorizationReasonCode = result.serviceResponse.ccAuthReply.reasonCode.get();
		pdict.AuthorizationReasonCode = result.serviceResponse.AuthorizationReasonCode;
	}
	if ( result.serviceResponse.paySubscriptionCreateReply )
	{
		pdict.SubscriptionIDToken = result.serviceResponse.SubscriptionID;
	}
	
	/**********************************************/
	/* DAV-related WebService response processing */
	/**********************************************/
	if(null != result.serviceResponse.davReply){
		pdict.DAVReasonCode = result.serviceResponse.DAVReasonCode;
		pdict.StandardizedAddress = result.serviceResponse.StandardizedAddress;
	}
	/* End of DAV response processing */


    return PIPELET_NEXT;
}
