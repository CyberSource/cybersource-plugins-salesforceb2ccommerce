/**
* This script cheks if a customer is enrolled for a PayerAuth program
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @input Basket : dw.order.LineItemCtnr The basket used for Authorization
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input Request : dw.system.Request This is a sample comment.
*
* @output ServiceResponse : Object Service Response object
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CommerceIndicator : String the commerce indicator to use credit card authorization 
* @output UCAFCollectionIndicator : String the return field
* @output ProofXML : String The proof XML comfirming that a check for payer auth was done
* @output AcsURL : String - URL for the issuing Bank's authentication form
* @output PAReq : String The paReq field - Payer authentication request message that you send to the ACS through the card association
* @output XID : String The xid field - A unique transaction ID generated for each payment authentication request (PAReq) message. The PARes returned by issuing bank contains the XID of the PAReq.
* @output ProxyPAN : String The proxyPAN field - Encrypted versio of credit card number used in the payer authentication request message
*
*/

var Logger = require('dw/system/Logger');
var CardFacade = require('int_cybersource/cartridge/scripts/facade/CardFacade');
function execute( pdict : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    var basket = pdict.Basket;
    var amount : dw.value.Money = pdict.Amount;
    var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;
    var orderNo : String = pdict.OrderNo;
    var request = pdict.Request;

	if((basket == null || creditCardForm == null )){
		Logger.error("Please provide a Basket and the credit card form element!");
		return PIPELET_ERROR;
	}
	
	var result = CardFacade.PayerAuthEnrollCheck(basket, amount, orderNo, creditCardForm);
	if (result.error) {
		Logger.error("[PayerAuthEnrollCheck.ds] error "+result.errorMsg);
		return PIPELET_ERROR;
	}
	pdict.ServiceResponse = result.serviceResponse;
	pdict.RequestID = result.serviceResponse.RequestID;
	pdict.RequestToken = result.serviceResponse.RequestToken;
	pdict.ReasonCode = result.serviceResponse.ReasonCode;
	pdict.Decision = result.serviceResponse.Decision;
	if(result.serviceResponse.payerAuthEnrollReply){
		pdict.CommerceIndicator = result.serviceResponse.PACommerceIndicator;
		pdict.UCAFCollectionIndicator = result.serviceResponse.UCAFCollectionIndicator;
		pdict.ProofXML = result.serviceResponse.ProofXML;
		pdict.AcsURL = result.serviceResponse.AcsURL;
		pdict.XID =  result.serviceResponse.PAXID;
		pdict.PAReq = result.serviceResponse.PAReq;
		pdict.ProxyPAN = result.serviceResponse.ProxyPAN;
	}

    return PIPELET_NEXT;
}
