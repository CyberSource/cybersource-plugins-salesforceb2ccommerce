/**
*	OnDemandSubscriptionAccount.ds
*	Perfroms the on demand subscription info service and returns the response.
*	@output amount : String
* 	@output authorizationCode : String
*	@output processorResponse : String
*	@output decision : String
* 	@output reasonCode : Object
* 	@output requestID : Object
* 	@output requestToken : Object
* 	@output invalidField : Array
* 	@output missingField : Array
*
*/
var dwsvc = require ("dw/svc");
var Logger = require('dw/system/Logger');
var CybersourceConstants = require('int_cybersource/cartridge/scripts/utils/CybersourceConstants');
var libCybersource = require(CybersourceConstants.CS_CORE_SCRIPT+'cybersource/libCybersource');
var CommonHelper = require(CybersourceConstants.CS_CORE_SCRIPT+'helper/CommonHelper');
function execute( pdict : PipelineDictionary ) : Number
{
	var subscriptionID : String = "9909000136755587";
	var result = CommonHelper.CreateCyberSourcePurchaseTotalsObject_UserData("USD", "100");
	var purchaseObject = result.purchaseTotals;
	var billToObject = CreateCyberSourceBillToObject().billTo;
	var shipToObject = CreateCybersourceShipToObject().shipTo;
    var CybersourceHelper = libCybersource.getCybersourceHelper();
	var csReference = webreferences.CyberSourceTransaction;
	var request = new csReference.RequestMessage();
	//Defect fix: CYB-110:Not able to search order with Order number in CyberSource control.
	CybersourceHelper.addOnDemandSubscriptionInfo(subscriptionID, request, purchaseObject,"test");
	request.ccAuthService = new CybersourceHelper.csReference.CCAuthService();		
	request.ccAuthService.run = true;
	
	/********************************/
	/* DAV-related WebService setup */
	/********************************/	
	var enableDAV : String = CybersourceHelper.getDavEnable();
	var approveDAV : String = CybersourceHelper.getDavOnAddressVerificationFailure();
	
	if( enableDAV==='YES' ) {
		var ignoreDAVResult = false;
		if( approveDAV==='APPROVE' ) {
			ignoreDAVResult = true;
		}
		CybersourceHelper.addDAVRequestInfo(request,billToObject,shipToObject,ignoreDAVResult);
	}
	/* End of DAV WebService setup */
	
	/* AVS Service setup */
	var ignoreAVSResult : Boolean = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags : String = CybersourceHelper.getAvsDeclineFlags();
	CybersourceHelper.addAVSRequestInfo(request,ignoreAVSResult,declineAVSFlags);
	/* End of AVS Service setup */
		
	var response = null;
	// send request
	try{
		var service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		response = service.call(request);
	}catch(e){
		Logger.error("[OnDemandSubscription.ds] Error in subscription request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(empty(response) || response.status !== "OK"){
		return PIPELET_ERROR;
	}
	else
	{
		response = response.object;
		if(null!==response.ccAuthReply)
		{
			pdict.amount = response.ccAuthReply.amount;
			pdict.authorizationCode = response.ccAuthReply.authorizationCode;
			pdict.processorResponse = response.ccAuthReply.processorResponse;
			pdict.reasonCode = response.reasonCode;
			pdict.decision = response.decision;
			pdict.requestID = response.requestID;
			pdict.requestToken = response.requestToken;
		}
		else
		{
			pdict.decision = response.decision;
			pdict.requestID = response.requestID;
			pdict.requestToken = response.requestToken;
			pdict.reasonCode = response.reasonCode;
			pdict.invalidField = response.invalidField;
			pdict.missingField = response.missingField;
		}
		/**********************************************/
		/* DAV-related WebService response processing */
		/**********************************************/
		if(null !== response.davReply){
			if( !empty(response.davReply.standardizedAddress1) ) {
				var stdAddress ={};
				stdAddress.firstName = shipToObject.firstName;
				stdAddress.lastName = shipToObject.lastName;
				stdAddress.address1 = response.davReply.standardizedAddress1;
				stdAddress.address2 = response.davReply.standardizedAddress2;
				stdAddress.city = response.davReply.standardizedCity;
			if("CsCorrectShipState" in dw.system.Site.getCurrent().getPreferences().getCustom() && dw.system.Site.getCurrent().getCustomPreferenceValue("CsCorrectShipState") === false)
				stdAddress.state = shipToObject.state;
			else
				stdAddress.state = response.davReply.standardizedState;
				//The second fix addressed the issue for Gift Certs when there is no shipto info:
 			if("CsCorrectShipState" in dw.system.Site.getCurrent().getPreferences().getCustom() && dw.system.Site.getCurrent().getCustomPreferenceValue("CsCorrectShipState") === true)
				stdAddress.state = response.davReply.standardizedState;
			else if(!empty(shipToObject.state))
				stdAddress.state = shipToObject.state;
			else
				stdAddress.state = shipToObject.state;
				stdAddress.postalCode = response.davReply.standardizedPostalCode;
				//Fix for CYB-91: DAV Country code 
				stdAddress.country = response.davReply.standardizedISOCountry;
			}
		}
		/* End of DAV response processing */
	}
	return PIPELET_NEXT;
}


function CreateCyberSourceBillToObject()
{
	var title, firstName, lastName, street1, city, state, postalCode, country, phoneNumber, email, dob, ipAddress;
	
					title = "Mr";
					firstName = "Sapient";
					lastName = "test";
					street1 = "728 Geary St";
					city = "San Francisco";
					state = "California";
					postalCode = "94109";
					country = "United States";
					phoneNumber = "1111111111";
					email = "";
					dob = "";
		
		var BillTo_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_BillTo_Object');
		var billToObject = new BillTo_Object();
		billToObject.setTitle(title);
		billToObject.setFirstName(firstName);
		billToObject.setLastName(lastName);
		billToObject.setStreet1(street1);
		billToObject.setCity(city);
		billToObject.setState(state);
		billToObject.setPostalCode(postalCode);
		billToObject.setCountry(country);
		billToObject.setPhoneNumber(phoneNumber);
		billToObject.setEmail(email);
		billToObject.setIpAddress(ipAddress);
		billToObject.setDateOfBirth(dob);
		
		return {success:true, billTo: billToObject};
}


/**
 * Creates shipping address and sets the shipping method.
 * @param LineItemCtnrObj : dw.order.LineItemCtnr contains object of basket or order
 */
 
function CreateCybersourceShipToObject()
{
	
	var ShipTo_Object = require('int_cybersource/cartridge/scripts/cybersource/Cybersource_ShipTo_Object');
	var shipToObject = new ShipTo_Object();
		shipToObject.setFirstName("Sapient");
		shipToObject.setLastName("Test");
		shipToObject.setStreet1("728 Geary St");
		shipToObject.setStreet2("728 Geary St");
		shipToObject.setCity("San Francisco");
		shipToObject.setState("California");
		shipToObject.setPostalCode("94109");
		shipToObject.setCountry("United States");
		shipToObject.setPhoneNumber("1111111111");
		shipToObject.setEmail("nsiddiqui@sapient.com");	
		shipToObject.setShippingMethod("none");	
    return {success:true, shipTo:shipToObject};
}