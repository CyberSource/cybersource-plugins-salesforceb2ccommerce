/**
* Performs the validation of the addresses of a given basket.
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output MissingFieldsArray : Array
* @output InvalidFieldsArray : Array
* @output StandardizedAddress : Object
* @output davResponse : Object
* @output ShipTo : Object The Shipping Address
* @output BillTo : Object the Billing Address

*/

var CybersourceConstants = require('int_cybersource/cartridge/scripts/utils/CybersourceConstants');
var TestFacade = require(CybersourceConstants.CS_CORE_SCRIPT+'unittesting/facade/TestFacade');
var TestHelper = require(CybersourceConstants.CS_CORE_SCRIPT+'unittesting/helper/TestHelper');

function execute( pdict : PipelineDictionary ) : Number
{
	var billToObject = TestHelper.CreateMockCybersourceBillToObject(false, false).billTo;
	var shipToObject = TestHelper.CreateMockCybersourceShipToObject(false, false).shipTo;
	var result = TestFacade.TestDAVRequest(billToObject, shipToObject);
	var responseObject = result.serviceResponse
	
    if(result.error)
    {
    	pdict.Result = CybersourceConstants.ERROR;
    	throw new Error(result.errorMsg);
		return PIPELET_ERROR;
	}
	if(!empty(billToObject))
		pdict.BillTo = billToObject;
		
	if(!empty(shipToObject))
		pdict.ShipTo = shipToObject;
		
	if(!empty(responseObject))
		pdict.davResponse = responseObject;
		
	if(!empty(responseObject.RequestID))
		pdict.RequestID = responseObject.RequestID;
		
	if(!empty(responseObject.RequestToken))
		pdict.RequestToken = responseObject.RequestToken;
		
	if(!empty(responseObject.ReasonCode))
		pdict.ReasonCode = responseObject.ReasonCode;
		
	if(!empty(responseObject.Decision))
		pdict.Decision = responseObject.Decision;
		
	if(!empty(result.serviceResponse))
    	var responseObject = result.serviceResponse;
	
	if(!empty(responseObject.MissingFieldsArray))
		pdict.MissingFieldsArray = responseObject.MissingFieldsArray;
	
	if(!empty(responseObject.InvalidFieldsArray))
		pdict.InvalidFieldsArray = responseObject.InvalidFieldsArray;

	if(!empty(responseObject.davReply)){
		pdict.DAVReasonCode = responseObject.DAVReasonCode;
		pdict.StandardizedAddress = responseObject.StandardizedAddress;
		if(responseObject.DAVReasonCode == 100)
		{
			pdict.davResponse.Result = CybersourceConstants.AUTHORIZED;
			
		}else if(responseObject.DAVReasonCode !== (101 || 102 || 150 || 151 || 152 || 234 || 450 || 451 ||
				 452 || 450 || 451 || 452 || 453 || 454 || 455 || 456 || 457 || 458 || 459 || 460 || 700)){
			pdict.davResponse.Result = CybersourceConstants.ERROR;
		}else
			pdict.davResponse.Result = CybersourceConstants.DECLINED;
	}
    return PIPELET_NEXT;
}