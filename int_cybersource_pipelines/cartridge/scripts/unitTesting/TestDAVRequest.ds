/**
* Performs the validation of the addresses of a given basket.
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output MissingFieldsArray : Array
* @output InvalidFieldsArray : Array
* @output StandardizedAddress : Object
* @output davResponse : Object
* @output ShipTo : Object The Shipping Address
* @output BillTo : Object the Billing Address
*/
var TestFacade = require('int_cybersource/cartridge/scripts/facade/TestFacade');
var TestHelper = require('int_cybersource/cartridge/scripts/helper/TestHelper');
function execute( pdict : PipelineDictionary ) : Number
{
	var billToObject = TestHelper.CreateMockCybersourceBillToObject(false, false).billTo;
	var shipToObject = TestHelper.CreateMockCybersourceShipToObject(false, false).shipTo;
	var result = TestFacade.TestDAVRequest(billToObject, shipToObject);
    if(result.error){
    	throw new Error(result.errorMsg);
		return PIPELET_ERROR;
	}
    
    var responseObject = result.serviceResponse;
    pdict.BillTo=billToObject;
    pdict.ShipTo=shipToObject;
    pdict.davResponse = responseObject;
	pdict.RequestID = responseObject.RequestID;
	pdict.RequestToken = responseObject.RequestToken;
	pdict.ReasonCode = responseObject.ReasonCode;
	pdict.Decision = responseObject.Decision;
	if( !empty(responseObject.MissingFieldsArray) ) {
		pdict.MissingFieldsArray = responseObject.MissingFieldsArray;
	}
	if( !empty(responseObject.InvalidFieldsArray) ) {
		pdict.InvalidFieldsArray = responseObject.InvalidFieldsArray;
	}	
	if(null != responseObject.davReply){
		pdict.DAVReasonCode = responseObject.DAVReasonCode;
		pdict.StandardizedAddress = responseObject.StandardizedAddress;
	}
	
    return PIPELET_NEXT;
}