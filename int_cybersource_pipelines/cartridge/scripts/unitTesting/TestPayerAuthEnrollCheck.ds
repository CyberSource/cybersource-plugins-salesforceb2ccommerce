/**
* This script checks if a customer is enrolled for a PayerAuth program
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CommerceIndicator : String the commerce indicator to use credit card authorization 
* @output ProofXML : String The proof XML confirming that a check for payer auth was done
* @output AcsURL : String - URL for the issuing Bank's authentication form
* @output PAReq : String The paReq field - Payer authentication request message that you send to the ACS through the card association
* @output XID : String The xid field - A unique transaction ID generated for each payment authentication request (PAReq) message. The PARes returned by issuing bank contains the XID of the PAReq.
* @output ProxyPAN : String The proxyPAN field - Encrypted version of credit card number used in the payer authentication request message
* @output ResponseObject : Object The response object of this script
*/
var TestFacade = require('int_cybersource/cartridge/scripts/facade/TestFacade');
var TestHelper = require('int_cybersource/cartridge/scripts/helper/TestHelper');
function execute( pdict : PipelineDictionary ) : Number
{

    var creditCard = TestHelper.CreateCyberSourcePaymentCardObject().card;
    var result = TestFacade.TestPayerAuthEnrollCheck(creditCard);
    if(result.error){
    	throw new Error(result.errorMsg);
		return PIPELET_ERROR;
	}
	
	var responseObject = result.serviceResponse;
	pdict.RequestID = responseObject.PARequestID;
	pdict.RequestToken = responseObject.PARequestToken;
	pdict.ReasonCode = responseObject.PAReasonCode;
	pdict.Decision = responseObject.PADecision;
	if(null != responseObject.payerAuthEnrollReply){
		pdict.CommerceIndicator = responseObject.CommerceIndicator;
		pdict.ProofXML = responseObject.ProofXML;
		pdict.AcsURL = responseObject.AcsURL;
		pdict.XID =  responseObject.PAXID;
		pdict.PAReq = responseObject.PAReq;
		pdict.ProxyPAN = responseObject.ProxyPAN;
	}
	pdict.ResponseObject = responseObject;
    return PIPELET_NEXT;
}