/**
*	TestCreateSubscription.ds
*	Perfroms the pay subscription create service and returns the response.
*
* @input formType : String
* @input currency : String
* @input amount : String
* @output SubscriptionIDToken :String
* @output decision :String
* @output invalidField : Array;
* @output missingField : Array
* @output reasonCode : Object
* @output requestID : Object
* @output requestToken : Object
* @output subscriptionResponse : Object
*/
var SubscriptionFacade = require('int_cybersource/cartridge/scripts/facade/SubscriptionFacade');
var CommonHelper = require('int_cybersource/cartridge/scripts/helper/CommonHelper');
var CardHelper = require('int_cybersource/cartridge/scripts/helper/CardHelper');
function execute( pdict : PipelineDictionary ) : Number
{
    var billToObject = CommonHelper.CreateCyberSourceBillToObject_UserData(pdict.formType).billTo;
	var cardObject = CardHelper.CreateCybersourcePaymentCardObject(pdict.formType).card;
	var result = CommonHelper.CreateCyberSourcePurchaseTotalsObject_UserData(pdict.currency, pdict.amount);
	if(result.error){
		return PIPELET_ERROR;
	}
	var purchaseObject = result.purchaseTotals;
	var response = null;

	result = SubscriptionFacade.CreateSubscription(billToObject,cardObject, purchaseObject);
	
	if(result.error){
		return PIPELET_ERROR;
	}
	
		response = result.serviceResponse;
		pdict.subscriptionResponse = response;
		if ( null != response.SubscriptionIDToken)
		{
			pdict.SubscriptionIDToken = response.SubscriptionIDToken;
		}
		pdict.decision = response.decision;
		pdict.invalidField = response.invalidField;
		pdict.missingField = response.missingField;
		pdict.reasonCode = response.reasonCode;
		pdict.requestID = response.requestID;
		pdict.requestToken = response.requestToken;
	
	return PIPELET_NEXT;
}
