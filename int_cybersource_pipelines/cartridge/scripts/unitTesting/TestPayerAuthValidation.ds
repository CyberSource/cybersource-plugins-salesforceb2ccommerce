/**
* This script validates the PayerAuth information the customer provided 
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @input PaRes : String The PaRes returned by the authentication
* @input CreditCard : Object The form containing the credit card data
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthenticationResult : String the return field
* @output AuthenticationStatusMessage : String the return field
* @output CAVV : String the return field
* @output UCAFAuthenticationData : String the return field
* @output UCAFCollectionIndicator : String the return field
* @output CommerceIndicator : String the return field
* @output XID : String the return field
* @output ECIRaw : String the return field
* @output ParesStatus : String paresStatus as returned by Cybersource
* @output PAVResponse : Object
*/
var TestFacade = require('int_cybersource/cartridge/scripts/facade/TestFacade');
function execute( pdict : PipelineDictionary ) : Number
{
	var creditCard = pdict.CreditCard;
    var PaRes = pdict.PaRes;
    var result = TestFacade.TestPayerAuthValidation(PaRes, creditCard);
    if(result.error){
    	throw new Error(result.errorMsg);
		return PIPELET_ERROR;
	}
	pdict.PAVResponse = result.serviceResponse;
    var responseObject = result.serviceResponse;
	pdict.RequestID = responseObject.PAVRequestID;
	pdict.RequestToken = responseObject.PAVRequestToken;
	pdict.ReasonCode = responseObject.PAVReasonCode;
	pdict.Decision = responseObject.PAVDecision;
	if(responseObject.payerAuthValidateReply != null){
		pdict.AuthenticationResult = responseObject.PAVResult;
		pdict.AuthenticationStatusMessage = responseObject.PAVStatusMessage;
		pdict.CAVV = responseObject.CAVV;
		pdict.UCAFAuthenticationData = responseObject.UCAFAuthenticationData;
		pdict.UCAFCollectionIndicator = responseObject.UCAFCollectionIndicator;
		pdict.CommerceIndicator =  responseObject.PAVCommerceIndicator;
		pdict.XID = responseObject.PAVXID;
		pdict.ECIRaw = responseObject.ECIRaw;
		pdict.ParesStatus = responseObject.ParesStatus;
	}
	return PIPELET_NEXT;
}