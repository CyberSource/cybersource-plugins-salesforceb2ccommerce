/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
* @input	itemmap : dw.util.ArrayList()
* @input	itemarray : Array

* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output AVSCode : String
* @output AVSCodeRaw : String
* @output CCAuthResponse : Object
*/
var TestFacade = require('int_cybersource/cartridge/scripts/facade/TestFacade');
var TestHelper = require('int_cybersource/cartridge/scripts/helper/TestHelper');
function execute( pdict : PipelineDictionary ) : Number
{
	var billToObject = TestHelper.CreateCyberSourceBillToObject().billTo;
	var shipToObject = TestHelper.CreateCyberSourceShipToObject().shipTo;
	var purchaseObject = TestHelper.CreateCyberSourcePurchaseTotalsObject().purchaseTotals;
	var cardObject = TestHelper.CreateCyberSourcePaymentCardObject().card;
    var result = TestFacade.TestCCAuth( billToObject, shipToObject, cardObject, purchaseObject );
	if(result.error){
		throw new Error(result.errorMsg);
		return PIPELET_ERROR;
	}
	var responseObject = result.serviceResponse;
	//set response values in pipeline dictionary
	pdict.CCAuthResponse = responseObject;
	pdict.RequestID = responseObject.RequestID;
	pdict.RequestToken = responseObject.RequestToken;
	pdict.ReasonCode = responseObject.ReasonCode;
	pdict.Decision = responseObject.Decision;
	if(null != responseObject.ccAuthReply){
		pdict.AuthorizationAmount = responseObject.AuthorizationAmount;
		pdict.AuthorizationCode = responseObject.AuthorizationCode;
		pdict.AuthorizationReasonCode = responseObject.AuthorizationReasonCode;
		
		pdict.AVSCode = responseObject.AVSCode;
		pdict.AVSCodeRaw = responseObject.AVSCodeRaw;
	}
    return PIPELET_NEXT;
}