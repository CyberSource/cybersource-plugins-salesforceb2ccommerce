/**
* InitializationSettings.ds
* Retrieve Visa Checkout Initialization string for the v.init event handler function defined in onVisaCheckoutReady function.
*
*   @input Basket : dw.order.LineItemCtnr The existing basket object
*   @input IsDeliveryAddress : Boolean Indicate Delivery Address to be collected from visa checkout.
*   @output VInitFormattedString : String The formatted string to be passed in v.init of function onVisaCheckoutReady
*   @output Signature : String The basketUUID signed signature
*/
                
var Logger = require('dw/system/Logger');
var CybersourceConstants = require('int_cybersource/cartridge/scripts/utils/CybersourceConstants');
var VisaCheckoutAdaptor = require(CybersourceConstants.CS_CORE_SCRIPT+'visacheckout/adaptor/VisaCheckoutAdaptor');

var BasketMgr = require('dw/order/BasketMgr'); 
var PaymentMgr = require('dw/order/PaymentMgr');


function execute( pdict : PipelineDictionary ) : Number
{
	var isVisaCheckout = PaymentMgr.getPaymentMethod(CybersourceConstants.METHOD_VISA_CHECKOUT).isActive();
	var Basket = BasketMgr.getCurrentOrNewBasket();
	try 
	{
		if(isVisaCheckout && !empty(Basket))
		{
			var result = VisaCheckoutAdaptor.GetButtonInitializeSettings(Basket, pdict.IsDeliveryAddress);
		    pdict.VInitFormattedString = result.VInitFormattedString;
			pdict.Signature = result.signature;
			return PIPELET_NEXT;
		}else
			return PIPELET_ERROR;
	}
	catch(err)
	{
		Logger.error("Visa Checkout initialization failed: {0}", err.message);
		return PIPELET_ERROR;
	}
}