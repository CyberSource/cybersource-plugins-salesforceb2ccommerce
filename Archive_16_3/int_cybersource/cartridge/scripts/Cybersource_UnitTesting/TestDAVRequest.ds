/**
* Performs the validation of the addresses of a given basket.
*
* @input  billTo : Object
* @input  shipTo : Object
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output MissingFieldsArray : Array
* @output InvalidFieldsArray : Array
* @output StandardizedAddress : Object
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );

importScript('cybersource/libCybersource.ds');

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
var dwsvc		= require ("dw/svc");

function execute( pdict : PipelineDictionary ) : Number
{
	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	
	var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	/*var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());

	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		pdict.ReasonCode = 0;
		return PIPELET_ERROR;
	}*/
 
	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addDAVRequestInfo(request,billToObject,shipToObject,false,"TEST123");

	var response = null;
	// send request
	try{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		response = service.call(request);
	}catch(e){
		Logger.error("[libCybersource2.ds] Error in DAV request ( {0} )",e.message);
		pdict.ReasonCode = 0;
		return PIPELET_ERROR;
	}
	
	if(empty(response) || response.status != "OK"){
		pdict.ReasonCode = 0;
		return PIPELET_ERROR;
	}
	
	response = response.object;
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if( !empty(response.missingField) ) {
		pdict.MissingFieldsArray = response.missingField;
	}
	if( !empty(response.invalidField) ) {
		pdict.InvalidFieldsArray = response.invalidField;
	}	
	if(null != response.davReply){
		pdict.DAVReasonCode = response.davReply.reasonCode.get();
		
		if( !empty(response.davReply.standardizedAddress1) ) {
			var stdAddress : Object = new Object();
			stdAddress.firstName = pdict.shipTo.firstName;
			stdAddress.lastName = pdict.shipTo.lastName;
			stdAddress.address1 = response.davReply.standardizedAddress1;
			stdAddress.address2 = response.davReply.standardizedAddress2;
			stdAddress.city = response.davReply.standardizedCity;
			//Defect fix: CYB-92 : DAV Country province code 
		if("CsCorrectShipState" in dw.system.Site.getCurrent().getPreferences().getCustom() && dw.system.Site.getCurrent().getCustomPreferenceValue("CsCorrectShipState") == false)
			stdAddress.state = pdict.shipTo.state;
		else
			stdAddress.state = response.davReply.standardizedState;
				//The second fix addressed the issue for Gift Certs when there is no shipto info:
 		if("CsCorrectShipState" in dw.system.Site.getCurrent().getPreferences().getCustom() && dw.system.Site.getCurrent().getCustomPreferenceValue("CsCorrectShipState") == true)
			stdAddress.state = response.davReply.standardizedState;
		else if(!empty(pdict.shipTo.state))
			stdAddress.state = pdict.shipTo.state;
		else
			stdAddress.state = pdict.billTo.state;
			stdAddress.postalCode = response.davReply.standardizedPostalCode;
			//Fix for CYB-91: DAV Country code 
			stdAddress.country = response.davReply.standardizedISOCountry;
			pdict.StandardizedAddress = stdAddress;
		}
	}
	
    return PIPELET_NEXT;
}
