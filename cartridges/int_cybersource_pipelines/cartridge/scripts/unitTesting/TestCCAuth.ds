/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
* @input	itemmap : dw.util.ArrayList()
* @input	itemarray : Array

* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : String The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output AVSCode : String
* @output AVSCodeRaw : String
* @output CCAuthResponse : Object
*/

var CybersourceConstants = require('int_cybersource/cartridge/scripts/utils/CybersourceConstants');
var TestFacade = require(CybersourceConstants.CS_CORE_SCRIPT+'unittesting/facade/TestFacade');
var TestHelper = require(CybersourceConstants.CS_CORE_SCRIPT+'unittesting/helper/TestHelper');
var Logger = require('dw/system/Logger');

function execute( pdict : PipelineDictionary ) : Number
{
	//set response values in pipeline dictionary
	var responseObject  = testCCAuth();
	if(responseObject.error){
		Logger.error(result.errorMsg);
		return PIPELET_ERROR;
	}
	pdict.CCAuthResponse = responseObject;
	pdict.RequestID = responseObject.RequestID;
	pdict.RequestToken = responseObject.RequestToken;
	pdict.ReasonCode = responseObject.ReasonCode;
	pdict.Decision = responseObject.Decision;
    return PIPELET_NEXT;
}

function testCCAuth(){
	var billToObject = TestHelper.CreateCyberSourceBillToObject().billTo;
	var shipToObject = TestHelper.CreateCyberSourceShipToObject().shipTo;
	var purchaseObject = TestHelper.CreateCyberSourcePurchaseTotalsObject().purchaseTotals;
	var cardObject = TestHelper.CreateCyberSourcePaymentCardObject().card;
    var result = TestFacade.TestCCAuth( billToObject, shipToObject, cardObject, purchaseObject );
    var responseObject;
	if(result.error){
		responseObject = result;
		return responseObject;
	}
	responseObject = result.serviceResponse;
	var resObj = {};
		if(!empty(responseObject.ccAuthReply)){
		resObj.AuthorizationAmount = responseObject.AuthorizationAmount;
		resObj.AuthorizationCode = responseObject.AuthorizationCode;
		resObj.AuthorizationReasonCode = responseObject.AuthorizationReasonCode;
		resObj.Decision = responseObject.Decision;
		resObj.RequestToken = responseObject.RequestToken;
		resObj.RequestID = responseObject.RequestID;
		resObj.AVSCode = responseObject.AVSCode;
		resObj.AVSCodeRaw = responseObject.AVSCodeRaw;
	}
	
	return resObj;
}
module.exports = {
    testCCAuth : testCCAuth
};