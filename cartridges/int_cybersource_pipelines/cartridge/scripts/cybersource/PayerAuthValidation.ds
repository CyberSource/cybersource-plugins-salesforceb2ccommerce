/**
* This script validates the PayerAuth information the customer provided 
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @input PaRes : String The PaRes returned by the authentication
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input CreditCardToken : String The CreditCardToken
*
* @output ServiceResponse : Object Service Response object
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthenticationResult : String the return field
* @output AuthenticationStatusMessage : String the return field
* @output CAVV : String the return field
* @output UCAFAuthenticationData : String the return field
* @output UCAFCollectionIndicator : String the return field
* @output CommerceIndicator : String the return field
* @output XID : String the return field
* @output ECIRaw : String the return field
* @output ParesStatus : String paresStatus as returned by Cybersource
*
*/



var dwsvc		= require ("dw/svc");
var Logger = require('dw/system/Logger');
var CardFacade = require('int_cybersource/cartridge/scripts/facade/CardFacade');
function execute( pdict : PipelineDictionary ) : Number
{
	var orderNo : String = pdict.OrderNo;
	var amount : dw.value.Money = pdict.Amount;
	var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;
	    var processorTransactionid :String = session.privacy.processorTransactionid;
    var result = CardFacade.PayerAuthValidation(pdict.PaRes, amount, orderNo, creditCardForm, pdict.CreditCardToken,processorTransactionid);
	if (result.error) {
		Logger.error("[PayerAuthValidation.ds] error "+result.errorMsg);
		return PIPELET_ERROR;
	}
	pdict.ServiceResponse = result.serviceResponse;
	pdict.RequestID = result.serviceResponse.RequestID;
	pdict.RequestToken = result.serviceResponse.RequestToken;
	pdict.ReasonCode = result.serviceResponse.ReasonCode;
	pdict.Decision = result.serviceResponse.Decision;
	if(result.serviceResponse.payerAuthValidateReply){
		pdict.AuthenticationResult = result.serviceResponse.AuthenticationResult;
		pdict.AuthenticationStatusMessage = result.AuthenticationStatusMessage;
		pdict.CAVV = result.serviceResponse.CAVV;
		pdict.UCAFAuthenticationData = result.serviceResponse.UCAFAuthenticationData;
		pdict.UCAFCollectionIndicator = result.serviceResponse.UCAFCollectionIndicator;
		pdict.CommerceIndicator =  result.serviceResponse.PAVCommerceIndicator;
		pdict.XID = result.serviceResponse.PAVXID;
		pdict.ECIRaw = result.serviceResponse.ECIRaw;
		pdict.ParesStatus = result.serviceResponse.ParesStatus;
	}

    return PIPELET_NEXT;
}
