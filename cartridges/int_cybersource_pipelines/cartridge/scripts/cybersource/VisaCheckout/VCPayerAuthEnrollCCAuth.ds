/**
* This script checks if a customer is enrolled for a PayerAuth program
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
* @input PaymentInstrument : dw.order.PaymentInstrument
* @input Basket : dw.order.LineItemCtnr The basket used for Authorization
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
*
* @output ServiceResponse : Object Service Response object
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output PAReasonCode : Number The payer enrollment response reason code returned by Cybersource (100 = Success, 475 card require payer validation)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CommerceIndicator : String the commerce indicator to use credit card authorization 
* @output UCAFCollectionIndicator : String the return field
* @output ProofXML : String The proof XML comfirming that a check for payer auth was done
* @output AcsURL : String - URL for the issuing Bank's authentication form
* @output PAReq : String The paReq field - Payer authentication request message that you send to the ACS through the card association
* @output XID : String The xid field - A unique transaction ID generated for each payment authentication request (PAReq) message. The PARes returned by issuing bank contains the XID of the PAReq.
* @output ProxyPAN : String The proxyPAN field - Encrypted versio of credit card number used in the payer authentication request message
* @output authenticationTransactionID : String The authenticationTransactionID field - A unique transaction ID generated for each payment authentication request message.
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
*
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output StandardizedAddress : Object Contains any 'corrections' made to the address from standards point of view
* @output SubscriptionIDToken :String Token
*
*/


var Logger = require('dw/system/Logger');
var CybersourceConstants = require('int_cybersource/cartridge/scripts/utils/CybersourceConstants');
var VisaCheckoutFacade = require(CybersourceConstants.CS_CORE_SCRIPT+'visacheckout/facade/VisaCheckoutFacade');
var libCybersource = require(CybersourceConstants.CS_CORE_SCRIPT+'cybersource/libCybersource');
var CybersourceHelper = libCybersource.getCybersourceHelper();
var Transaction = require('dw/system/Transaction');


function execute( pdict : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    var basket = pdict.Basket;
    var amount = pdict.Amount;
    var orderNo = pdict.OrderNo;

	if(basket == null){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}
	var result = VisaCheckoutFacade.PayerAuthEnrollCCAuthRequest(basket, amount, orderNo);
	if (result.error) {
		Logger.error("[PayerAuthEnrollCheck.ds] error "+result.errorMsg);
		return PIPELET_ERROR;
	}
	pdict.ServiceResponse = result.serviceResponse;
	pdict.RequestID = result.serviceResponse.RequestID;
	pdict.RequestToken = result.serviceResponse.RequestToken;
	pdict.ReasonCode = result.serviceResponse.ReasonCode;
	pdict.Decision = result.serviceResponse.Decision;
	if(result.serviceResponse.payerAuthEnrollReply){
		pdict.PAReasonCode = result.serviceResponse.PAReasonCode;
		pdict.CommerceIndicator = result.serviceResponse.PACommerceIndicator;
		pdict.UCAFCollectionIndicator = result.serviceResponse.UCAFCollectionIndicator;
		pdict.ProofXML = result.serviceResponse.ProofXML;
		pdict.AcsURL = result.serviceResponse.AcsURL;
		pdict.XID =  result.serviceResponse.PAXID;
		pdict.PAReq = result.serviceResponse.PAReq;
		pdict.ProxyPAN = result.serviceResponse.ProxyPAN;
		pdict.authenticationTransactionID = result.serviceResponse.authenticationTransactionID;
		
	}
	if ( result.serviceResponse.ccAuthReply )
	{
		pdict.AuthorizationAmount = result.serviceResponse.AuthorizationAmount;
		pdict.AuthorizationCode = result.serviceResponse.AuthorizationCode;
		pdict.AuthorizationReasonCode = result.serviceResponse.AuthorizationReasonCode;
	}
	if ( result.serviceResponse.paySubscriptionCreateReply )
	{
		pdict.SubscriptionIDToken = result.serviceResponse.SubscriptionID;
	}
	
	/**********************************************/
	/* DAV-related WebService response processing */
	/**********************************************/
	if(!empty(result.serviceResponse.davReply)){
		pdict.DAVReasonCode = result.serviceResponse.DAVReasonCode;
		pdict.StandardizedAddress = result.serviceResponse.StandardizedAddress;
	}
	/* End of DAV response processing */
	
	if(CybersourceHelper.getProofXMLEnabled())
		Transaction.wrap(function () {
			pdict.PaymentInstrument.paymentTransaction.custom.proofXML = result.serviceResponse.ProofXML;
		});

    return PIPELET_NEXT;
}
