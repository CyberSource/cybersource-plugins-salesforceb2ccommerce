/**
* Performs the authorization of the credit card capture request. If order information is
* sumbitted in the CCCapture request.
* @input Order : dw.order.LineItemCtnr
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CaptureReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output CaptureAmount : String the amount authorized by Cybersource
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );

importScript('cybersource/libCybersource.ds');
var dwsvc		= require ("dw/svc");
function execute( pdict : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    var order : Order = pdict.Order;
    var paymentTransaction : PaymentTransaction = order.getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD)[0].paymentTransaction;
 	if(order.getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD).empty || order.paymentStatus.value == "PAID")
 		return PIPELET_ERROR;
	var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	/*var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}*/

	var request = new csReference.RequestMessage();
	CybersourceHelper.addCCCaptureRequestInfo(request, order);

	var response = null;
	// send request
	try{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		response = service.call(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in taxation request ( {0} )",e.message);
		return false;
	}
	
	if(empty(response) || response.status != "OK"){
		return PIPELET_ERROR;
	}
	response = response.object;
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(null != response.ccCaptureReply){
		pdict.CaptureAmount = response.ccCaptureReply.amount;
		pdict.CaptureReasonCode = response.ccCaptureReply.reasonCode.get();
	}
	
	//if("AmountPaid" in order.custom && response.decision == "ACCEPT")
	if(response.decision == "ACCEPT")
	{
		if(!empty(paymentTransaction) || paymentTransaction == null)
		 paymentTransaction.custom.AmountPaid = Number(response.ccCaptureReply.amount.toString());	
	}
		
    return PIPELET_NEXT;
}
