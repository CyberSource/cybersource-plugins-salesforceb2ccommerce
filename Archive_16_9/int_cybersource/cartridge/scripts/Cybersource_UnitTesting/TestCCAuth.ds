/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
* @input 	billTo : Object
* @input 	shipTo : Object
* @input 	card : Object
* @input 	purchaseTotals : Object
* @input	itemmap : dw.util.ArrayList()
* @input	itemarray : Array

* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output AVSCode : String
* @output AVSCodeRaw : String
*
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/Cybersource_Item_Object.ds');
importScript('cybersource/libCybersource.ds');
var dwsvc		= require ("dw/svc");
var numbersOnlyRegExp : RegExp = /\D/g;
function execute( pdict : PipelineDictionary ) : Number
{

    var amount : Money = new Money(2057.00,"USD");
	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	
	
	var CybersourceHelper = getCybersourceHelper();
	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	/*var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}*/

	var request = new csReference.RequestMessage();
	var itemObject: Item_Object = new Item_Object();
	itemObject.setUnitPrice(10,"000000.00","en_US");
	itemObject.setId(1);
	var itemObjects : ArrayList = new ArrayList();
	itemObjects.add(itemObject);
	
	CybersourceHelper.addCCAuthRequestInfo(request,billToObject,shipToObject,purchaseObject,cardObject,"test",CybersourceHelper.getDigitalFingerprintEnabled(), itemObjects);
	
	/********************************/
	/* DAV-related WebService setup */
	/********************************/	
	var enableDAV : String = CybersourceHelper.getDavEnable();
	var approveDAV : String = CybersourceHelper.getDavOnAddressVerificationFailure();
	
	if( enableDAV=='YES' ) {
		var ignoreDAVResult = false;
		if( approveDAV=='APPROVE' ) {
			ignoreDAVResult = true;
		}
		CybersourceHelper.addDAVRequestInfo(request,billToObject,shipToObject,ignoreDAVResult);
	}
	/* End of DAV WebService setup */
	
	/* AVS Service setup */
	var ignoreAVSResult : Boolean = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags : String = CybersourceHelper.getAvsDeclineFlags();
	
	CybersourceHelper.addAVSRequestInfo(request,ignoreAVSResult,declineAVSFlags);
	/* End of AVS Service setup */
	
		
	var response = null;
	// send request
	try{
		var service : dwsvc.Service = dwsvc.ServiceRegistry.get("cybersource.soap.transactionprocessor.generic"); 
		response = service.call(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in taxation request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(empty(response) || response.status != "OK"){
		return PIPELET_ERROR;
	}
	
	response = response.object;
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(null != response.ccAuthReply){
		pdict.AuthorizationAmount = response.ccAuthReply.amount;
		pdict.AuthorizationCode = response.ccAuthReply.authorizationCode;
		pdict.AuthorizationReasonCode = response.ccAuthReply.reasonCode.get();
		
		pdict.AVSCode = response.ccAuthReply.avsCode;
		pdict.AVSCodeRaw = response.ccAuthReply.avsCodeRaw;
	}
	


    return PIPELET_NEXT;
}

